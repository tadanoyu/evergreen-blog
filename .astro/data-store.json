[["Map",1,2,9,10,225,226],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.12","content-config-digest","5ab970fb93e6173b","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"content\":{\"type\":\"text\",\"value\":\" ↗\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","note",["Map",11,12,33,34,55,56,74,75,93,94,112,113,131,132,150,151,169,170,188,189,206,207],"240610164501",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21},{"title":14,"folge":15,"uid":11,"pubDate":16,"updatedDate":17},"모든 상황에 완벽한 성능을 보장하는 자료구조는 없다","0","June 10 2024 16:45","May 11 2025 20:00","모든 상황에 완벽한 성능을 보장하는 자료구조는 없다. 상황에 따라 사용하기 좋은 자료구조가 있고 그렇지 않은 자료구조가 있다. 적합한 자료구조라는 말도 해당 자료구조의 단점보다 장점이 현 상황에 도움이 된다는 의미이지, 단점이 없다는 뜻은 아니다.\n\n- [조회(index) 연산이 잦은 경우](/note/250511090805) → 배열(Array)\n- [삽입(insert)과 삭제(delete) 연산이 잦은 경우](/note/250513050442) → 연결리스트(Linked List)\n- 탐색(search) 관련 성능이 필요한 경우 → 해시테이블(Hash table), 트리(Tree)\n\n## 확장 🌱\n\n- [x] 배열이 조회 연산에 강점을 보이는 이유 → [250511090805](/note/250511090805)\n- [x] 배열은 왜 삽입 및 삭제 연산을 빠르게 처리할 수 없는가 → [250512043750](/note/250512043750)\n- [x] 연결리스트가 배열보다 삽입과 삭제에 유리한 이유 → [250513050442](/note/250513050442)\n- [x] 연결리스트는 어떻게 조회를 하는가 → [250513192645](/note/250513192645)\n- [x] 조회, 삽입, 삭제 - 세 마리 토끼를 전부 잡을 수 있을까? → [250514212107](/note/250514212107)\n- [ ] 탐색 관련 성능이 필요한 경우는 언제인가 → `あとで`\n- [ ] 적합한 자료구조의 기준은 무엇인가 (연산 횟수만 중요한가?) → `あとで`\n- [x] 상황에 따라 사용하기 좋은 언어도 있을까? → [250515051958](/note/250515051958)","src/content/note/240610164501.md","bfced674574dc0db",{"html":22,"metadata":23},"\u003Cp>모든 상황에 완벽한 성능을 보장하는 자료구조는 없다. 상황에 따라 사용하기 좋은 자료구조가 있고 그렇지 않은 자료구조가 있다. 적합한 자료구조라는 말도 해당 자료구조의 단점보다 장점이 현 상황에 도움이 된다는 의미이지, 단점이 없다는 뜻은 아니다.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250511090805\">조회(index) 연산이 잦은 경우\u003C/a> → 배열(Array)\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250513050442\">삽입(insert)과 삭제(delete) 연산이 잦은 경우\u003C/a> → 연결리스트(Linked List)\u003C/li>\n\u003Cli>탐색(search) 관련 성능이 필요한 경우 → 해시테이블(Hash table), 트리(Tree)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 배열이 조회 연산에 강점을 보이는 이유 → \u003Ca href=\"/note/250511090805\">250511090805\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 배열은 왜 삽입 및 삭제 연산을 빠르게 처리할 수 없는가 → \u003Ca href=\"/note/250512043750\">250512043750\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 연결리스트가 배열보다 삽입과 삭제에 유리한 이유 → \u003Ca href=\"/note/250513050442\">250513050442\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 연결리스트는 어떻게 조회를 하는가 → \u003Ca href=\"/note/250513192645\">250513192645\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 조회, 삽입, 삭제 - 세 마리 토끼를 전부 잡을 수 있을까? → \u003Ca href=\"/note/250514212107\">250514212107\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 탐색 관련 성능이 필요한 경우는 언제인가 → \u003Ccode>あとで\u003C/code>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 적합한 자료구조의 기준은 무엇인가 (연산 횟수만 중요한가?) → \u003Ccode>あとで\u003C/code>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 상황에 따라 사용하기 좋은 언어도 있을까? → \u003Ca href=\"/note/250515051958\">250515051958\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":24,"localImagePaths":29,"remoteImagePaths":30,"frontmatter":31,"imagePaths":32},[25],{"depth":26,"slug":27,"text":28},2,"확장","확장 🌱",[],[],{"title":14,"folge":15,"uid":11,"pubDate":16,"updatedDate":17},[],"250511090805",{"id":33,"data":35,"body":40,"filePath":41,"digest":42,"rendered":43},{"title":36,"folge":37,"uid":38,"pubDate":39},"배열이 조회 연산에 강점을 보이는 이유","0a","250511210805","May 11 2025 21:08","조회 연산이 잦은 경우 배열(Array) 자료구조가 좋은 선택이 될 수 있다. 배열의 경우 데이터(원소) 접근의 시간복잡도가 `O(1)`으로 인덱스를 사용하여 빠르게 조회가 가능하다.\n\n```ruby\narr = [17, 34, 51]\nputs arr[0] # => 첫 번째 원소 '17' 출력\nputs arr[1] # => '34'\nputs arr[2] # => '51'\n```\n \n빠른 조회가 가능한 이유는 배열은 메모리에 하나의 연속된 블럭으로 할당되기 때문이다. 예를들어 크기 3인 배열의 경우, 메모리를 뜯어 보면 3개의 데이터를 저장할 수 있는 크기의 공간이 연속적으로 나열되어 있음을 확인할 수 있다. 연속적으로 나열이 되어있다 보니 offset으로 계산할 수 있기 때문에 원하는 원소를 바로 조회할 수 있다.\n\n## 확장 🌱\n- [x] 조회 연산이 O(1)인 자료구조는 배열 밖에 없을까\n    +   해시테이블 -> [250514212107](/note/250514212107)\n- [x] 배열의 크기가 너무 커서 연속된 블럭으로 할당할 수 없을 경우 어떤 일이 발생할까\n    + → Undefined Behavior (UB)\n- [ ] 배열의 offset은 어떻게 계산하는가\n- [x] 배열의 크기를 벗어나는 곳을 조회하면 어떻게 되는가\n    + → Index Out of Bound Exception\n    + → Undefined Behavior (UB)\n- [ ] 배열의 강점은 조회밖에 없나\n- [ ] 스크립트 언어의 배열은 어떻게 각기다른 종류의 타입을 담아낼 수 있는가\n\n## 관련 노트 📘\n- [250512043750](/note/250512043750) - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\n- [250513192645](note/250513192645) - 연결리스트의 조회는 순차적으로 이루어진다\n- [250514212107](/note/250514212107) - 조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자","src/content/note/250511090805.md","cfd392413eda2a17",{"html":44,"metadata":45},"\u003Cp>조회 연산이 잦은 경우 배열(Array) 자료구조가 좋은 선택이 될 수 있다. 배열의 경우 데이터(원소) 접근의 시간복잡도가 \u003Ccode>O(1)\u003C/code>으로 인덱스를 사용하여 빠르게 조회가 가능하다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">34\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">51\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#6A737D\"># => 첫 번째 원소 '17' 출력\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#6A737D\"># => '34'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#6A737D\"># => '51'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>빠른 조회가 가능한 이유는 배열은 메모리에 하나의 연속된 블럭으로 할당되기 때문이다. 예를들어 크기 3인 배열의 경우, 메모리를 뜯어 보면 3개의 데이터를 저장할 수 있는 크기의 공간이 연속적으로 나열되어 있음을 확인할 수 있다. 연속적으로 나열이 되어있다 보니 offset으로 계산할 수 있기 때문에 원하는 원소를 바로 조회할 수 있다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 조회 연산이 O(1)인 자료구조는 배열 밖에 없을까\n\u003Cul>\n\u003Cli>해시테이블 -> \u003Ca href=\"/note/250514212107\">250514212107\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 배열의 크기가 너무 커서 연속된 블럭으로 할당할 수 없을 경우 어떤 일이 발생할까\n\u003Cul>\n\u003Cli>→ Undefined Behavior (UB)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 배열의 offset은 어떻게 계산하는가\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 배열의 크기를 벗어나는 곳을 조회하면 어떻게 되는가\n\u003Cul>\n\u003Cli>→ Index Out of Bound Exception\u003C/li>\n\u003Cli>→ Undefined Behavior (UB)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 배열의 강점은 조회밖에 없나\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 스크립트 언어의 배열은 어떻게 각기다른 종류의 타입을 담아낼 수 있는가\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250512043750\">250512043750\u003C/a> - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\u003C/li>\n\u003Cli>\u003Ca href=\"note/250513192645\">250513192645\u003C/a> - 연결리스트의 조회는 순차적으로 이루어진다\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250514212107\">250514212107\u003C/a> - 조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자\u003C/li>\n\u003C/ul>",{"headings":46,"localImagePaths":51,"remoteImagePaths":52,"frontmatter":53,"imagePaths":54},[47,48],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},"관련-노트","관련 노트 📘",[],[],{"title":36,"folge":37,"uid":38,"pubDate":39},[],"250512043750",{"id":55,"data":57,"body":61,"filePath":62,"digest":63,"rendered":64},{"title":58,"folge":59,"uid":55,"pubDate":60},"배열의 삽입과 삭제에는 O(n)의 시간이 필요하다","0b","May 12 2025 04:37","배열에서 원소의 값을 덮어씌우거나, 맨 뒤에 값을 추가 혹은 삭제 하는 경우 O(1)의 시간이 걸린다.\n\n```ruby\narr = Array.new(5)\narr[0] = 17  # 1번 원소의 값 17로 덮어씌움 \narr[1] = 34  # 2번 원소의 값 34로 덮어씌움\n\n# 맨 뒤에 데이터 추가\nnum_element = 2        # 데이터 총 개수\narr[num_element] = 51\nnum_element += 1\n\n# 맨 뒤 데이터 삭제\nnum_element -= 1\narr[num_element] = nil\n```\n\n하지만 배열 중간에 데이터를 추가하거나, 중간에 위치해 있는 데이터를 삭제하는 경우 shift 작업이 필요하다. Shift는 의미 그대로 해당 위치 이후에 있는 모든 데이터를 한 칸씩 밀어주거나 당겨오는 것을 의미한다.\n\n- 데이터 삽입 -> 데이터 삽입할 공간 필요 -> 한 칸씩 오른쪽으로 shift\n- 데이터 삭제 -> 비어있는 공간을 매꿈 -> 한 칸씩 왼쪽으로 shift\n\n```ruby\narr = Array.new(5) # [nil, nil, nil, nil, nil]\narr[0] = 17\narr[1] = 51\narr[2] = 68        # [17, 51, 68, nil, nil]\n\n########### arr[1]번 위치에 '34' 삽입\nnum_element = 3\ninsert_at = 1\nvalue = 34\n\nnum_element.downto(insert_at) do |i|\n\tarr[i] = arr[i-1]\nend\n\narr[insert_at] = value\nnum_element += 1\n\nprint arr # [17, 34, 51, 68, nil]\n\n########## 1번 원소 삭제\narr[0] = nil\nfor i in (0..num_element-1) do\n\tarr[i] = arr[i+1]\nend\n\narr[num_element] = nil\nnum_element -= 1\n\nprint arr # [34, 51, 68, nil, nil]\n```\n\n배열에 속해있는 원소의 개수 만큼 반복을 해야하기 때문에, 삽입과 삭제의 시간복잡도는 `O(n)`이 된다. 그렇기 때문에 삽입과 삭제 연산이 잦은 경우 `O(1)`의 시간으로 해당 연산이 가능한 자료구조를 선택하는 것이 바람직하다.\n\n## 확장 🌱\n- [x] 삽입/삭제가 O(1)으로 가능한 자료구조는 뭐가 있을까\n  * 연결리스트 ([250513050442](/note/250513050442)), 해시테이블 ([250514212107](/note/250514212107))\n- [x] 시간복잡도는 왜 중요한가 -> [250515204930](/note/250515204930)\n- [ ] 시간복잡도는 사용하는 언어에 따라 달라질 수 있을까\n- [ ] 배열을 제외하고 shift 작업이 필요한 경우가 있을까\n  * 루비에는 `shift`함수가 있다 -> [250516052830](/note/250516052830)\n- [x] shift 대신 매번 새로운 배열을 할당한다면?\n  * 성능은 오히려 나빠진다. O(n)은 여전하고, 메모리 사용이 증가함 => 공간복잡도 상승\n\n## 관련 노트 📘\n- [250511090805](/note/250511090805) - 배열이 조회 연산에 강점을 보이는 이유\n- [250513050442](/note/250513050442) - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\n- [250514212107](/note/250514212107) - 조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자\n- [250516052830](/note/250516052830) - Ruby의 배열에는 shift와 unshift 메소드가 있다","src/content/note/250512043750.md","4d21eb960be7ed20",{"html":65,"metadata":66},"\u003Cp>배열에서 원소의 값을 덮어씌우거나, 맨 뒤에 값을 추가 혹은 삭제 하는 경우 O(1)의 시간이 걸린다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 17\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 1번 원소의 값 17로 덮어씌움 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 34\u003C/span>\u003Cspan style=\"color:#6A737D\">  # 2번 원소의 값 34로 덮어씌움\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 맨 뒤에 데이터 추가\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#6A737D\">        # 데이터 총 개수\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[num_element] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 51\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> +=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 맨 뒤 데이터 삭제\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> -=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[num_element] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>하지만 배열 중간에 데이터를 추가하거나, 중간에 위치해 있는 데이터를 삭제하는 경우 shift 작업이 필요하다. Shift는 의미 그대로 해당 위치 이후에 있는 모든 데이터를 한 칸씩 밀어주거나 당겨오는 것을 의미한다.\u003C/p>\n\u003Cul>\n\u003Cli>데이터 삽입 -> 데이터 삽입할 공간 필요 -> 한 칸씩 오른쪽으로 shift\u003C/li>\n\u003Cli>데이터 삭제 -> 비어있는 공간을 매꿈 -> 한 칸씩 왼쪽으로 shift\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ruby\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#6A737D\"># [nil, nil, nil, nil, nil]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 17\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 51\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 68\u003C/span>\u003Cspan style=\"color:#6A737D\">        # [17, 51, 68, nil, nil]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">########### arr[1]번 위치에 '34' 삽입\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">insert_at\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 34\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">num_element.\u003C/span>\u003Cspan style=\"color:#B392F0\">downto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(insert_at) \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> |i|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[i] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[i\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[insert_at] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> value\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> +=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#6A737D\"># [17, 34, 51, 68, nil]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">########## 1번 원소 삭제\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">..num_element\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">do\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[i] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[i\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr[num_element] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> nil\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">num_element\u003C/span>\u003Cspan style=\"color:#F97583\"> -=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#6A737D\"># [34, 51, 68, nil, nil]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>배열에 속해있는 원소의 개수 만큼 반복을 해야하기 때문에, 삽입과 삭제의 시간복잡도는 \u003Ccode>O(n)\u003C/code>이 된다. 그렇기 때문에 삽입과 삭제 연산이 잦은 경우 \u003Ccode>O(1)\u003C/code>의 시간으로 해당 연산이 가능한 자료구조를 선택하는 것이 바람직하다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 삽입/삭제가 O(1)으로 가능한 자료구조는 뭐가 있을까\n\u003Cul>\n\u003Cli>연결리스트 (\u003Ca href=\"/note/250513050442\">250513050442\u003C/a>), 해시테이블 (\u003Ca href=\"/note/250514212107\">250514212107\u003C/a>)\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 시간복잡도는 왜 중요한가 -> \u003Ca href=\"/note/250515204930\">250515204930\u003C/a>\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 시간복잡도는 사용하는 언어에 따라 달라질 수 있을까\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 배열을 제외하고 shift 작업이 필요한 경우가 있을까\n\u003Cul>\n\u003Cli>루비에는 \u003Ccode>shift\u003C/code>함수가 있다 -> \u003Ca href=\"/note/250516052830\">250516052830\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> shift 대신 매번 새로운 배열을 할당한다면?\n\u003Cul>\n\u003Cli>성능은 오히려 나빠진다. O(n)은 여전하고, 메모리 사용이 증가함 => 공간복잡도 상승\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250511090805\">250511090805\u003C/a> - 배열이 조회 연산에 강점을 보이는 이유\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250513050442\">250513050442\u003C/a> - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250514212107\">250514212107\u003C/a> - 조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250516052830\">250516052830\u003C/a> - Ruby의 배열에는 shift와 unshift 메소드가 있다\u003C/li>\n\u003C/ul>",{"headings":67,"localImagePaths":70,"remoteImagePaths":71,"frontmatter":72,"imagePaths":73},[68,69],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":58,"folge":59,"uid":55,"pubDate":60},[],"250513050442",{"id":74,"data":76,"body":80,"filePath":81,"digest":82,"rendered":83},{"title":77,"folge":78,"uid":74,"pubDate":79},"연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다","0c","May 13 2025 05:42","연결 리스트의 특징:\n1. 각 데이터는 노드(Node)로 구성이 되어있다\n2. 노드는 메모리상 서로 각기 다른 위치에 존재한다\n3. 포인터를 이용하여 노드들을 연결한다\n\n포인터를 통해 노드를 연결하다 보니, 삽입의 경우는 포인터로 다음 노드를 가리키면 끝이다. \n\n```text\n-----------\n| newNode | \n-----------\n-----------     -----------\n|  nodeA  | --> |  nodeB  |\n-----------     -----------\n```\n\n```cpp\n// nodeA와 nodeB 사이에 newNode 삽입\nint data = 17;\nNode *newNode = new Node(data);\n\nnewNode->next = nodeA->next\nnodeA->next = newNode\n```\n\n```text\n-----------     -----------     -----------\n|  nodeA  | --> | newNode | --> |  nodeB  |\n-----------     -----------     -----------\n```\n\n마찬가지로 삭제의 경우, 삭제가 될 노드와 연결되어 있는 노드(들)의 포인터를 해제하면 된다.\n\n```cpp\n// newNode (두 번째 노드) 삭제\nNode *curr = nodeA\n\nNode *removeNode = curr->next;\ncurr->next = curr->next->next\n\nremoveNode->next = NULL;\ndelete removeNode\n```\n\n```text\n-----------     -----------\n|  nodeA  | --> |  nodeB  |\n-----------     -----------\n```\n\n삽입과 삭제의 경우 좋은 성능을 보이지만, 노드를 사용하는 만큼 메모리 사용량이 증가한다. 또한 삽입할 위치를 탐색하거나, 삭제할 노드가 있는 위치 만큼 이동을 해야하기 때문에 삽입 및 삭제 함수 자체의 시간복잡도는 `O(n)`이 된다. 이는 어디까지나 탐색의 시간이 포함된 것 뿐, 삽입과 삭제는 `O(1)`이다.\n\n## 확장 🌱\n- [ ] 노드를 사용하므로써 메모리 사용량이 증가하지만, 배열보다는 메모리 친화적이지 않을까? 배열과 다르게 낭비되는 자원이 없으니까. -> [250516124750](/note/250516124750)\n  * 정말 없을까? 일단 메모리 누수의 위험도는 배열보다 높음. 포인터를 실수로 날려버리거나 덮어씌우면 그 이후 노드에 접근할 수 없음. -> [250517213935](/note/250517213935)\n- [ ] 노드를 template로 구현하면, 각 노드마다 다른 타입의 데이터를 담을 수 있을까?\n  * `Node\u003Cint> nodeA` -> `Node\u003Cbool> nodeB` -> `Node\u003Cdouble> nodeC`\n- [ ] 포인터가 없는 혹은 사용할 수 없는 언어들의 경우, 연결리스트를 구현하는 방법\n\n\n## 관련 노트 📘\n- [250512043750](/note/250512043750) - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다","src/content/note/250513050442.md","81979b6607ebd10c",{"html":84,"metadata":85},"\u003Cp>연결 리스트의 특징:\u003C/p>\n\u003Col>\n\u003Cli>각 데이터는 노드(Node)로 구성이 되어있다\u003C/li>\n\u003Cli>노드는 메모리상 서로 각기 다른 위치에 존재한다\u003C/li>\n\u003Cli>포인터를 이용하여 노드들을 연결한다\u003C/li>\n\u003C/ol>\n\u003Cp>포인터를 통해 노드를 연결하다 보니, 삽입의 경우는 포인터로 다음 노드를 가리키면 끝이다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>-----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| newNode | \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|  nodeA  | --> |  nodeB  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// nodeA와 nodeB 사이에 newNode 삽입\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">newNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Node\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">newNode->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nodeA->next\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">nodeA->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> newNode\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>-----------     -----------     -----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|  nodeA  | --> | newNode | --> |  nodeB  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------     -----------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>마찬가지로 삭제의 경우, 삭제가 될 노드와 연결되어 있는 노드(들)의 포인터를 해제하면 된다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// newNode (두 번째 노드) 삭제\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">curr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> nodeA\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">removeNode \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> curr->next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">curr->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> curr->next->next\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">removeNode->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">delete\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> removeNode\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>-----------     -----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|  nodeA  | --> |  nodeB  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>삽입과 삭제의 경우 좋은 성능을 보이지만, 노드를 사용하는 만큼 메모리 사용량이 증가한다. 또한 삽입할 위치를 탐색하거나, 삭제할 노드가 있는 위치 만큼 이동을 해야하기 때문에 삽입 및 삭제 함수 자체의 시간복잡도는 \u003Ccode>O(n)\u003C/code>이 된다. 이는 어디까지나 탐색의 시간이 포함된 것 뿐, 삽입과 삭제는 \u003Ccode>O(1)\u003C/code>이다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 노드를 사용하므로써 메모리 사용량이 증가하지만, 배열보다는 메모리 친화적이지 않을까? 배열과 다르게 낭비되는 자원이 없으니까. -> \u003Ca href=\"/note/250516124750\">250516124750\u003C/a>\n\u003Cul>\n\u003Cli>정말 없을까? 일단 메모리 누수의 위험도는 배열보다 높음. 포인터를 실수로 날려버리거나 덮어씌우면 그 이후 노드에 접근할 수 없음. -> \u003Ca href=\"/note/250517213935\">250517213935\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 노드를 template로 구현하면, 각 노드마다 다른 타입의 데이터를 담을 수 있을까?\n\u003Cul>\n\u003Cli>\u003Ccode>Node&#x3C;int> nodeA\u003C/code> -> \u003Ccode>Node&#x3C;bool> nodeB\u003C/code> -> \u003Ccode>Node&#x3C;double> nodeC\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 포인터가 없는 혹은 사용할 수 없는 언어들의 경우, 연결리스트를 구현하는 방법\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250512043750\">250512043750\u003C/a> - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\u003C/li>\n\u003C/ul>",{"headings":86,"localImagePaths":89,"remoteImagePaths":90,"frontmatter":91,"imagePaths":92},[87,88],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":77,"folge":78,"uid":74,"pubDate":79},[],"250513192645",{"id":93,"data":95,"body":99,"filePath":100,"digest":101,"rendered":102},{"title":96,"folge":97,"uid":93,"pubDate":98},"연결리스트의 조회는 순차적으로 이루어진다","0d","May 13 2025 19:47","연결리스트의 경우 노드들이 포인터로 연결되어 있는 구조다. 그러다보니 진입점이 명확한데, 바로 첫 번째 노드(`head`) 가 해당 리스트의 입구 역할을 하게된다.\n\n```text\n  (head)\n-----------     -----------     -----------\n|  nodeA  | --> |  nodeB  | --> |  nodeC  |\n-----------     -----------     -----------\n```\n\n입구는 단 하나이므로, 다른 노드들에 접근하기 위해서는 반드시 `head`부터 시작해서 하나씩 순차적으로 순회를 해야한다. 이는 연결리스트의 조회 혹은 탐색 연산이 `O(n)`의 시간복잡도를 가지게되는 이유다.\n\n이중 연결리스트(Doubly Linked List)를 사용할 경우, 마지막 노드(`tail`) 역시 진입점이 되므로, 역순으로 순회가 가능하다. 하지만 평균 `O(n)`인 것은 동일하다.\n\n## 확장 🌱\n- [x] 연결리스트 중간부터 접근할 수 있는 방법은 없을까?\n  * 노드를 연결할때마다 중간이 되는 위치의 노드를 기억하고 있다면 불가능할 것도 없지. `head`와 `tail`을 사용해서 리스트의 처음과 마지막을 기억하는 것 처럼. 하지만 해당 기능을 구현하므로써 얻는 이득은 딱히 없을 것 같다（コスパが悪い）.\n- [ ] Jagged List가 갑자기 떠올랐다. 어떤 구조였었지?\n- [ ] 연결리스트의 입구가 망가져 버리면 남아있는 노드들은 어떻게 될까? → [250517213935](/note/[250517213935)\n\n## 관련 노트 📘\n- {0a} [250511090805](/note/250511090805) - 배열이 조회 연산에 강점을 보이는 이유","src/content/note/250513192645.md","c317cbfa048526c3",{"html":103,"metadata":104},"\u003Cp>연결리스트의 경우 노드들이 포인터로 연결되어 있는 구조다. 그러다보니 진입점이 명확한데, 바로 첫 번째 노드(\u003Ccode>head\u003C/code>) 가 해당 리스트의 입구 역할을 하게된다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>  (head)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------     -----------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>|  nodeA  | --> |  nodeB  | --> |  nodeC  |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>-----------     -----------     -----------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>입구는 단 하나이므로, 다른 노드들에 접근하기 위해서는 반드시 \u003Ccode>head\u003C/code>부터 시작해서 하나씩 순차적으로 순회를 해야한다. 이는 연결리스트의 조회 혹은 탐색 연산이 \u003Ccode>O(n)\u003C/code>의 시간복잡도를 가지게되는 이유다.\u003C/p>\n\u003Cp>이중 연결리스트(Doubly Linked List)를 사용할 경우, 마지막 노드(\u003Ccode>tail\u003C/code>) 역시 진입점이 되므로, 역순으로 순회가 가능하다. 하지만 평균 \u003Ccode>O(n)\u003C/code>인 것은 동일하다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 연결리스트 중간부터 접근할 수 있는 방법은 없을까?\n\u003Cul>\n\u003Cli>노드를 연결할때마다 중간이 되는 위치의 노드를 기억하고 있다면 불가능할 것도 없지. \u003Ccode>head\u003C/code>와 \u003Ccode>tail\u003C/code>을 사용해서 리스트의 처음과 마지막을 기억하는 것 처럼. 하지만 해당 기능을 구현하므로써 얻는 이득은 딱히 없을 것 같다（コスパが悪い）.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Jagged List가 갑자기 떠올랐다. 어떤 구조였었지?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 연결리스트의 입구가 망가져 버리면 남아있는 노드들은 어떻게 될까? → \u003Ca href=\"/note/%5B250517213935\">250517213935\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>{0a} \u003Ca href=\"/note/250511090805\">250511090805\u003C/a> - 배열이 조회 연산에 강점을 보이는 이유\u003C/li>\n\u003C/ul>",{"headings":105,"localImagePaths":108,"remoteImagePaths":109,"frontmatter":110,"imagePaths":111},[106,107],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":96,"folge":97,"uid":93,"pubDate":98},[],"250514212107",{"id":112,"data":114,"body":118,"filePath":119,"digest":120,"rendered":121},{"title":115,"folge":116,"uid":112,"pubDate":117},"조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자","0e","May 14 2025 21:39","- 조회보다 삽입 및 삭제가 중요할 때 -> 연결 리스트 (Linked List)\n- 삽입 및 삭제보다 조회가 중요할 때 -> 배열 (Array)\n\n조회, 삽입, 삭제 모두에 높은 성능이 요구되는 상황에서는 어떤 자료구조를 써야 할까?  \n이런 경우 해시 테이블(Hash Table)을 고려해볼 수 있다. 해시 테이블은 삽입, 삭제, 그리고 조회 모든 연산에서 평균적으로 `O(1)`의 성능을 보인다.\n\n```rb\nh = Hash.new\nh[:foo] = 17\nh[:bar] = 34\n\nputs h[:foo]  # 17\nputs h[:bar]  # 34\n\nh.delete(:foo)\nputs h[:foo] # nil\n```\n\n장점이 있는 만큼 단점도 있다.\n\n1. 메모리 사용량 증가\n2. 코드 복잡도 증가\n3. Hash 알고리즘에 기반하는 hash key 충돌 가능성\n   * 나쁜 hash 알고리즘 -> 충돌 가능성 ⬆️\n   * 좋은 hash 알고리즘 -> 충돌 가능성 ⬇️\n\n위 단점들은 주로 해시테이블을 직접 구현할 때 문제가 된다.  하지만 대부분의 프로그래밍 언어는 이미 최적화된 해시테이블을 제공하기 때문에, 일반적인 사용 환경에서는 메모리 사용량을 제외하면 큰 단점으로 작용하지 않는다.\n\n## 확장 🌱\n- [ ] 좋은 hash 알고리즘이란?\n- [ ] hash key가 충돌하는 경우의 해결책은?\n  * 해결책에 따라 성능이 달라질까?\n- [ ] 테이블 크기를 키우면 충돌 가능성이 낮아질까? 충돌을 피하기 위해 메모리 사용량을 늘리는 것이 좋은 선택일까?\n\n\n## 관련 노트 📘\n- [250511090805](/note/250511090805) - 배열이 조회 연산에 강점을 보이는 이유\n- [250513050442](/note/250513050442) - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다","src/content/note/250514212107.md","76a626f40b4dfb1d",{"html":122,"metadata":123},"\u003Cul>\n\u003Cli>조회보다 삽입 및 삭제가 중요할 때 -> 연결 리스트 (Linked List)\u003C/li>\n\u003Cli>삽입 및 삭제보다 조회가 중요할 때 -> 배열 (Array)\u003C/li>\n\u003C/ul>\n\u003Cp>조회, 삽입, 삭제 모두에 높은 성능이 요구되는 상황에서는 어떤 자료구조를 써야 할까?\u003Cbr>\n이런 경우 해시 테이블(Hash Table)을 고려해볼 수 있다. 해시 테이블은 삽입, 삭제, 그리고 조회 모든 연산에서 평균적으로 \u003Ccode>O(1)\u003C/code>의 성능을 보인다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">h\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Hash\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">h[\u003C/span>\u003Cspan style=\"color:#79B8FF\">:foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 17\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">h[\u003C/span>\u003Cspan style=\"color:#79B8FF\">:bar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 34\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> h[\u003C/span>\u003Cspan style=\"color:#79B8FF\">:foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]  \u003C/span>\u003Cspan style=\"color:#6A737D\"># 17\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> h[\u003C/span>\u003Cspan style=\"color:#79B8FF\">:bar\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]  \u003C/span>\u003Cspan style=\"color:#6A737D\"># 34\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">h.\u003C/span>\u003Cspan style=\"color:#B392F0\">delete\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">:foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> h[\u003C/span>\u003Cspan style=\"color:#79B8FF\">:foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#6A737D\"># nil\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>장점이 있는 만큼 단점도 있다.\u003C/p>\n\u003Col>\n\u003Cli>메모리 사용량 증가\u003C/li>\n\u003Cli>코드 복잡도 증가\u003C/li>\n\u003Cli>Hash 알고리즘에 기반하는 hash key 충돌 가능성\n\u003Cul>\n\u003Cli>나쁜 hash 알고리즘 -> 충돌 가능성 ⬆️\u003C/li>\n\u003Cli>좋은 hash 알고리즘 -> 충돌 가능성 ⬇️\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>위 단점들은 주로 해시테이블을 직접 구현할 때 문제가 된다.  하지만 대부분의 프로그래밍 언어는 이미 최적화된 해시테이블을 제공하기 때문에, 일반적인 사용 환경에서는 메모리 사용량을 제외하면 큰 단점으로 작용하지 않는다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 좋은 hash 알고리즘이란?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> hash key가 충돌하는 경우의 해결책은?\n\u003Cul>\n\u003Cli>해결책에 따라 성능이 달라질까?\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 테이블 크기를 키우면 충돌 가능성이 낮아질까? 충돌을 피하기 위해 메모리 사용량을 늘리는 것이 좋은 선택일까?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250511090805\">250511090805\u003C/a> - 배열이 조회 연산에 강점을 보이는 이유\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250513050442\">250513050442\u003C/a> - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\u003C/li>\n\u003C/ul>",{"headings":124,"localImagePaths":127,"remoteImagePaths":128,"frontmatter":129,"imagePaths":130},[125,126],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":115,"folge":116,"uid":112,"pubDate":117},[],"250515051958",{"id":131,"data":133,"body":137,"filePath":138,"digest":139,"rendered":140},{"title":134,"folge":135,"uid":131,"pubDate":136},"상황에 따라 사용하기 좋은 프로그래밍 언어도 있을까?","0f","May 15 2025 5:59","[상황에 따라 사용하는 자료구조가 달라지듯이](/note/240610164501), 사용하는 언어 자체가 달라지는 경우 역시 있다.\n\n플랫폼 제약에 따른 언어 선택:\n- iOS -> Swift\n- Android -> Kotlin, C#\n- iOS & Android -> React Native, Electron, Flutter\n\n도메인(분야)에 따른 언어 선택:\n- Web -> JavaScript, Rails (Ruby), DJango (Python)\n- Game -> C++, C#\n\n문제 해결에 필요한 기능이 내장되어 있는가에 따라 언어의 선택이 바뀔 수도 있다. 예를 들어 Big integer가 필요한 경우, C/C++에는 해당 기능이 없어서 직접 구현해야 한다. 하지만 Ruby, Python, JavaScript, 등등의 언어에서는 이미 해당 기능이 구현되어 있어 바로 사용이 가능하다.\n\n자료구조 역시 비슷한 경우인데, C의 경우는 웬만한 자료구조는 전부 직접 구현해야 한다. 하지만 C++에는 `vector`, `map`, `set`, `priority_queue`, 등의 자료구조가 STL로 제공이 되고 있고, JavaScript, Java, Ruby, Python, 등의 고수준 언어에도 대부분의 자료구조가 내장되어 있다.\n\n그 외에도 하드웨어나 커널 관련이라면 C언어, 메모리 관리를 직접 해야 한다면 C/C++, 통계 관련으로 많이 사용한다면 Python, R, Jupyter Notebook, 등 수많은 이유가 있을 수 있다.\n\n## 확장 🌱\n- [ ] 프로그래밍 언어가 아닌, 사람의 언어의 경우는 어떨까?\n- [ ] C언어는 왜 자료구조를 제공하지 않을까?\n- [ ] STL이 제공하는 자료구조들은 최적화 되어 있을까?\n- [ ] 내장되어 있는 기능을 잘 쓰면 되지 굳이 자료구조의 내부 동작 원리를 알아야 할까?\n\n## 관련 노트 📘\n- [240610164501](/note/240610164501) - 모든 상황에 완벽한 성능을 보장하는 자료구조는 없다","src/content/note/250515051958.md","38ac786c467708a2",{"html":141,"metadata":142},"\u003Cp>\u003Ca href=\"/note/240610164501\">상황에 따라 사용하는 자료구조가 달라지듯이\u003C/a>, 사용하는 언어 자체가 달라지는 경우 역시 있다.\u003C/p>\n\u003Cp>플랫폼 제약에 따른 언어 선택:\u003C/p>\n\u003Cul>\n\u003Cli>iOS -> Swift\u003C/li>\n\u003Cli>Android -> Kotlin, C#\u003C/li>\n\u003Cli>iOS &#x26; Android -> React Native, Electron, Flutter\u003C/li>\n\u003C/ul>\n\u003Cp>도메인(분야)에 따른 언어 선택:\u003C/p>\n\u003Cul>\n\u003Cli>Web -> JavaScript, Rails (Ruby), DJango (Python)\u003C/li>\n\u003Cli>Game -> C++, C#\u003C/li>\n\u003C/ul>\n\u003Cp>문제 해결에 필요한 기능이 내장되어 있는가에 따라 언어의 선택이 바뀔 수도 있다. 예를 들어 Big integer가 필요한 경우, C/C++에는 해당 기능이 없어서 직접 구현해야 한다. 하지만 Ruby, Python, JavaScript, 등등의 언어에서는 이미 해당 기능이 구현되어 있어 바로 사용이 가능하다.\u003C/p>\n\u003Cp>자료구조 역시 비슷한 경우인데, C의 경우는 웬만한 자료구조는 전부 직접 구현해야 한다. 하지만 C++에는 \u003Ccode>vector\u003C/code>, \u003Ccode>map\u003C/code>, \u003Ccode>set\u003C/code>, \u003Ccode>priority_queue\u003C/code>, 등의 자료구조가 STL로 제공이 되고 있고, JavaScript, Java, Ruby, Python, 등의 고수준 언어에도 대부분의 자료구조가 내장되어 있다.\u003C/p>\n\u003Cp>그 외에도 하드웨어나 커널 관련이라면 C언어, 메모리 관리를 직접 해야 한다면 C/C++, 통계 관련으로 많이 사용한다면 Python, R, Jupyter Notebook, 등 수많은 이유가 있을 수 있다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 프로그래밍 언어가 아닌, 사람의 언어의 경우는 어떨까?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> C언어는 왜 자료구조를 제공하지 않을까?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> STL이 제공하는 자료구조들은 최적화 되어 있을까?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 내장되어 있는 기능을 잘 쓰면 되지 굳이 자료구조의 내부 동작 원리를 알아야 할까?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/240610164501\">240610164501\u003C/a> - 모든 상황에 완벽한 성능을 보장하는 자료구조는 없다\u003C/li>\n\u003C/ul>",{"headings":143,"localImagePaths":146,"remoteImagePaths":147,"frontmatter":148,"imagePaths":149},[144,145],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":134,"folge":135,"uid":131,"pubDate":136},[],"250515204930",{"id":150,"data":152,"body":156,"filePath":157,"digest":158,"rendered":159},{"title":153,"folge":154,"uid":150,"pubDate":155},"시간복잡도를 알아야 프로그램의 성능을 예측할 수 있다","1","May 15 2025 21:30","아래는 피보나치 수열을 구하는 재귀함수이다.\n```rb\ndef fibonacci(n)\n\treturn 1 if n == 1\n\treturn 1 if n == 2\n\tfibonacci(n-1) + fibonacci(n-2)\nend\n\nn = gets.chomp.to_i\nputs fibonacci(n)\n```\n\n시간복잡도에 대해 어느정도 알고있다면, 위 코드의 성능이 상당히 나쁘다는 것을 바로 파악할 수 있다. 1초에 약 10억번의 연산을 한다고 가정했을 때, 해당 코드는 `n`의 크기가 대략 `30` 을 넘어서는 순간 1초 이상의 시간이 걸리게 된다. 이유는 해당 코드의 시간복잡도가 `O(2^N)`이기 때문이다.\n\n반면 아래의 코드는 어떨까? 똑같은 피보나치 수열을 구하는 함수이다.\n```rb\ndef fibonacci(n, a, b)\n\treturn b if n == 1\n\n\ttemp = a\n\ta = b\n\tb += temp\n\tfibonacci(n-1, a, b)\nend\n\nn = gets.chomp.to_i\nputs fibonacci(n, 0, 1)\n```\n\n위 코드는 놀랍게도 `n`이 `1000`을 넘어가도 순식간에 답을 도출해낸다.\n```text\nn = 1000\n43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875\n```\n\n이유는 해당 함수의 시간복잡도가 `O(n)`이기 때문. \n\n실제로는 재귀 호출의 스택 한계로 인해 `n`의 값이 커지면 오류가 발생할 수도 있지만, 이론적인 시간복잡도 관점에서는 `O(n)`이므로 `n=10억`이 되어도 실행 시간은 1초 밖에 걸리지 않을 것이다.\n\n이처럼 시간복잡도는 프로그램의 성능을 예측하고 이해하는데 큰 도움이 되는 도구이다.\n\n## 확장 🌱\n- [x] `O(n)`, `O(2^n)`에서 `O`의 의미가 무엇인가?\n  - Big-Oh (최악의 경우를 나타낸다)\n  - 최선의 경우와 평균을 의미하는 Omega, Theta도 있다.\n- [ ] 시간복잡도 외 프로그램의 성능을 예측하는데 쓰이는 것이 있을까?\n- [ ] 공간복잡도의 역할은? 시간복잡도만큼 성능에 크게 기여를 하는가?\n- [x] 재귀함수란?\n  * 자기 자신을 호출하는 함수\n- [ ] 재귀함수의 장점과 단점\n- [ ] 모든 재귀함수는 반복문으로 재구현 될 수 있을까? 그 반대의 경우는?\n\n\n## 관련 노트 📘\n- [250512043750](/note/250512043750) - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\n- [250513050442](/note/250513050442) - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다","src/content/note/250515204930.md","2ab34a63d9b38cb5",{"html":160,"metadata":161},"\u003Cp>아래는 피보나치 수열을 구하는 재귀함수이다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tfibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gets\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">chomp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_i\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>시간복잡도에 대해 어느정도 알고있다면, 위 코드의 성능이 상당히 나쁘다는 것을 바로 파악할 수 있다. 1초에 약 10억번의 연산을 한다고 가정했을 때, 해당 코드는 \u003Ccode>n\u003C/code>의 크기가 대략 \u003Ccode>30\u003C/code> 을 넘어서는 순간 1초 이상의 시간이 걸리게 된다. 이유는 해당 코드의 시간복잡도가 \u003Ccode>O(2^N)\u003C/code>이기 때문이다.\u003C/p>\n\u003Cp>반면 아래의 코드는 어떨까? 똑같은 피보나치 수열을 구하는 함수이다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n, a, b)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> n \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\ttemp\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\ta\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tb\u003C/span>\u003Cspan style=\"color:#F97583\"> +=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> temp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tfibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, a, b)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">n\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gets\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">chomp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_i\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#B392F0\"> fibonacci\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(n, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>위 코드는 놀랍게도 \u003Ccode>n\u003C/code>이 \u003Ccode>1000\u003C/code>을 넘어가도 순식간에 답을 도출해낸다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>n = 1000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이유는 해당 함수의 시간복잡도가 \u003Ccode>O(n)\u003C/code>이기 때문.\u003C/p>\n\u003Cp>실제로는 재귀 호출의 스택 한계로 인해 \u003Ccode>n\u003C/code>의 값이 커지면 오류가 발생할 수도 있지만, 이론적인 시간복잡도 관점에서는 \u003Ccode>O(n)\u003C/code>이므로 \u003Ccode>n=10억\u003C/code>이 되어도 실행 시간은 1초 밖에 걸리지 않을 것이다.\u003C/p>\n\u003Cp>이처럼 시간복잡도는 프로그램의 성능을 예측하고 이해하는데 큰 도움이 되는 도구이다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> \u003Ccode>O(n)\u003C/code>, \u003Ccode>O(2^n)\u003C/code>에서 \u003Ccode>O\u003C/code>의 의미가 무엇인가?\n\u003Cul>\n\u003Cli>Big-Oh (최악의 경우를 나타낸다)\u003C/li>\n\u003Cli>최선의 경우와 평균을 의미하는 Omega, Theta도 있다.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 시간복잡도 외 프로그램의 성능을 예측하는데 쓰이는 것이 있을까?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 공간복잡도의 역할은? 시간복잡도만큼 성능에 크게 기여를 하는가?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" checked disabled> 재귀함수란?\n\u003Cul>\n\u003Cli>자기 자신을 호출하는 함수\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 재귀함수의 장점과 단점\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 모든 재귀함수는 반복문으로 재구현 될 수 있을까? 그 반대의 경우는?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250512043750\">250512043750\u003C/a> - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250513050442\">250513050442\u003C/a> - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\u003C/li>\n\u003C/ul>",{"headings":162,"localImagePaths":165,"remoteImagePaths":166,"frontmatter":167,"imagePaths":168},[163,164],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":153,"folge":154,"uid":150,"pubDate":155},[],"250516052830",{"id":169,"data":171,"body":175,"filePath":176,"digest":177,"rendered":178},{"title":172,"folge":173,"uid":169,"pubDate":174},"Ruby의 배열에는 shift와 unshift 메소드가 있다","0b0","May 16 2025 6:19","Ruby의 Array class를 보면 `shift`와 `unshift` 메소드를 제공한다.\n```rb\narr = [1, 2, 3, 4, 5]\n\narr.shift # 1\narr.shift # 2\n\nprint arr # [3, 4, 5]\nputs\n\narr.unshift 2\narr.unshift 1\n\nprint arr # [1, 2, 3, 4, 5]\nputs\n```\n\n`shift` 메소드는 배열의 첫 번째 원소를 제거하고 해당 값을 반환한다. 그리고 남아있는 원소들은 한 칸씩 앞으로 당겨진다.\n\n> \"Removes the first element of self and returns it (shifting all other elements down by one). Returns nil if the array is empty.\" - [Class: Array \\(Ruby 2.6.7\\)](https://ruby-doc.org/core-2.6.7/Array.html#method-i-shift)\n\n`unshift` 메소드는 `shfit`와 정확히 반대되는 개념으로, 새로운 값을 배열 첫 번째 위치에 삽입한다. 기존에 있던 원소들은 한 칸씩 뒤로 밀려난다.\n\n> \"Prepends objects to the front of self, moving other elements upwards.\" - [Class: Array \\(Ruby 2.6.7\\)](https://ruby-doc.org/core-2.6.7/Array.html#method-i-unshift)\n\n값이 삭제되거나 삽입될 때, 기존에 있던 모든 원소들이 앞으로 당겨지거나 뒤로 밀려나기 때문에 `shftt`와 `unshift` 메소드의 시간복잡도는 `O(n)`이 된다. \n\n일반적으로 [배열에서의 삽입과 삭제가 느린 이유](/note/250512043750) 역시 위와 같은 원리로 동작하기 때문이다. 삽입과 삭제가 배열 마지막 위치에서 일어나는게 아닌 이상, shifting 과정이 필요하게 된다.\n\n## 확장 🌱\n- [ ] 메모리 상에 연속적으로 배치되지만 첫 원소만 포인터로 접근 가능하다면, lookup과 `shift`/`unshift` 모두 `O(1)`이 될 수 있다. 이런 구조의 자료구조가 존재할까?\n- [ ] `shift`와 `unshift`로 머리가 top인 Stack을 구현할 수 있다\n  * `push`와 `pop`을 사용하면 꼬리가 top이 된다\n  * `shift`와 `push`를 사용하면 Queue를 구현할 수 있다\n\n\n## 관련 노트 📘\n- [250512043750](/note/250512043750) - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다","src/content/note/250516052830.md","75fd52aa75adedbc",{"html":179,"metadata":180},"\u003Cp>Ruby의 Array class를 보면 \u003Ccode>shift\u003C/code>와 \u003Ccode>unshift\u003C/code> 메소드를 제공한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr.\u003C/span>\u003Cspan style=\"color:#B392F0\">shift\u003C/span>\u003Cspan style=\"color:#6A737D\"> # 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr.\u003C/span>\u003Cspan style=\"color:#B392F0\">shift\u003C/span>\u003Cspan style=\"color:#6A737D\"> # 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#6A737D\"># [3, 4, 5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr.\u003C/span>\u003Cspan style=\"color:#B392F0\">unshift\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">arr.\u003C/span>\u003Cspan style=\"color:#B392F0\">unshift\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">print\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr \u003C/span>\u003Cspan style=\"color:#6A737D\"># [1, 2, 3, 4, 5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>shift\u003C/code> 메소드는 배열의 첫 번째 원소를 제거하고 해당 값을 반환한다. 그리고 남아있는 원소들은 한 칸씩 앞으로 당겨진다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Removes the first element of self and returns it (shifting all other elements down by one). Returns nil if the array is empty.” - \u003Ca href=\"https://ruby-doc.org/core-2.6.7/Array.html#method-i-shift\" rel=\"nofollow\">Class: Array (Ruby 2.6.7)\u003Cspan> ↗\u003C/span>\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ccode>unshift\u003C/code> 메소드는 \u003Ccode>shfit\u003C/code>와 정확히 반대되는 개념으로, 새로운 값을 배열 첫 번째 위치에 삽입한다. 기존에 있던 원소들은 한 칸씩 뒤로 밀려난다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“Prepends objects to the front of self, moving other elements upwards.” - \u003Ca href=\"https://ruby-doc.org/core-2.6.7/Array.html#method-i-unshift\" rel=\"nofollow\">Class: Array (Ruby 2.6.7)\u003Cspan> ↗\u003C/span>\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>값이 삭제되거나 삽입될 때, 기존에 있던 모든 원소들이 앞으로 당겨지거나 뒤로 밀려나기 때문에 \u003Ccode>shftt\u003C/code>와 \u003Ccode>unshift\u003C/code> 메소드의 시간복잡도는 \u003Ccode>O(n)\u003C/code>이 된다.\u003C/p>\n\u003Cp>일반적으로 \u003Ca href=\"/note/250512043750\">배열에서의 삽입과 삭제가 느린 이유\u003C/a> 역시 위와 같은 원리로 동작하기 때문이다. 삽입과 삭제가 배열 마지막 위치에서 일어나는게 아닌 이상, shifting 과정이 필요하게 된다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 메모리 상에 연속적으로 배치되지만 첫 원소만 포인터로 접근 가능하다면, lookup과 \u003Ccode>shift\u003C/code>/\u003Ccode>unshift\u003C/code> 모두 \u003Ccode>O(1)\u003C/code>이 될 수 있다. 이런 구조의 자료구조가 존재할까?\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> \u003Ccode>shift\u003C/code>와 \u003Ccode>unshift\u003C/code>로 머리가 top인 Stack을 구현할 수 있다\n\u003Cul>\n\u003Cli>\u003Ccode>push\u003C/code>와 \u003Ccode>pop\u003C/code>을 사용하면 꼬리가 top이 된다\u003C/li>\n\u003Cli>\u003Ccode>shift\u003C/code>와 \u003Ccode>push\u003C/code>를 사용하면 Queue를 구현할 수 있다\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250512043750\">250512043750\u003C/a> - 배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\u003C/li>\n\u003C/ul>",{"headings":181,"localImagePaths":184,"remoteImagePaths":185,"frontmatter":186,"imagePaths":187},[182,183],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":172,"folge":173,"uid":169,"pubDate":174},[],"250516124750",{"id":188,"data":190,"body":193,"filePath":194,"digest":195,"rendered":196},{"title":191,"folge":192,"uid":169,"pubDate":174},"연결리스트는 배열보다 메모리 사용량이 높다","0c0","연결리스트(Linked List)는 메모리 상 서로 떨어져있는 노드(Node)들이, 포인터로 서로 연결되는 구조를 가지고 있다. 때문에 노드는 기본적으로 자신이 가지는 값(`data`) 외에도 다음 노드의 위치를 가리키는 포인터(`next`) 또한 요소로 가지게 된다.\n\n그러다보니 같은 개수의 데이터를 보유한 배열과 연결리스트를 비교해보면, 연결리스트가 배열보다 메모리를 더 점유하게 된다.\n\n- 32-bit int형 원소 다섯 개를 가지고 있다고 가정 \n  - 배열의 경우 \u003Cu>4 bytes * 5\u003C/u> = **20 bytes**\n  - 단반향 연결리스트의 경우 \u003Cu>(4 bytes * 5) + (포인터 4 or 8 bytes * 5)\u003C/u> = **40~60 bytes**\n\n만약 양뱡향 연결리스트(Doubly Linked List)라면 노드에 포인터가 하나 더 늘어나기 때문에 메모리 사용량은 더 늘어난다.\n\n하지만 연결리스트의 경우는 필요할 때, 필요한 만큼의 노드를 가지기 때문에 실질적으로 낭비하는 공간은 없는 반면, 배열은 연속된 메모리 블럭을 미리 할당하므로, 데이터의 수가 급격히 줄거나 예상보다 적을 경우 메모리가 낭비될 수 있다.\n\n## 확장 🌱\n- [ ] 연결리스트의 경우 포인터 때문에 메모리 사용량이 늘어나게 되는데, 이를 줄일 수 있는 방법이 있을까?\n  * Doubly linked list의 경우는 XOR 연결리스트가 있다\n- [ ] 배열에서 사용하지 않는 공간을 낭비하지 않기위해 처리하는 방법이 따로 있을까\n  * 원소의 개수와 배열의 크기를 비교해서 일정 수치 이하로 내려갈 경우, 배열의 크기를 반으로 줄이는 함수를 구현할 수 있다.\n  * 반대로 배열을 확장해야 할 때는 한 칸씩 공간을 추가하는 것 보다, 배열 크기의 두 배로 늘리면 배열의 생성과 기존 원소의 복사 과정의 연산 횟수를 크게 줄일 수 있다.\n\n\n## 관련 노트 📘\n- [250515204930](/note/250515204930) - 시간복잡도를 알아야 프로그램의 성능을 예측할 수 있다","src/content/note/250516124750.md","5c20391bdaaf6fcc",{"html":197,"metadata":198},"\u003Cp>연결리스트(Linked List)는 메모리 상 서로 떨어져있는 노드(Node)들이, 포인터로 서로 연결되는 구조를 가지고 있다. 때문에 노드는 기본적으로 자신이 가지는 값(\u003Ccode>data\u003C/code>) 외에도 다음 노드의 위치를 가리키는 포인터(\u003Ccode>next\u003C/code>) 또한 요소로 가지게 된다.\u003C/p>\n\u003Cp>그러다보니 같은 개수의 데이터를 보유한 배열과 연결리스트를 비교해보면, 연결리스트가 배열보다 메모리를 더 점유하게 된다.\u003C/p>\n\u003Cul>\n\u003Cli>32-bit int형 원소 다섯 개를 가지고 있다고 가정\n\u003Cul>\n\u003Cli>배열의 경우 \u003Cu>4 bytes * 5\u003C/u> = \u003Cstrong>20 bytes\u003C/strong>\u003C/li>\n\u003Cli>단반향 연결리스트의 경우 \u003Cu>(4 bytes * 5) + (포인터 4 or 8 bytes * 5)\u003C/u> = \u003Cstrong>40~60 bytes\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>만약 양뱡향 연결리스트(Doubly Linked List)라면 노드에 포인터가 하나 더 늘어나기 때문에 메모리 사용량은 더 늘어난다.\u003C/p>\n\u003Cp>하지만 연결리스트의 경우는 필요할 때, 필요한 만큼의 노드를 가지기 때문에 실질적으로 낭비하는 공간은 없는 반면, 배열은 연속된 메모리 블럭을 미리 할당하므로, 데이터의 수가 급격히 줄거나 예상보다 적을 경우 메모리가 낭비될 수 있다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul class=\"contains-task-list\">\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 연결리스트의 경우 포인터 때문에 메모리 사용량이 늘어나게 되는데, 이를 줄일 수 있는 방법이 있을까?\n\u003Cul>\n\u003Cli>Doubly linked list의 경우는 XOR 연결리스트가 있다\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 배열에서 사용하지 않는 공간을 낭비하지 않기위해 처리하는 방법이 따로 있을까\n\u003Cul>\n\u003Cli>원소의 개수와 배열의 크기를 비교해서 일정 수치 이하로 내려갈 경우, 배열의 크기를 반으로 줄이는 함수를 구현할 수 있다.\u003C/li>\n\u003Cli>반대로 배열을 확장해야 할 때는 한 칸씩 공간을 추가하는 것 보다, 배열 크기의 두 배로 늘리면 배열의 생성과 기존 원소의 복사 과정의 연산 횟수를 크게 줄일 수 있다.\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250515204930\">250515204930\u003C/a> - 시간복잡도를 알아야 프로그램의 성능을 예측할 수 있다\u003C/li>\n\u003C/ul>",{"headings":199,"localImagePaths":202,"remoteImagePaths":203,"frontmatter":204,"imagePaths":205},[200,201],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":191,"folge":192,"uid":169,"pubDate":174},[],"250517213935",{"id":206,"data":208,"body":212,"filePath":213,"digest":214,"rendered":215},{"title":209,"folge":210,"uid":206,"pubDate":211},"연결리스트의 머리 관리를 못하면 메모리 누수가 발생한다","0d0","May 17 2025 21:22","연결리스트의 경우 노드들이 포인터로 이루어져 있는 구조이기 때문에 다른 노드들에 접근하기 위해서는 시작점(`head`) 에서부터 순차적으로 순회를 해야한다.\n\n다르게 말하면 시작점이 없어지는 순간, 그 이후에 연결되어 있는 모든 노드들에 접근할 수 있는 방법이 사라지는 것과 같다. \n\n노드는 동적으로 할당이 되기 때문에 연결리스트가 소멸될 때, 노드들을 순차적으로 돌면서 할당한 메모리를 해제해야 한다. 하지만 실수로 `head`를 지워버리거나 다른 값으로 덮어씌어버리면, 기존에 할당되었던 노드들의 메모리를 해제할 수 없게 되고 이는 결국 메모리 누수(memory leak)로 이어진다.\n\n## 확장 🌱\n- n/a\n\n## 관련 노트 📘\n- [250513050442](/note/250513050442) - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\n- [250513192645](/note/250513192645) - 연결리스트의 조회는 순차적으로 이루어진다","src/content/note/250517213935.md","3c898271a2d3ea8c",{"html":216,"metadata":217},"\u003Cp>연결리스트의 경우 노드들이 포인터로 이루어져 있는 구조이기 때문에 다른 노드들에 접근하기 위해서는 시작점(\u003Ccode>head\u003C/code>) 에서부터 순차적으로 순회를 해야한다.\u003C/p>\n\u003Cp>다르게 말하면 시작점이 없어지는 순간, 그 이후에 연결되어 있는 모든 노드들에 접근할 수 있는 방법이 사라지는 것과 같다.\u003C/p>\n\u003Cp>노드는 동적으로 할당이 되기 때문에 연결리스트가 소멸될 때, 노드들을 순차적으로 돌면서 할당한 메모리를 해제해야 한다. 하지만 실수로 \u003Ccode>head\u003C/code>를 지워버리거나 다른 값으로 덮어씌어버리면, 기존에 할당되었던 노드들의 메모리를 해제할 수 없게 되고 이는 결국 메모리 누수(memory leak)로 이어진다.\u003C/p>\n\u003Ch2 id=\"확장\">확장 🌱\u003C/h2>\n\u003Cul>\n\u003Cli>n/a\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"관련-노트\">관련 노트 📘\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/250513050442\">250513050442\u003C/a> - 연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\u003C/li>\n\u003Cli>\u003Ca href=\"/note/250513192645\">250513192645\u003C/a> - 연결리스트의 조회는 순차적으로 이루어진다\u003C/li>\n\u003C/ul>",{"headings":218,"localImagePaths":221,"remoteImagePaths":222,"frontmatter":223,"imagePaths":224},[219,220],{"depth":26,"slug":27,"text":28},{"depth":26,"slug":49,"text":50},[],[],{"title":209,"folge":210,"uid":206,"pubDate":211},[],"writing",["Map",154,227,242,243,258,259,275,276,291,292,320,321,336,337,360,361,376,377,407,408,424,425,440,441,456,457,472,473,494,495,525,526,572,573],{"id":154,"data":228,"body":231,"filePath":232,"digest":233,"rendered":234},{"title":229,"pubDate":230},"미용실","Apr 29 2024 07:00","내가 집을 떠나 일본으로 이주 했을 때, 처음으로 거주하게 되었던 곳은 藤沢 (후지사와)였다.\n이곳에서 FLT (Foreign Language Teacher) 일을 하면서 약 1년간 살았었다.\n\n나는 우리 가족들 중에서도 유독 머리가 빨리 자라는 편이라서 2-3개월마다 머리를 잘라주어야만 했다. 평소라면 이렇게 자주가지는 않을테지만 아무래도 학교에서 일을 하다 보니, 계속해서 깔끔하게 머리를 유지시켜야 했다.\n\n일본 미용실 가격이 비싼편에 속하기 때문에 나는 500-1000엔 하는 저렴한 이발소에서 이발하고는 했다. 아이들을 가르치는 입장으로써 따로 머리를 꾸밀 수 있는 것도 아니고, 평소에 스타일링을 하는 편도 아니라서 그냥 대충 아무 데나 가서 이발하고는 했다.\n\n그러다 어느 날 문득, 일본 미용실에 가보고 싶어졌다. 어디가 좋을까 여기저기 기웃거리다가, 집 근처에 있는 미용실에 들어갔다. 하지만 예약을 해야 한다고 해서 그 자리에서 예약하고, 다음 날 다시 찾아갔다.\n\n---\n\n좋았다. \n\n그냥 좋았다.\n\n내가 일본에서 미용실을 안 갔던 이유는 일본어 문제가 가장 컸다. 한국 미용실에서도 \"전체적으로 짧게 잘라주세요\" 정도에 그치는데, 일본어로 세세하게 어떻게 설명해야 할지 몰랐다. 그래서 그냥 사진을 들고 갔는데, 하나하나 세세하게 물어보면서 내 부족한 일본어를 이해하려고 하는 부분이 너무 감사했고, 그냥 다음에도 계속 여기로 오자는 마음이 들었다.\n\n그렇게 약 3년 동안 (다른 구로 이사간 후에도 여기로 찾아왔다) 이 미용실에서 평범한 머리부터 시작해서, 빨강, 보라, 은색, 파랑, 등등 탈색과 염색을 반복하며 여러 스타일을 시도했고, 나는 소위 말하는 단골이 되었다.\n\n일본을 떠나고 1년 후, 가족들과 함께 한국 여행을 가면서 일본에 들리게 되었다. \n1년 동안 자르지 않고 기르던 머리를, 일본에 도착하자마자 같은 미용실에 들려, 미용사분과 오랜만에 인사를 하고 머리를 잘랐다.\n\n어떻게 보면 나는 머리를 자르기 위해 미국에서 일본까지 날아간 셈이다.\n\n---\n\n지금은 집에서 대충 머리를 알아서 손질하고 있는데, 언젠가 또 일본에 가게되면, 다시 들리지 않을까 싶다.","src/content/writing/1.md","0770e70e4dfeed6d",{"html":235,"metadata":236},"\u003Cp>내가 집을 떠나 일본으로 이주 했을 때, 처음으로 거주하게 되었던 곳은 藤沢 (후지사와)였다.\n이곳에서 FLT (Foreign Language Teacher) 일을 하면서 약 1년간 살았었다.\u003C/p>\n\u003Cp>나는 우리 가족들 중에서도 유독 머리가 빨리 자라는 편이라서 2-3개월마다 머리를 잘라주어야만 했다. 평소라면 이렇게 자주가지는 않을테지만 아무래도 학교에서 일을 하다 보니, 계속해서 깔끔하게 머리를 유지시켜야 했다.\u003C/p>\n\u003Cp>일본 미용실 가격이 비싼편에 속하기 때문에 나는 500-1000엔 하는 저렴한 이발소에서 이발하고는 했다. 아이들을 가르치는 입장으로써 따로 머리를 꾸밀 수 있는 것도 아니고, 평소에 스타일링을 하는 편도 아니라서 그냥 대충 아무 데나 가서 이발하고는 했다.\u003C/p>\n\u003Cp>그러다 어느 날 문득, 일본 미용실에 가보고 싶어졌다. 어디가 좋을까 여기저기 기웃거리다가, 집 근처에 있는 미용실에 들어갔다. 하지만 예약을 해야 한다고 해서 그 자리에서 예약하고, 다음 날 다시 찾아갔다.\u003C/p>\n\u003Chr>\n\u003Cp>좋았다.\u003C/p>\n\u003Cp>그냥 좋았다.\u003C/p>\n\u003Cp>내가 일본에서 미용실을 안 갔던 이유는 일본어 문제가 가장 컸다. 한국 미용실에서도 “전체적으로 짧게 잘라주세요” 정도에 그치는데, 일본어로 세세하게 어떻게 설명해야 할지 몰랐다. 그래서 그냥 사진을 들고 갔는데, 하나하나 세세하게 물어보면서 내 부족한 일본어를 이해하려고 하는 부분이 너무 감사했고, 그냥 다음에도 계속 여기로 오자는 마음이 들었다.\u003C/p>\n\u003Cp>그렇게 약 3년 동안 (다른 구로 이사간 후에도 여기로 찾아왔다) 이 미용실에서 평범한 머리부터 시작해서, 빨강, 보라, 은색, 파랑, 등등 탈색과 염색을 반복하며 여러 스타일을 시도했고, 나는 소위 말하는 단골이 되었다.\u003C/p>\n\u003Cp>일본을 떠나고 1년 후, 가족들과 함께 한국 여행을 가면서 일본에 들리게 되었다.\n1년 동안 자르지 않고 기르던 머리를, 일본에 도착하자마자 같은 미용실에 들려, 미용사분과 오랜만에 인사를 하고 머리를 잘랐다.\u003C/p>\n\u003Cp>어떻게 보면 나는 머리를 자르기 위해 미국에서 일본까지 날아간 셈이다.\u003C/p>\n\u003Chr>\n\u003Cp>지금은 집에서 대충 머리를 알아서 손질하고 있는데, 언젠가 또 일본에 가게되면, 다시 들리지 않을까 싶다.\u003C/p>",{"headings":237,"localImagePaths":238,"remoteImagePaths":239,"frontmatter":240,"imagePaths":241},[],[],[],{"title":229,"pubDate":230},[],"10",{"id":242,"data":244,"body":247,"filePath":248,"digest":249,"rendered":250},{"title":245,"pubDate":246},"일찍 출근해야 하는 이유를 찾았다","Dec 12 2024 12:00","그동안 회사에 일찍 출근하며 남들보다 최소 한 시간 더 일을 했던 것 같다 ([나는 왜 한 시간 일찍 출근을 하는걸까](/writing/8)). 일찍 출근하며 일하면서 번아웃 비스름한 것을 느낌과 동시에 “나는 굳이 여기서 이렇게까지 열심히 하는 이유가 무엇인가?” 하는 질문을 내게 던졌고 그 답을 아직 찾지는 못했다.\n\n평소보다 30~40분 정도 늦게 집을 나섰고, 회사에 도착하니 7시 50분 혹은 8시 5분 정도가 되었다. 이 방식으로 2주 정도 출퇴근을 하며 느낀 건, 운전 시간이 늘어났다는 것뿐이다. 새벽에 일어나 공부를 해보려고 했으나, 씻고 밥 먹고 곧 출근해야 한다는 생각 때문인지 크게 집중하지 못했다.\n\n그러던 어느 트래픽이 심했던 날, 차 안에서 생각했다.\n\n“차라리 회사에 일찍 가서 8시까지 공부를 할까? 운전 덜 하고 좋을 것 같은데….”그다음 날, 예전 일찍 출근하던 대로 일찍 집을 나섰고, 회사에, 6:50분에 도착했다.\n\n아무래도 오피스는 사람들이 출근하기도 하고 인사도 하고 해야 하니, 사람이 없는 랩으로 회사 노트북과 노트를 들고 가서 공부를 시작했다.\n\n사내 내부망을 쓰기 때문에 간혹 접근이 안 되는 사이트가 있어서 괜찮을까 생각했으나, 다행히 나한테 필요한 사이트는 접근할 수 있었다.\n\n조용했고, 집중이 아주 잘 되었다. 7시부터 8시까지 편하게 자기 계발을 할 수 있게 되었다.\n\n“열심히 하는 이유가 무엇인가”에 대한 답은 사실 아직도 잘 모르겠다. 하지만 적어도 지금 나의 상황에 있어서 회사에 일찍 출근해야 하는 (하면 좋은) 이유는 찾았다.\n\n:)","src/content/writing/10.md","8e4f2f1507fec1b0",{"html":251,"metadata":252},"\u003Cp>그동안 회사에 일찍 출근하며 남들보다 최소 한 시간 더 일을 했던 것 같다 (\u003Ca href=\"/writing/8\">나는 왜 한 시간 일찍 출근을 하는걸까\u003C/a>). 일찍 출근하며 일하면서 번아웃 비스름한 것을 느낌과 동시에 “나는 굳이 여기서 이렇게까지 열심히 하는 이유가 무엇인가?” 하는 질문을 내게 던졌고 그 답을 아직 찾지는 못했다.\u003C/p>\n\u003Cp>평소보다 30~40분 정도 늦게 집을 나섰고, 회사에 도착하니 7시 50분 혹은 8시 5분 정도가 되었다. 이 방식으로 2주 정도 출퇴근을 하며 느낀 건, 운전 시간이 늘어났다는 것뿐이다. 새벽에 일어나 공부를 해보려고 했으나, 씻고 밥 먹고 곧 출근해야 한다는 생각 때문인지 크게 집중하지 못했다.\u003C/p>\n\u003Cp>그러던 어느 트래픽이 심했던 날, 차 안에서 생각했다.\u003C/p>\n\u003Cp>“차라리 회사에 일찍 가서 8시까지 공부를 할까? 운전 덜 하고 좋을 것 같은데….”그다음 날, 예전 일찍 출근하던 대로 일찍 집을 나섰고, 회사에, 6:50분에 도착했다.\u003C/p>\n\u003Cp>아무래도 오피스는 사람들이 출근하기도 하고 인사도 하고 해야 하니, 사람이 없는 랩으로 회사 노트북과 노트를 들고 가서 공부를 시작했다.\u003C/p>\n\u003Cp>사내 내부망을 쓰기 때문에 간혹 접근이 안 되는 사이트가 있어서 괜찮을까 생각했으나, 다행히 나한테 필요한 사이트는 접근할 수 있었다.\u003C/p>\n\u003Cp>조용했고, 집중이 아주 잘 되었다. 7시부터 8시까지 편하게 자기 계발을 할 수 있게 되었다.\u003C/p>\n\u003Cp>“열심히 하는 이유가 무엇인가”에 대한 답은 사실 아직도 잘 모르겠다. 하지만 적어도 지금 나의 상황에 있어서 회사에 일찍 출근해야 하는 (하면 좋은) 이유는 찾았다.\u003C/p>\n\u003Cp>:)\u003C/p>",{"headings":253,"localImagePaths":254,"remoteImagePaths":255,"frontmatter":256,"imagePaths":257},[],[],[],{"title":245,"pubDate":246},[],"13",{"id":258,"data":260,"body":264,"filePath":265,"digest":266,"rendered":267},{"title":261,"pubDate":262,"updatedDate":263},"Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다","May 08 2025 05:20","May 17 2025 20:15","내가 입사하기 전, 티켓을 자동으로 올려주는 코드를 이미 누군가 만든 적이 있다고 들었다. 하지만 입사하고 거의 1년이 돼가는 지금까지 해당 프로그램을 사용하는 팀원들을 보지는 못했다. 적어도 서부의 경우는 그렇다. 동부에서는 사용하고 있는 것으로 알고 있다.\n\n티켓을 올리는 게 시간이 걸리는 작업이다 보니 꼭 한번 만들어보고 싶었는데 시간이 좀처럼 없었다. 그러다 최근 한국에 휴일이 겹치면서 업무가 상대적으로 적었는데, 지금이 좋은 기회라고 생각해서 자동화 프로그램을 만들기로 했다.\n\n기존 스크립트를 사용하는 사이드 프로젝트의 경우 Ruby를 사용했을 테지만, 팀원들과 공유를 위해서는 기본적으로 설치되어 있는 Python이 편할 것 같아서, 엄청 오랜만에 Python을 써봤다.\n\n기존 프로그램의 경우, 내가 알기로는 아래와 같이 동작한다:\n1. GUI\n2. multithreading - 동시에 여러 티켓 **등재**\n3. headless - 선택 가능\n4. **티켓 작성 및 등재까지 자동화**\n\n내가 만든 프로그램의 경우는 아래와 같이 동작한다:\n1. TUI\n2. single-threaded - 티켓 하나씩 순차적으로 **작성**\n3. not headless - 무조건\n4. **티켓 작성까지만 자동화**. 등재는 하지 않음.\n\n\n우선 등재까지 하지 않은 이유는, 중복 티켓을 올리지 않기 위해서가 첫 번째이다. Selenium으로 `submit`을 클릭했을 때, 어떠한 이유로 인해 서버에서의 반응 속도가 느리거나 혹은 프로그램의 이슈로 여러 번 클릭이 가해지면, 같은 티켓이 5개씩 등재될 수도 있다.\n\n두 번째로는, 티켓을 올리기 전에 사람이 직접 간단하게나마 내용을 다시 한번 확인하기를 바랐다. 우리는 실수하는 동물이기에 확인 작업은 꼭 필요하다.\n\n해당 프로그램을 만들고 나서 시험해 보기 위해 이슈를 부랴부랴 찾아 나섰다 ε=ε=┌( >_\u003C)┘\n\n잘 동작은 하는데 selenium 문제인지 컴퓨터 사양 문제인지 모르겠으나, 텍스트 기재할 때 시간이 좀 걸린다. 특히 이슈 내용! 해당 부분에서 시간이 좀 걸리다 보니, 티켓 하나 작성하는데 페이지 로딩 시간 포함 대략 2분 정도 걸리는 것 같다. \n\n이슈 내용을 빈 문자열로 놓고 실행하면 80초 정도로 시간이 확 줄어든다. `send_key`로 긴 내용의 텍스트를 보내버려서 그러는 건지, 정말 단순히 복붙하는 메소드는 없는지 찾아봐야겠다.\n\n---\n\n- _2025/05/08 - 17:34_\n\n`send_keys`의 경우 단어나 문장보다는 사실 key stroke를 보내는 용도인 것 같다. 예를 들면 `Ctrl + A`, `DELETE`, 등등….자바스크립트라면 간단하게 해당 필드 선택해서 `innerText`로 대입하면 되는데 이런 거 없나 했더니…! `driver.execute_script`라는게 떡하니 있었다. 심지어 자바스크립트 실행이 가능하다.\n\n기존 `send_keys`를 사용하던 코드를 `driver.execute_script(...)`로 바꿨더니, 티켓 하나 작성하는 데 대략 2분 걸리던 것이 지금은 1분밖에 안 걸린다. 티켓 5개로 시험해 봤더니 5분 20초 정도 걸렸다.\n\n이 정도면 충분히 쓸만한 것 같다.\n\n다만 올릴 이슈가 없어서 실제로 테스트를 해볼 수가 없다 (｡•́︿•̀｡)\n일단 써봐야 팀원들과 공유하든 뭘 하든할 텐데 말이지.\n\n---\n\n- _2025/05/09 - 19:00_\n\n오늘 이슈 3개를 찾아서 자동화 프로그램으로 이슈를 작성해봤다.\n\n일단 이슈가 작성되는 틈에 이슈에 올릴 영상을 편집하려 했는데 성능 문제가 있었다. 싱글 쓰레드임에도 불구하고 작업이 수행하는 동안 다른 일을 하는 행위는 자제해야 할 것 같다.\n\n중간중간 텍스트 삽입이 안된 경우가 있었다. 이거는 이슈 3개 전부 동일하게 발생한 것으로 보아 내 코드의 문제인 것 같다.\n\n대충 위 두 개를 제외하면 되게 편했다! 무엇보다 이슈를 잡았을 때, 바로바로 이슈 제목이나 description을 미리미리 작성해둘수도 있어서 관리하기 편했다.\n\n---\n\n- _2025/05/12 - 21:20_\n\n같은 플랫폼에서 일하는 팀원(사수)에게 프로젝트를 공유했고, 팀원이 사용하면서 이슈가 발생했다! 이슈 정보를 적는 부분 중 딱 한 부분에서, 값을 잘못 적으면 이슈가 발생했다. 해당 부분은 ternary로 코드를 리팩토링하여, 값이 존재하지 않거나 잘못된 경우 `NULL`을 저장해서 selenium이 해당 부분에서는 아무런 동작을 하지 않도록 변경했다.\n\n위 부분을 고치면서 _'어느 부분에서 이슈가 발생했는지 알면 편하지 않을까?'_  와 같은 생각을 해서 `logging`을 추가했다. \n\n```py\nimport logging\n\nlogging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s'\n\nlogging.info('...')\nlogging.error('...')\nlogging.critical('...')\n```\n\n그리고 기존에 사용했던 `implicitly_wait()`을  `WebDriverWait()`으로 변경했다.\n\n```python\nWebDriverWait(..).until(expected_conditions.presence_of_element_located((By.ID, '')))\n```\n\n마지막으로 selenium을 실행하기 전에 사용할 계정을 미리 준비하기 때문에 무조건 로그인에 성공할거라고 가정하고 코드를 구현했었는데, 생각보다 실패할 케이스가 많다는 것을 느꼈다. 계정정보 입력을 깜빡하는 경우도 있고, 오타가 발생하는 경우도 있었다. 그래서 성공/실패에 여부를 함수에서 반환하도록 변경했다. 약간 API 느낌나게 구성해봤다.\n\n```python\ntry:\n\tdriver.find_element(By.ID, '대충_로그인_에러_필드')\nexcept NoSuchElementException:\n\treturn {'status': 200, 'data': 'Success'}\n\nreturn {'status': 401, 'data': 'Unauthorized'}\n```\n\n---\n\n- _2025/05/13 - 19:13_\n\n입력한 차종 정보를 이용해서 해당 차종의 고유 코드까지도 선택하도록 코드를 추가했는데 한 가지 이슈가 있었다. `Select`에서 기본적으로 `None`이 선택되어 있다보니, `None`과 해당 차종의 코드 둘 다 선택이 되어 마지막에 submit이 되지 않았다.\n\n찾아보니 선택해제를 위한 메소드가 존재했다.\n\n`driver.find_element(By.ID, \"some-field\").deselect_by_value('#')`\n\n---\n\n- _2025/05/14 - 12:25_\n\n현재 내 프로그램의 구조는 작성하려는 이슈의 개수만큼 `.py` 파일을 만들어서 특정 폴더에 집어넣고 `main.py`를 실행하면 런타임에 해당 파일들 module 형식으로 import해서 사용하는 방식이다.\n\n프로그램을 executable로 한 번 만들어보려고 했는데 module부분에서 이슈가 발생하고 있다. 찾아보니 pyinstaller에서는 런타임에 모듈을 추가할 수 없는 모양이다. `hiddenimport`가 있는 것 같기는 한데 이거는 이미 존재하는 파일이 대상이 아닌가 싶고,, 런타임에 파일을 동적으로 추가하는 방법은 아직 모르겠다.\n\n시간을 투자하면 방법이야 찾을 수 있을 것 같기는 한데, 사실 executable이 그닥 끌리지는 않는다. 그냥 지금 이 상태로 터미널에서 명령어로 실행시키는게 훨씬 빠르기도 하고..\n\n---\n\n- _2025/05/17 - 18:50_\n\n현재 프로그램을 executable로 만드는데 성공! 잘 동작한다.\n\n기존에 `module_import()`를 사용하는 방식은 pyinstaller로 빌드한 프로그램이 런타임에 인식을 하지 못해서 동작하지 않았다. 동적으로 추가된 파일을 추가하는게 정말 불가능할까?\n\n내가 방법을 모르는 것 뿐이었다😅 . 동적으로 추가된 `.py` 파일들을 인식시키기 위해서 아래의 조치를 취했다.\n\n1. pyinstaller에 `--add-data` 옵션을 사용하여 우선 이슈가 저장될 폴더만 포함시켰다\n2. `module_import`가 아닌 `importlib.util.spec_from_file_location`과 `importlib.util.module_from_spec(spec)`을 사용해서 동적으로 모듈을 불러올 수 있다\n\n대충 아래와 같은 방식으로 동작한다.\n```py\ndef load_issue_modules():\n    modules = {}\n    issue_dir = os.path.join(os.path.dirname(__file__), '이슈')\n\n    for file in os.listdir(issue_dir):\n        if file.endswith(\".py\"):\n            module_name = file[:-3]  # 'foo.py' -> 'foo'\n            module_path = os.path.join(issue_dir, file)\n\n            spec = importlib.util.spec_from_file_location(module_name, module_path)\n            if spec is not None:\n                module = importlib.util.module_from_spec(spec)\n                spec.loader.exec_module(module)\n                modules[module_name] = module\n\n    return modules\n```","src/content/writing/13.md","291603606ae8b93d",{"html":268,"metadata":269},"\u003Cp>내가 입사하기 전, 티켓을 자동으로 올려주는 코드를 이미 누군가 만든 적이 있다고 들었다. 하지만 입사하고 거의 1년이 돼가는 지금까지 해당 프로그램을 사용하는 팀원들을 보지는 못했다. 적어도 서부의 경우는 그렇다. 동부에서는 사용하고 있는 것으로 알고 있다.\u003C/p>\n\u003Cp>티켓을 올리는 게 시간이 걸리는 작업이다 보니 꼭 한번 만들어보고 싶었는데 시간이 좀처럼 없었다. 그러다 최근 한국에 휴일이 겹치면서 업무가 상대적으로 적었는데, 지금이 좋은 기회라고 생각해서 자동화 프로그램을 만들기로 했다.\u003C/p>\n\u003Cp>기존 스크립트를 사용하는 사이드 프로젝트의 경우 Ruby를 사용했을 테지만, 팀원들과 공유를 위해서는 기본적으로 설치되어 있는 Python이 편할 것 같아서, 엄청 오랜만에 Python을 써봤다.\u003C/p>\n\u003Cp>기존 프로그램의 경우, 내가 알기로는 아래와 같이 동작한다:\u003C/p>\n\u003Col>\n\u003Cli>GUI\u003C/li>\n\u003Cli>multithreading - 동시에 여러 티켓 \u003Cstrong>등재\u003C/strong>\u003C/li>\n\u003Cli>headless - 선택 가능\u003C/li>\n\u003Cli>\u003Cstrong>티켓 작성 및 등재까지 자동화\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>내가 만든 프로그램의 경우는 아래와 같이 동작한다:\u003C/p>\n\u003Col>\n\u003Cli>TUI\u003C/li>\n\u003Cli>single-threaded - 티켓 하나씩 순차적으로 \u003Cstrong>작성\u003C/strong>\u003C/li>\n\u003Cli>not headless - 무조건\u003C/li>\n\u003Cli>\u003Cstrong>티켓 작성까지만 자동화\u003C/strong>. 등재는 하지 않음.\u003C/li>\n\u003C/ol>\n\u003Cp>우선 등재까지 하지 않은 이유는, 중복 티켓을 올리지 않기 위해서가 첫 번째이다. Selenium으로 \u003Ccode>submit\u003C/code>을 클릭했을 때, 어떠한 이유로 인해 서버에서의 반응 속도가 느리거나 혹은 프로그램의 이슈로 여러 번 클릭이 가해지면, 같은 티켓이 5개씩 등재될 수도 있다.\u003C/p>\n\u003Cp>두 번째로는, 티켓을 올리기 전에 사람이 직접 간단하게나마 내용을 다시 한번 확인하기를 바랐다. 우리는 실수하는 동물이기에 확인 작업은 꼭 필요하다.\u003C/p>\n\u003Cp>해당 프로그램을 만들고 나서 시험해 보기 위해 이슈를 부랴부랴 찾아 나섰다 ε=ε=┌( >_&#x3C;)┘\u003C/p>\n\u003Cp>잘 동작은 하는데 selenium 문제인지 컴퓨터 사양 문제인지 모르겠으나, 텍스트 기재할 때 시간이 좀 걸린다. 특히 이슈 내용! 해당 부분에서 시간이 좀 걸리다 보니, 티켓 하나 작성하는데 페이지 로딩 시간 포함 대략 2분 정도 걸리는 것 같다.\u003C/p>\n\u003Cp>이슈 내용을 빈 문자열로 놓고 실행하면 80초 정도로 시간이 확 줄어든다. \u003Ccode>send_key\u003C/code>로 긴 내용의 텍스트를 보내버려서 그러는 건지, 정말 단순히 복붙하는 메소드는 없는지 찾아봐야겠다.\u003C/p>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/08 - 17:34\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode>send_keys\u003C/code>의 경우 단어나 문장보다는 사실 key stroke를 보내는 용도인 것 같다. 예를 들면 \u003Ccode>Ctrl + A\u003C/code>, \u003Ccode>DELETE\u003C/code>, 등등….자바스크립트라면 간단하게 해당 필드 선택해서 \u003Ccode>innerText\u003C/code>로 대입하면 되는데 이런 거 없나 했더니…! \u003Ccode>driver.execute_script\u003C/code>라는게 떡하니 있었다. 심지어 자바스크립트 실행이 가능하다.\u003C/p>\n\u003Cp>기존 \u003Ccode>send_keys\u003C/code>를 사용하던 코드를 \u003Ccode>driver.execute_script(...)\u003C/code>로 바꿨더니, 티켓 하나 작성하는 데 대략 2분 걸리던 것이 지금은 1분밖에 안 걸린다. 티켓 5개로 시험해 봤더니 5분 20초 정도 걸렸다.\u003C/p>\n\u003Cp>이 정도면 충분히 쓸만한 것 같다.\u003C/p>\n\u003Cp>다만 올릴 이슈가 없어서 실제로 테스트를 해볼 수가 없다 (｡•́︿•̀｡)\n일단 써봐야 팀원들과 공유하든 뭘 하든할 텐데 말이지.\u003C/p>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/09 - 19:00\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>오늘 이슈 3개를 찾아서 자동화 프로그램으로 이슈를 작성해봤다.\u003C/p>\n\u003Cp>일단 이슈가 작성되는 틈에 이슈에 올릴 영상을 편집하려 했는데 성능 문제가 있었다. 싱글 쓰레드임에도 불구하고 작업이 수행하는 동안 다른 일을 하는 행위는 자제해야 할 것 같다.\u003C/p>\n\u003Cp>중간중간 텍스트 삽입이 안된 경우가 있었다. 이거는 이슈 3개 전부 동일하게 발생한 것으로 보아 내 코드의 문제인 것 같다.\u003C/p>\n\u003Cp>대충 위 두 개를 제외하면 되게 편했다! 무엇보다 이슈를 잡았을 때, 바로바로 이슈 제목이나 description을 미리미리 작성해둘수도 있어서 관리하기 편했다.\u003C/p>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/12 - 21:20\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>같은 플랫폼에서 일하는 팀원(사수)에게 프로젝트를 공유했고, 팀원이 사용하면서 이슈가 발생했다! 이슈 정보를 적는 부분 중 딱 한 부분에서, 값을 잘못 적으면 이슈가 발생했다. 해당 부분은 ternary로 코드를 리팩토링하여, 값이 존재하지 않거나 잘못된 경우 \u003Ccode>NULL\u003C/code>을 저장해서 selenium이 해당 부분에서는 아무런 동작을 하지 않도록 변경했다.\u003C/p>\n\u003Cp>위 부분을 고치면서 \u003Cem>‘어느 부분에서 이슈가 발생했는지 알면 편하지 않을까?’\u003C/em>  와 같은 생각을 해서 \u003Ccode>logging\u003C/code>을 추가했다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"py\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> logging\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logging.basicConfig(\u003C/span>\u003Cspan style=\"color:#FFAB70\">level\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">logging.\u003C/span>\u003Cspan style=\"color:#79B8FF\">INFO\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">format\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#79B8FF\">%(levelname)s\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> - \u003C/span>\u003Cspan style=\"color:#79B8FF\">%(message)s\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logging.info(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logging.error(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">logging.critical(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>그리고 기존에 사용했던 \u003Ccode>implicitly_wait()\u003C/code>을  \u003Ccode>WebDriverWait()\u003C/code>으로 변경했다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">WebDriverWait(..).until(expected_conditions.presence_of_element_located((By.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ID\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">''\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>마지막으로 selenium을 실행하기 전에 사용할 계정을 미리 준비하기 때문에 무조건 로그인에 성공할거라고 가정하고 코드를 구현했었는데, 생각보다 실패할 케이스가 많다는 것을 느꼈다. 계정정보 입력을 깜빡하는 경우도 있고, 오타가 발생하는 경우도 있었다. 그래서 성공/실패에 여부를 함수에서 반환하도록 변경했다. 약간 API 느낌나게 구성해봤다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">try\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tdriver.find_element(By.\u003C/span>\u003Cspan style=\"color:#79B8FF\">ID\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'대충_로그인_에러_필드'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">except\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> NoSuchElementException:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'status'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">200\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'data'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Success'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'status'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">401\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'data'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Unauthorized'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/13 - 19:13\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>입력한 차종 정보를 이용해서 해당 차종의 고유 코드까지도 선택하도록 코드를 추가했는데 한 가지 이슈가 있었다. \u003Ccode>Select\u003C/code>에서 기본적으로 \u003Ccode>None\u003C/code>이 선택되어 있다보니, \u003Ccode>None\u003C/code>과 해당 차종의 코드 둘 다 선택이 되어 마지막에 submit이 되지 않았다.\u003C/p>\n\u003Cp>찾아보니 선택해제를 위한 메소드가 존재했다.\u003C/p>\n\u003Cp>\u003Ccode>driver.find_element(By.ID, \"some-field\").deselect_by_value('#')\u003C/code>\u003C/p>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/14 - 12:25\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>현재 내 프로그램의 구조는 작성하려는 이슈의 개수만큼 \u003Ccode>.py\u003C/code> 파일을 만들어서 특정 폴더에 집어넣고 \u003Ccode>main.py\u003C/code>를 실행하면 런타임에 해당 파일들 module 형식으로 import해서 사용하는 방식이다.\u003C/p>\n\u003Cp>프로그램을 executable로 한 번 만들어보려고 했는데 module부분에서 이슈가 발생하고 있다. 찾아보니 pyinstaller에서는 런타임에 모듈을 추가할 수 없는 모양이다. \u003Ccode>hiddenimport\u003C/code>가 있는 것 같기는 한데 이거는 이미 존재하는 파일이 대상이 아닌가 싶고,, 런타임에 파일을 동적으로 추가하는 방법은 아직 모르겠다.\u003C/p>\n\u003Cp>시간을 투자하면 방법이야 찾을 수 있을 것 같기는 한데, 사실 executable이 그닥 끌리지는 않는다. 그냥 지금 이 상태로 터미널에서 명령어로 실행시키는게 훨씬 빠르기도 하고..\u003C/p>\n\u003Chr>\n\u003Cul>\n\u003Cli>\u003Cem>2025/05/17 - 18:50\u003C/em>\u003C/li>\n\u003C/ul>\n\u003Cp>현재 프로그램을 executable로 만드는데 성공! 잘 동작한다.\u003C/p>\n\u003Cp>기존에 \u003Ccode>module_import()\u003C/code>를 사용하는 방식은 pyinstaller로 빌드한 프로그램이 런타임에 인식을 하지 못해서 동작하지 않았다. 동적으로 추가된 파일을 추가하는게 정말 불가능할까?\u003C/p>\n\u003Cp>내가 방법을 모르는 것 뿐이었다😅 . 동적으로 추가된 \u003Ccode>.py\u003C/code> 파일들을 인식시키기 위해서 아래의 조치를 취했다.\u003C/p>\n\u003Col>\n\u003Cli>pyinstaller에 \u003Ccode>--add-data\u003C/code> 옵션을 사용하여 우선 이슈가 저장될 폴더만 포함시켰다\u003C/li>\n\u003Cli>\u003Ccode>module_import\u003C/code>가 아닌 \u003Ccode>importlib.util.spec_from_file_location\u003C/code>과 \u003Ccode>importlib.util.module_from_spec(spec)\u003C/code>을 사용해서 동적으로 모듈을 불러올 수 있다\u003C/li>\n\u003C/ol>\n\u003Cp>대충 아래와 같은 방식으로 동작한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"py\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> load_issue_modules\u003C/span>\u003Cspan style=\"color:#E1E4E8\">():\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    modules \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    issue_dir \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os.path.join(os.path.dirname(\u003C/span>\u003Cspan style=\"color:#79B8FF\">__file__\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'이슈'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#FFAB70\"> file\u003C/span>\u003Cspan style=\"color:#F97583\"> in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os.listdir(issue_dir):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#FFAB70\"> file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.endswith(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\".py\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            module_name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#FFAB70\"> file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[:\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]  \u003C/span>\u003Cspan style=\"color:#6A737D\"># 'foo.py' -> 'foo'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            module_path \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> os.path.join(issue_dir, \u003C/span>\u003Cspan style=\"color:#FFAB70\">file\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            spec \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> importlib.util.spec_from_file_location(module_name, module_path)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> spec \u003C/span>\u003Cspan style=\"color:#F97583\">is\u003C/span>\u003Cspan style=\"color:#F97583\"> not\u003C/span>\u003Cspan style=\"color:#79B8FF\"> None\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                module \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> importlib.util.module_from_spec(spec)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                spec.loader.exec_module(module)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                modules[module_name] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> module\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> modules\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":270,"localImagePaths":271,"remoteImagePaths":272,"frontmatter":273,"imagePaths":274},[],[],[],{"title":261,"pubDate":262,"updatedDate":263},[],"2",{"id":275,"data":277,"body":280,"filePath":281,"digest":282,"rendered":283},{"title":278,"pubDate":279},"Chat GPT ruined my confidence in English","May 18 2024 06:30:00","I was born in Korea and immigrated to the States when I was around 10. English is not my first language.\n\nThe grammar was never meant to be my friend. I hated it. I was a bit shy to speak and write because I didn't wanted show that my English was bad.\n\nBut as I grow, I started care less about the grammar itself. I realized that what's important are expressing my idea in my own words, and people don't expect people to speak in perfect grammar and advanced vocabularies. So I started expressing myself with broken English with confidence.\n\nNow, Chat GPT came out. Ever since this demonic tool came out, I started relying on it. Before I post anything in English in my blog or even in SNS, I found myself utilizing Chat GPT to perfect my grammar and even use vocabularies that I normally don't use. \n\nThere's no \"I\" in those sentences. It's not me. I'm back to younger version of me who's afraid of exposing my bad English.\n\nI need to stop relying on the machine, especially when I want to talk about my own experience.","src/content/writing/2.md","3693d01c684b0d4c",{"html":284,"metadata":285},"\u003Cp>I was born in Korea and immigrated to the States when I was around 10. English is not my first language.\u003C/p>\n\u003Cp>The grammar was never meant to be my friend. I hated it. I was a bit shy to speak and write because I didn’t wanted show that my English was bad.\u003C/p>\n\u003Cp>But as I grow, I started care less about the grammar itself. I realized that what’s important are expressing my idea in my own words, and people don’t expect people to speak in perfect grammar and advanced vocabularies. So I started expressing myself with broken English with confidence.\u003C/p>\n\u003Cp>Now, Chat GPT came out. Ever since this demonic tool came out, I started relying on it. Before I post anything in English in my blog or even in SNS, I found myself utilizing Chat GPT to perfect my grammar and even use vocabularies that I normally don’t use.\u003C/p>\n\u003Cp>There’s no “I” in those sentences. It’s not me. I’m back to younger version of me who’s afraid of exposing my bad English.\u003C/p>\n\u003Cp>I need to stop relying on the machine, especially when I want to talk about my own experience.\u003C/p>",{"headings":286,"localImagePaths":287,"remoteImagePaths":288,"frontmatter":289,"imagePaths":290},[],[],[],{"title":278,"pubDate":279},[],"12",{"id":291,"data":293,"body":297,"filePath":298,"digest":299,"rendered":300},{"title":294,"pubDate":295,"updatedDate":296},"나는 지금 어떻게 지내고 있나","April 01 2025 05:30","May 17 2025 09:47","## Blog\n‘정리’는 닫힌 사고, ‘확장’은 열린 사고.\n\n지금까지 내가 [정리한 노트](/note)를 보면 나는 닫힌 사고만을 하고 있었다. 노트의 내용 역시, 어느 순간부터 나를 위해서가 아닌 타인을 위해서 작성하고 있다는 느낌을 받았다. \n\n노트를 쭉 훑어보면서 아래의 과정을 다시 진행하고 있다: \n1. ‘나’의 언어로 정리되었는가\n2. \"왜?\", \"항상 그런가?\", \"이것과 저것은 어떻게 다르지?\" 같은 질문을 남겼는가?\n\n\n## Work\n회사에서 간단한 사이드 프로젝트를 진행했다 ([Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다](/writing/13)). 오랜만에 코딩다운 코딩을 하니 재밌었다.\n\n곧 새로운 변화가 일어날 것 같다. 기대된다.\n\n\n## Life\n\n~~이번 주말에 오랜만에 UCSD에 간다. UCSD 소속 Taiko팀인 [Asayake Taiko](https://asayaketaiko.com/) 콘서트가 있어서 보러간다. 내가 속해있던 팀이니, 후배 들 보러가는 셈이랄까.~~ 새로운 곡들도 많았고 (이미 아는 곡이지만 😛) 기존 곡들을 rearrange했는데 좋은 부분도 있었고 개인적으로 아쉬운 부분도 있었다. \n\n7월 19일에는 [TAIKOPROJECT 25th Anniversary Concert](https://www.musiccenter.org/tickets-free-events/lease-events/taikoproject-25th-anniversary-concert/)가 Walt Diseny Concert Hall에서 열린다. 티켓 세일이 5/10 (어제) 였는데 UCSD갔다와서 바로 예매했다!\n\n아아 그립다 Taiko. 언제 수업을 들을 수 있을까나.\n\n![taiko](/images/now_taiko.gif)\n\n## Notes\n\n\u003Cu>이번 주\u003C/u> 작성한 노트 및 글들 (05/18 ~ 05/24)\n- n/a\n\n\u003Cu>지난 주\u003C/u> 작성한 노트 및 글들 (05/11 ~ 05/17)\n- {0} [모든 상황에 완벽한 성능을 보장하는 자료구조는 없다](/note/240610164501) - updated\n- {0a} [배열이 조회 연산에 강점을 보이는 이유](/note/250511090805)\n- {0b} [배열의 삽입과 삭제에는 O(n)의 시간이 필요하다](/note/250512043750)\n- {0b0} [Ruby의 배열에는 shift와 unshift 메소드가 있다](/note/250516052830)\n- {0c} [연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다](/note/250513050442)\n- {0c0} [연결리스트는 배열보다 메모리 사용량이 높다](/note/250516052830)\n- {0d} [연결리스트의 조회는 순차적으로 이루어진다](/note/250513192645)\n- {0e} [조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자](/note/250514212107)\n- {0f} [상황에 따라 사용하기 좋은 언어도 있을까?](/note/250515051958)\n- {1} [시간복잡도를 알아야 프로그램의 성능을 예측할 수 있다](/note/250515204930)\n- 기존에 있던 {1}~{6}까지의 노트들 전부 아카이브\n- [Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다](/writing/13) - updated","src/content/writing/12.md","24e19b5c96579e5e",{"html":301,"metadata":302},"\u003Ch2 id=\"blog\">Blog\u003C/h2>\n\u003Cp>‘정리’는 닫힌 사고, ‘확장’은 열린 사고.\u003C/p>\n\u003Cp>지금까지 내가 \u003Ca href=\"/note\">정리한 노트\u003C/a>를 보면 나는 닫힌 사고만을 하고 있었다. 노트의 내용 역시, 어느 순간부터 나를 위해서가 아닌 타인을 위해서 작성하고 있다는 느낌을 받았다.\u003C/p>\n\u003Cp>노트를 쭉 훑어보면서 아래의 과정을 다시 진행하고 있다:\u003C/p>\n\u003Col>\n\u003Cli>‘나’의 언어로 정리되었는가\u003C/li>\n\u003Cli>“왜?”, “항상 그런가?”, “이것과 저것은 어떻게 다르지?” 같은 질문을 남겼는가?\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"work\">Work\u003C/h2>\n\u003Cp>회사에서 간단한 사이드 프로젝트를 진행했다 (\u003Ca href=\"/writing/13\">Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다\u003C/a>). 오랜만에 코딩다운 코딩을 하니 재밌었다.\u003C/p>\n\u003Cp>곧 새로운 변화가 일어날 것 같다. 기대된다.\u003C/p>\n\u003Ch2 id=\"life\">Life\u003C/h2>\n\u003Cp>\u003Cdel>이번 주말에 오랜만에 UCSD에 간다. UCSD 소속 Taiko팀인 \u003Ca href=\"https://asayaketaiko.com/\" rel=\"nofollow\">Asayake Taiko\u003Cspan> ↗\u003C/span>\u003C/a> 콘서트가 있어서 보러간다. 내가 속해있던 팀이니, 후배 들 보러가는 셈이랄까.\u003C/del> 새로운 곡들도 많았고 (이미 아는 곡이지만 😛) 기존 곡들을 rearrange했는데 좋은 부분도 있었고 개인적으로 아쉬운 부분도 있었다.\u003C/p>\n\u003Cp>7월 19일에는 \u003Ca href=\"https://www.musiccenter.org/tickets-free-events/lease-events/taikoproject-25th-anniversary-concert/\" rel=\"nofollow\">TAIKOPROJECT 25th Anniversary Concert\u003Cspan> ↗\u003C/span>\u003C/a>가 Walt Diseny Concert Hall에서 열린다. 티켓 세일이 5/10 (어제) 였는데 UCSD갔다와서 바로 예매했다!\u003C/p>\n\u003Cp>아아 그립다 Taiko. 언제 수업을 들을 수 있을까나.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/now_taiko.gif\" alt=\"taiko\">\u003C/p>\n\u003Ch2 id=\"notes\">Notes\u003C/h2>\n\u003Cp>\u003Cu>이번 주\u003C/u> 작성한 노트 및 글들 (05/18 ~ 05/24)\u003C/p>\n\u003Cul>\n\u003Cli>n/a\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cu>지난 주\u003C/u> 작성한 노트 및 글들 (05/11 ~ 05/17)\u003C/p>\n\u003Cul>\n\u003Cli>{0} \u003Ca href=\"/note/240610164501\">모든 상황에 완벽한 성능을 보장하는 자료구조는 없다\u003C/a> - updated\u003C/li>\n\u003Cli>{0a} \u003Ca href=\"/note/250511090805\">배열이 조회 연산에 강점을 보이는 이유\u003C/a>\u003C/li>\n\u003Cli>{0b} \u003Ca href=\"/note/250512043750\">배열의 삽입과 삭제에는 O(n)의 시간이 필요하다\u003C/a>\u003C/li>\n\u003Cli>{0b0} \u003Ca href=\"/note/250516052830\">Ruby의 배열에는 shift와 unshift 메소드가 있다\u003C/a>\u003C/li>\n\u003Cli>{0c} \u003Ca href=\"/note/250513050442\">연결리스트의 경우 O(1)에 삽입 및 삭제가 가능하다\u003C/a>\u003C/li>\n\u003Cli>{0c0} \u003Ca href=\"/note/250516052830\">연결리스트는 배열보다 메모리 사용량이 높다\u003C/a>\u003C/li>\n\u003Cli>{0d} \u003Ca href=\"/note/250513192645\">연결리스트의 조회는 순차적으로 이루어진다\u003C/a>\u003C/li>\n\u003Cli>{0e} \u003Ca href=\"/note/250514212107\">조회, 삽입, 삭제 모든 부분에서 성능이 필요하다면 해시테이블을 고려해보자\u003C/a>\u003C/li>\n\u003Cli>{0f} \u003Ca href=\"/note/250515051958\">상황에 따라 사용하기 좋은 언어도 있을까?\u003C/a>\u003C/li>\n\u003Cli>{1} \u003Ca href=\"/note/250515204930\">시간복잡도를 알아야 프로그램의 성능을 예측할 수 있다\u003C/a>\u003C/li>\n\u003Cli>기존에 있던 {1}~{6}까지의 노트들 전부 아카이브\u003C/li>\n\u003Cli>\u003Ca href=\"/writing/13\">Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다\u003C/a> - updated\u003C/li>\n\u003C/ul>",{"headings":303,"localImagePaths":316,"remoteImagePaths":317,"frontmatter":318,"imagePaths":319},[304,307,310,313],{"depth":26,"slug":305,"text":306},"blog","Blog",{"depth":26,"slug":308,"text":309},"work","Work",{"depth":26,"slug":311,"text":312},"life","Life",{"depth":26,"slug":314,"text":315},"notes","Notes",[],[],{"title":294,"pubDate":295,"updatedDate":296},[],"11",{"id":320,"data":322,"body":325,"filePath":326,"digest":327,"rendered":328},{"title":323,"pubDate":324},"라식","Jan 02 2025 12:50:00","라식 수술을 한 지 3.5년 정도 된 것 같은데, 어제 가족으로부터 재밌는 말을 들었다.\n\n> \"너 라식 했어?\"\n\n음? 😳 \n\n그래서 일본에서 라식 수술을 했던 경험을 적어보고자 한다. 오래되었기에 정확히 기억나지는 않지만, 최대한 기억나는 데로 끄적여보겠다.\n\n---\n\n때는 2021년, 코로나로 한창 떠들썩하던 시기이다.\n나는 초등학교에서 FLT로 일을 하고 있었고, 당연히 안경을 쓰고 있었다.\n\n안경 + 마스크 조합은 경험해 본 사람은 알겠지만 진짜 엄청 불편하다. 렌즈를 쓰기도 했었는데, 이것도 매일 하다 보면 불편하다. 무엇보다 지속해서 돈이 나가는 것도 맘에 들지 않았다.\n\n이와 같은 생활을 하는 와중에, 동료 교사가 라식을 했다는 얘기를 듣고 라식에 관심을 가지기 시작했고, 이것저것 알아보기 시작했다. 길게 휴가를 낼 수 없는 상황에서 라섹보다는 라식에 마음이 갔고, 그중에서 스마일 라식이라는 것이 눈에 띄었다.\n\n일반 라식의 경우 각막 절편(뚜껑)을 생성하지만, 스마일라식은 절편을 생성하지 않고 시력 교정이 가능하게 하는 수술 방법이라고 이해하면 된다. 절편을 생성하지 않기 때문에 치유 속도도 비교적 빠른 편이다.\n\n오래 고민하다가 라식을 해야겠다는 마음을 먹었고, 그중에서 스마일 라식을 해야겠다고 속으로 정했다. 하지만, 일본에는 명칭이 다른 건지 모르겠지만 스마일 라식이라는 수술 방법을 제공하는 곳은 없었다.\n\n결국 내가 선택한 건 アマリス750Ｚレーシック (아마리스 750Z 라식)이다. 수술 방법의 이름이라기보다는 사용하는 기계의 명칭 같기는 하지만, 어쨌든 진행하는 수술의 이름은 위와 같았다.\n\n눈을 검사하기 위해 이른 아침 집을 떠나 병원에 도착했다. 정확히 기억은 안 나는 데 5시간 정도 있었던 것 같다. 그것도 끝이 아니어서 다음 날 다시 방문해야 했다. 모든 검사를 끝마치고 마지막에 의사분이 검사결과지를 보면서 내가 선택한 アマリス750Ｚレーシック 수술을 할 수 있는지 판단한다. 나는 양쪽 눈 다 문제없었기에, 수술 날짜를 잡았다 (사실 검사만 받고 다시 생각해 보려고 했으나, 수술 날짜를 잡아주기에 그냥 해버렸다).\n\n---\n\n수술 당일.\n\n병원에 도착하고 대기하다 보면 이름을 부르는데, 그때 수술실로 안내를 받는다. 바로 수술을 진행하지는 않고, 수술실 앞 의자에 앉아서 대기한다. 대기를 하다 보면 간호사분이 와서 눈에 어떤 약물 (안약 같은..)을 투여하는데 뭐였는지 기억은 안 난다. 동공이 커지게 하는 거였던가…. 어쨌든 약물 투여 후, 이름이 불릴 때까지 눈을 감으면서 대기하라고 한다. 5~10분 정도 기다렸던 것 같다.\n\n이름이 불렸고, 수술실에 들어갔다. 아래와 같은 큰 기계가 있었고, 나는 수술대 위에 몸을 뉘었다.\n\n![img](/images/amaris-750z.webp)\n\n첫 번째로 머리를 고정했고, 그다음 수술 중 눈꺼풀이 감기지 않도록 어느 기구를 오른쪽 눈에 끼우는 것이 느껴졌다.\n그다음 약물인지 단순히 물인지 모르겠지만 눈을 세척하는 듯한 느낌이 들었고, 이어서 \"초록색 불빛을 계속 봐주세요\"라는 말과 함께 수술이 진행됐다.\n\n실제로 초록색이었는지는 모르지만, 눈앞에 보이는 불빛을 계속해서 바라봤다.\n\n어느 순간 타는 냄새가 살짝 나기 시작했고, 이어서 안구에 뭔가 긁는 듯한 (마치 딱딱한 벽을 손톱으로 긁는 것 같은) 느낌이 들기 시작했다. 그리고, 눈앞이 보이지 않았다. 하지만 완전한 어둠은 아니고 하얀 불빛 같은 게 보이기는 했기에 거기에 계속 집중했다.\n몇 초 후, 다시 눈을 물로 세척하는 듯한 느낌이 들었고, 이어서 안 보이던 불빛이 보이기 시작했다. 오른쪽 눈의 수술은 끝났다.\n\n왼쪽 눈도 위와 동일한 과정으로 진행됐다.\n\n수술 시작부터, \"끝났습니다\"라는 말을 듣기까지 걸린 시간은, 체감상 1분이 채 되지 않는 것 같다. 정말 말도 안 되게 빨리 끝났다.\n\n---\n\n수술이 끝난 직후 어느 대기실로 안내를 받았는데, 눈을 뜨고 간호사 뒤를 따라갔었는지, 아니면 눈을 감은 상태에서 안내를 받았는지 기억은 안 난다. 어쨌든 대기실에 도착해서, 15분 정도, 다른 간호사분이 와서 안내할 때까지는 계속 눈을 감고 있어 달라고 했다.\n\n어느 정도의 시간이 지난 후, 간호사분이 와서 눈을 떠도 괜찮다고 해서 눈을 떴다. 시야는 여전히 흐렸지만, 평소 안경을 벗었을 때보다는 훨씬 잘 보였다. 이후 어떤 영상 (눈 관리에 관한 영상이었던 것 같은데...)을 보고 나서 눈에 뿌리는 약을 처방받고, 며칠 후 (정확히 기억은 안 난다),  시력 검사를 위해 다시 와달라는 말과 함께 집에 가도 된다고 해서 병원을 나왔다.\n\n집에 가기 위해 지하철에 도착했을 때 깜짝 놀랐다. 여전히 흐릿하기는 하지만, 눈을 살짝 찌푸리면 노선도를 읽을 수 있었다. 평소에는 불가능했던 일. 어쨌든 그렇게 지하철을 탔고 집에 오는 동안 최대만 눈을 감고 있었다.\n\n집에 도착해서는 핸드폰이며 컴퓨터며 스크린과는 최대한 멀리했고, 저녁 일찍 잠에 들었다.\n\n---\n\n다음 날.\n\n눈을 떴고 신기한 경험을 했다. \n\n천장이 너무 깔끔하게 보였다. 너무 신기해서 발코니에 나가 밖을 바라봤는데, 너무 잘보였다.\n\n며칠 후 병원에 도착해서 시력검사를 했고, 정확히 기억은 안나지만 양쪽 1.5인가 1.8인가 나왔던 것 같다.\n\n2025년 현재에도 시력은 (아마도) 계속 유지되고 있다. 최근에 시력 검사를 한 적이 없어서 정확히는 모르겠지만 크게 나빠진 것 같지는 않다.\n\n\n끝.","src/content/writing/11.md","b76912ea5845e1f5",{"html":329,"metadata":330},"\u003Cp>라식 수술을 한 지 3.5년 정도 된 것 같은데, 어제 가족으로부터 재밌는 말을 들었다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“너 라식 했어?”\u003C/p>\n\u003C/blockquote>\n\u003Cp>음? 😳\u003C/p>\n\u003Cp>그래서 일본에서 라식 수술을 했던 경험을 적어보고자 한다. 오래되었기에 정확히 기억나지는 않지만, 최대한 기억나는 데로 끄적여보겠다.\u003C/p>\n\u003Chr>\n\u003Cp>때는 2021년, 코로나로 한창 떠들썩하던 시기이다.\n나는 초등학교에서 FLT로 일을 하고 있었고, 당연히 안경을 쓰고 있었다.\u003C/p>\n\u003Cp>안경 + 마스크 조합은 경험해 본 사람은 알겠지만 진짜 엄청 불편하다. 렌즈를 쓰기도 했었는데, 이것도 매일 하다 보면 불편하다. 무엇보다 지속해서 돈이 나가는 것도 맘에 들지 않았다.\u003C/p>\n\u003Cp>이와 같은 생활을 하는 와중에, 동료 교사가 라식을 했다는 얘기를 듣고 라식에 관심을 가지기 시작했고, 이것저것 알아보기 시작했다. 길게 휴가를 낼 수 없는 상황에서 라섹보다는 라식에 마음이 갔고, 그중에서 스마일 라식이라는 것이 눈에 띄었다.\u003C/p>\n\u003Cp>일반 라식의 경우 각막 절편(뚜껑)을 생성하지만, 스마일라식은 절편을 생성하지 않고 시력 교정이 가능하게 하는 수술 방법이라고 이해하면 된다. 절편을 생성하지 않기 때문에 치유 속도도 비교적 빠른 편이다.\u003C/p>\n\u003Cp>오래 고민하다가 라식을 해야겠다는 마음을 먹었고, 그중에서 스마일 라식을 해야겠다고 속으로 정했다. 하지만, 일본에는 명칭이 다른 건지 모르겠지만 스마일 라식이라는 수술 방법을 제공하는 곳은 없었다.\u003C/p>\n\u003Cp>결국 내가 선택한 건 アマリス750Ｚレーシック (아마리스 750Z 라식)이다. 수술 방법의 이름이라기보다는 사용하는 기계의 명칭 같기는 하지만, 어쨌든 진행하는 수술의 이름은 위와 같았다.\u003C/p>\n\u003Cp>눈을 검사하기 위해 이른 아침 집을 떠나 병원에 도착했다. 정확히 기억은 안 나는 데 5시간 정도 있었던 것 같다. 그것도 끝이 아니어서 다음 날 다시 방문해야 했다. 모든 검사를 끝마치고 마지막에 의사분이 검사결과지를 보면서 내가 선택한 アマリス750Ｚレーシック 수술을 할 수 있는지 판단한다. 나는 양쪽 눈 다 문제없었기에, 수술 날짜를 잡았다 (사실 검사만 받고 다시 생각해 보려고 했으나, 수술 날짜를 잡아주기에 그냥 해버렸다).\u003C/p>\n\u003Chr>\n\u003Cp>수술 당일.\u003C/p>\n\u003Cp>병원에 도착하고 대기하다 보면 이름을 부르는데, 그때 수술실로 안내를 받는다. 바로 수술을 진행하지는 않고, 수술실 앞 의자에 앉아서 대기한다. 대기를 하다 보면 간호사분이 와서 눈에 어떤 약물 (안약 같은..)을 투여하는데 뭐였는지 기억은 안 난다. 동공이 커지게 하는 거였던가…. 어쨌든 약물 투여 후, 이름이 불릴 때까지 눈을 감으면서 대기하라고 한다. 5~10분 정도 기다렸던 것 같다.\u003C/p>\n\u003Cp>이름이 불렸고, 수술실에 들어갔다. 아래와 같은 큰 기계가 있었고, 나는 수술대 위에 몸을 뉘었다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/amaris-750z.webp\" alt=\"img\">\u003C/p>\n\u003Cp>첫 번째로 머리를 고정했고, 그다음 수술 중 눈꺼풀이 감기지 않도록 어느 기구를 오른쪽 눈에 끼우는 것이 느껴졌다.\n그다음 약물인지 단순히 물인지 모르겠지만 눈을 세척하는 듯한 느낌이 들었고, 이어서 “초록색 불빛을 계속 봐주세요”라는 말과 함께 수술이 진행됐다.\u003C/p>\n\u003Cp>실제로 초록색이었는지는 모르지만, 눈앞에 보이는 불빛을 계속해서 바라봤다.\u003C/p>\n\u003Cp>어느 순간 타는 냄새가 살짝 나기 시작했고, 이어서 안구에 뭔가 긁는 듯한 (마치 딱딱한 벽을 손톱으로 긁는 것 같은) 느낌이 들기 시작했다. 그리고, 눈앞이 보이지 않았다. 하지만 완전한 어둠은 아니고 하얀 불빛 같은 게 보이기는 했기에 거기에 계속 집중했다.\n몇 초 후, 다시 눈을 물로 세척하는 듯한 느낌이 들었고, 이어서 안 보이던 불빛이 보이기 시작했다. 오른쪽 눈의 수술은 끝났다.\u003C/p>\n\u003Cp>왼쪽 눈도 위와 동일한 과정으로 진행됐다.\u003C/p>\n\u003Cp>수술 시작부터, “끝났습니다”라는 말을 듣기까지 걸린 시간은, 체감상 1분이 채 되지 않는 것 같다. 정말 말도 안 되게 빨리 끝났다.\u003C/p>\n\u003Chr>\n\u003Cp>수술이 끝난 직후 어느 대기실로 안내를 받았는데, 눈을 뜨고 간호사 뒤를 따라갔었는지, 아니면 눈을 감은 상태에서 안내를 받았는지 기억은 안 난다. 어쨌든 대기실에 도착해서, 15분 정도, 다른 간호사분이 와서 안내할 때까지는 계속 눈을 감고 있어 달라고 했다.\u003C/p>\n\u003Cp>어느 정도의 시간이 지난 후, 간호사분이 와서 눈을 떠도 괜찮다고 해서 눈을 떴다. 시야는 여전히 흐렸지만, 평소 안경을 벗었을 때보다는 훨씬 잘 보였다. 이후 어떤 영상 (눈 관리에 관한 영상이었던 것 같은데…)을 보고 나서 눈에 뿌리는 약을 처방받고, 며칠 후 (정확히 기억은 안 난다),  시력 검사를 위해 다시 와달라는 말과 함께 집에 가도 된다고 해서 병원을 나왔다.\u003C/p>\n\u003Cp>집에 가기 위해 지하철에 도착했을 때 깜짝 놀랐다. 여전히 흐릿하기는 하지만, 눈을 살짝 찌푸리면 노선도를 읽을 수 있었다. 평소에는 불가능했던 일. 어쨌든 그렇게 지하철을 탔고 집에 오는 동안 최대만 눈을 감고 있었다.\u003C/p>\n\u003Cp>집에 도착해서는 핸드폰이며 컴퓨터며 스크린과는 최대한 멀리했고, 저녁 일찍 잠에 들었다.\u003C/p>\n\u003Chr>\n\u003Cp>다음 날.\u003C/p>\n\u003Cp>눈을 떴고 신기한 경험을 했다.\u003C/p>\n\u003Cp>천장이 너무 깔끔하게 보였다. 너무 신기해서 발코니에 나가 밖을 바라봤는데, 너무 잘보였다.\u003C/p>\n\u003Cp>며칠 후 병원에 도착해서 시력검사를 했고, 정확히 기억은 안나지만 양쪽 1.5인가 1.8인가 나왔던 것 같다.\u003C/p>\n\u003Cp>2025년 현재에도 시력은 (아마도) 계속 유지되고 있다. 최근에 시력 검사를 한 적이 없어서 정확히는 모르겠지만 크게 나빠진 것 같지는 않다.\u003C/p>\n\u003Cp>끝.\u003C/p>",{"headings":331,"localImagePaths":332,"remoteImagePaths":333,"frontmatter":334,"imagePaths":335},[],[],[],{"title":323,"pubDate":324},[],"3",{"id":336,"data":338,"body":341,"filePath":342,"digest":343,"rendered":344},{"title":339,"pubDate":340},"우연히 일본어를 할 줄 알게 되었다","Aug 15 2024 17:32","## 귀가 뜨이다\n\n어렸을 때 우리 집에는 컴퓨터가 딱 한 대 있었는데, 나랑 A가 두 시간씩 번갈아 가면서 사용했다.\n\n나에게 주어진 두 시간을 다 쓰고 나면, 할 게 없어 심심한 나는 옆에 앉아서 A가 컴퓨터로 하는 것을 같이 보고는 했다. 항상 그랬던 것은 아니고 주로 방송이나 예능을 볼 때 옆에 앉았는데, 대부분이 일본 방송이었다. 이때 처음으로 일본 문화와 일본어를 접하게 되었다.\n\n거의 매일 일본어를 들으며 생활하다 보니 자연스럽게 일본이란 나라 그리고 언어에 흥미를 느끼게 되었던 것 같다. 그러면서 때때로 드라마나 애니에서 들었던 단어나 문장들을 의미도 모른 채 따라 말하거나, 히라가나와 가타카나를 찾아보면서 그림 그리듯 따라 써보기도 했다. 이것도 공부라면 공부라고 할 수 있을 것 같다.\n\n이런 비슷한 생활을 고등학생이 되기 전까지 했고 고등학생이 되면서부터는 장르를 가리지 않고 혼자 많이 찾아봤다.\n\n이런 생활을 하면서 당연히 일본어를 할 수 있었던 것은 아니지만, 귀가 뜨여서 일상에서의 대화는 70% 정도 이해할 수 있었다.\n\n\n## 말을 할 수 있게 된 계기\n\n이 상태로 몇 년이 지나, 대학교에 입학했고 4학년이 됐다. 여전히 일본어를 할 줄은 몰랐지만, 웬만한 대화는 전부 이해할 수 있는 상태 였다.\n\n졸업 요건을 충분히 만족했고, 더 이상 듣고 싶은 수업이 없던 때에 [JAPN 10A. 기초 일본어](https://catalog.ucsd.edu/courses/JAPN.html) 수업을 발견했다. 어차피 할 것도 없었고, 재밌어 보였기에 바로 신청했고 수업을 듣게 되었다.\n\n이 수업을 들으면서 타인의 일본어는 이해할 수 있지만 직접 말은 할 수 없는 이유를 알게 되었다. 바로 기본적인 문법을 모르기 때문이었다.\n\n누군가가 나에게 “これ食べてもいいですか?” 라고, 물으면, 수많은 애니, 드라마, 영화, 등등의 매체를 통해 들었던 경험으로 “이거 먹어도 되나요?”라고 알아서 번역되어 내 뇌 속으로 들어온다.\n\n하지만 기본적인 문법을 모르는 나로서는 반대로 “이거 먹어도 되나요?”가 어떤 과정을 거쳐 “これ食べてもいいですか”가 되는지 알 길이 없었고, 그래서 말을 할 수 없었다.\n\n하지만 기초 일본어 수업을 들으면서 기본적인 문장의 구조와 상황에 따라 동사가 어떻게 변형되는지 이해했고, 이해가 되자 머릿속 여기저기 흩어져 있던 일본 단어와 문장들이 서로 연결되기 시작했다. 이때부터 하고 싶은 말은 자연스럽게 일본어로 할 수 있게 되었다. 물론 모르는 단어가 있기도 하지만, 이럴 때는 이미 알고 있는 쉬운 단어들로 설명하면서 대화했다.\n\n## 현재\n\n2024년 현재, 졸업하고 약 4~5년이 지났다. 사실 예전이나 지금이나 공부를 하지 않은 건 여전하기 때문에 대학교 당시와 비교해서 크게 실력이 늘었다고는 하지 못할 것 같다. 하지만 일본에서 일했던 경험 때문인지, 좀 더 자연스럽게 말할 수 있게 되었다.","src/content/writing/3.md","d5a71509b75d23d0",{"html":345,"metadata":346},"\u003Ch2 id=\"귀가-뜨이다\">귀가 뜨이다\u003C/h2>\n\u003Cp>어렸을 때 우리 집에는 컴퓨터가 딱 한 대 있었는데, 나랑 A가 두 시간씩 번갈아 가면서 사용했다.\u003C/p>\n\u003Cp>나에게 주어진 두 시간을 다 쓰고 나면, 할 게 없어 심심한 나는 옆에 앉아서 A가 컴퓨터로 하는 것을 같이 보고는 했다. 항상 그랬던 것은 아니고 주로 방송이나 예능을 볼 때 옆에 앉았는데, 대부분이 일본 방송이었다. 이때 처음으로 일본 문화와 일본어를 접하게 되었다.\u003C/p>\n\u003Cp>거의 매일 일본어를 들으며 생활하다 보니 자연스럽게 일본이란 나라 그리고 언어에 흥미를 느끼게 되었던 것 같다. 그러면서 때때로 드라마나 애니에서 들었던 단어나 문장들을 의미도 모른 채 따라 말하거나, 히라가나와 가타카나를 찾아보면서 그림 그리듯 따라 써보기도 했다. 이것도 공부라면 공부라고 할 수 있을 것 같다.\u003C/p>\n\u003Cp>이런 비슷한 생활을 고등학생이 되기 전까지 했고 고등학생이 되면서부터는 장르를 가리지 않고 혼자 많이 찾아봤다.\u003C/p>\n\u003Cp>이런 생활을 하면서 당연히 일본어를 할 수 있었던 것은 아니지만, 귀가 뜨여서 일상에서의 대화는 70% 정도 이해할 수 있었다.\u003C/p>\n\u003Ch2 id=\"말을-할-수-있게-된-계기\">말을 할 수 있게 된 계기\u003C/h2>\n\u003Cp>이 상태로 몇 년이 지나, 대학교에 입학했고 4학년이 됐다. 여전히 일본어를 할 줄은 몰랐지만, 웬만한 대화는 전부 이해할 수 있는 상태 였다.\u003C/p>\n\u003Cp>졸업 요건을 충분히 만족했고, 더 이상 듣고 싶은 수업이 없던 때에 \u003Ca href=\"https://catalog.ucsd.edu/courses/JAPN.html\" rel=\"nofollow\">JAPN 10A. 기초 일본어\u003Cspan> ↗\u003C/span>\u003C/a> 수업을 발견했다. 어차피 할 것도 없었고, 재밌어 보였기에 바로 신청했고 수업을 듣게 되었다.\u003C/p>\n\u003Cp>이 수업을 들으면서 타인의 일본어는 이해할 수 있지만 직접 말은 할 수 없는 이유를 알게 되었다. 바로 기본적인 문법을 모르기 때문이었다.\u003C/p>\n\u003Cp>누군가가 나에게 “これ食べてもいいですか?” 라고, 물으면, 수많은 애니, 드라마, 영화, 등등의 매체를 통해 들었던 경험으로 “이거 먹어도 되나요?”라고 알아서 번역되어 내 뇌 속으로 들어온다.\u003C/p>\n\u003Cp>하지만 기본적인 문법을 모르는 나로서는 반대로 “이거 먹어도 되나요?”가 어떤 과정을 거쳐 “これ食べてもいいですか”가 되는지 알 길이 없었고, 그래서 말을 할 수 없었다.\u003C/p>\n\u003Cp>하지만 기초 일본어 수업을 들으면서 기본적인 문장의 구조와 상황에 따라 동사가 어떻게 변형되는지 이해했고, 이해가 되자 머릿속 여기저기 흩어져 있던 일본 단어와 문장들이 서로 연결되기 시작했다. 이때부터 하고 싶은 말은 자연스럽게 일본어로 할 수 있게 되었다. 물론 모르는 단어가 있기도 하지만, 이럴 때는 이미 알고 있는 쉬운 단어들로 설명하면서 대화했다.\u003C/p>\n\u003Ch2 id=\"현재\">현재\u003C/h2>\n\u003Cp>2024년 현재, 졸업하고 약 4~5년이 지났다. 사실 예전이나 지금이나 공부를 하지 않은 건 여전하기 때문에 대학교 당시와 비교해서 크게 실력이 늘었다고는 하지 못할 것 같다. 하지만 일본에서 일했던 경험 때문인지, 좀 더 자연스럽게 말할 수 있게 되었다.\u003C/p>",{"headings":347,"localImagePaths":356,"remoteImagePaths":357,"frontmatter":358,"imagePaths":359},[348,351,354],{"depth":26,"slug":349,"text":350},"귀가-뜨이다","귀가 뜨이다",{"depth":26,"slug":352,"text":353},"말을-할-수-있게-된-계기","말을 할 수 있게 된 계기",{"depth":26,"slug":355,"text":355},"현재",[],[],{"title":339,"pubDate":340},[],"6",{"id":360,"data":362,"body":365,"filePath":366,"digest":367,"rendered":368},{"title":363,"pubDate":364},"2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까","Sep 26 2024 18:00:00","회사에 입사한지 대략 2개월이 지났다. 나는 지금 잘하고 있는 걸까?\n\n사수와 함께 다이내믹에 나서면, 꿔다 놓은 병풍처럼 옆에서 하는 게 아무것도 없다. 적어도 나는 그렇게 느끼고 있다. 알고 있는 스펙이 별로 없다 보니 (분명 공부는 하고 있는데 말이지) 뭘 봐야 할지 모르겠고, “어! 이슈”라고 말해도 왜 이슈인지 모르겠다 (물론 사수님이 설명은 해준다. 하지만 말하기 전에는 모른다).\n\n내가 직접 확인하고 이슈인 것 같아서 올린 티켓들은 대부분이 이슈가 아니었다. 물론 이슈가 맞았던 적도 있지만 이슈가 아니라고 답변이 오면 “아 아니구나” 하고 티켓을 닫아 버리는 내가 바보 같기도 하다. 스펙을 정확히 알고 있으면 싸우기라도 할 텐데 모르니 당하는 느낌?\n\n티켓을 올리거나 확인할 때 항상 하는 일이 있다. 나와 비슷한 시기에 입사한 사람의 티켓을 확인하는 것. 올린 티켓의 개수와 티켓의 퀄리티 (단순 이슈인지, A급인지, 등등)을 확인하는 버릇이 생겼다. 물론 단순히 티켓의 개수가 일을 잘하고 못하느냐를 결정짓지 않는다는 것을 알고는 있다. 그럼에도 어쩔 수 없이 자꾸 확인하게 된다. 이 사람은 오늘 어떤 이슈를 찾았을까? 어떻게 적응하고 있을까? 어떻게 배우고 있을까? 이건 어떻게 확인했지? 등등.\n\n나도 잘하고 싶다. 근데 어떻게 잘하지?\n\n2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까?","src/content/writing/6.md","e51ee3c07840defb",{"html":369,"metadata":370},"\u003Cp>회사에 입사한지 대략 2개월이 지났다. 나는 지금 잘하고 있는 걸까?\u003C/p>\n\u003Cp>사수와 함께 다이내믹에 나서면, 꿔다 놓은 병풍처럼 옆에서 하는 게 아무것도 없다. 적어도 나는 그렇게 느끼고 있다. 알고 있는 스펙이 별로 없다 보니 (분명 공부는 하고 있는데 말이지) 뭘 봐야 할지 모르겠고, “어! 이슈”라고 말해도 왜 이슈인지 모르겠다 (물론 사수님이 설명은 해준다. 하지만 말하기 전에는 모른다).\u003C/p>\n\u003Cp>내가 직접 확인하고 이슈인 것 같아서 올린 티켓들은 대부분이 이슈가 아니었다. 물론 이슈가 맞았던 적도 있지만 이슈가 아니라고 답변이 오면 “아 아니구나” 하고 티켓을 닫아 버리는 내가 바보 같기도 하다. 스펙을 정확히 알고 있으면 싸우기라도 할 텐데 모르니 당하는 느낌?\u003C/p>\n\u003Cp>티켓을 올리거나 확인할 때 항상 하는 일이 있다. 나와 비슷한 시기에 입사한 사람의 티켓을 확인하는 것. 올린 티켓의 개수와 티켓의 퀄리티 (단순 이슈인지, A급인지, 등등)을 확인하는 버릇이 생겼다. 물론 단순히 티켓의 개수가 일을 잘하고 못하느냐를 결정짓지 않는다는 것을 알고는 있다. 그럼에도 어쩔 수 없이 자꾸 확인하게 된다. 이 사람은 오늘 어떤 이슈를 찾았을까? 어떻게 적응하고 있을까? 어떻게 배우고 있을까? 이건 어떻게 확인했지? 등등.\u003C/p>\n\u003Cp>나도 잘하고 싶다. 근데 어떻게 잘하지?\u003C/p>\n\u003Cp>2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까?\u003C/p>",{"headings":371,"localImagePaths":372,"remoteImagePaths":373,"frontmatter":374,"imagePaths":375},[],[],[],{"title":363,"pubDate":364},[],"5",{"id":376,"data":378,"body":382,"filePath":383,"digest":384,"rendered":385},{"title":379,"pubDate":380,"updatedDate":381},"모니터에서 가상현실로","Dec 28 2022 14:35","April 28 2025 21:30","**update**\n\n현재는 1920x1080 화면 3대를 가로로 연달아 두고 쓰고있다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img8.gif)\n\n---\n\n2022년 11월. 일본에 거주하고 있을 때였다.\n\n일본에 얼마나 있을지 모르고, 이사도 자주 가고 하다 보니 짐을 최소한으로 유지했다. 하지만 항상 골을 썩이던 짐들이 있었으니, 바로 모니터이다. 개발자로 일을 하다 보면 모니터 한두 개 쯤은 갖고 싶어지는데, 나 역시 그랬고 결국 24인치 모니터와 32인치 모니터를 설치해서 사용하고 있었다.\n\n일본에서 미국으로 귀국하는 과정에서 짐을 정리하는데, 이 두 모니터가 짐이었다. 워낙 부피가 나가는 물건이다 보니 가지고 가자니 귀찮고, 중고로 처분하고 가자니 아깝고. 하지만 돌아가면 또 모니터를 사야 하고…. 어떻게 할지 고민하던 와중에 한  [트윗](https://twitter.com/hmartapp/status/1444891624538996740?s=20)을 보게 되었다.\n\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img1.webp)\n\n가상현실에 구현된 작업 환경. 이 트윗을 보고 내 책상을 보니, 모니터며 잡동사니며 물건이 너무 많다고 느껴졌다.\n\n미니멀함을 추구하지만, 작업환경에서만은 그렇지 못했던 나. 이 트윗을 계기로 작업환경도 미니멀하게 가보자 하는 생각을 하게 됐다.\n\n## 가상현실에서의 코딩 가능할까?\n\n집 앞 동네 구멍가게에서 과자 사 먹듯 쉽게 살 수 있을 정도로 값싼 기기가 아니다 보니 고민을 해봐야 했다. 괜히 돈 주고 샀다가 후회하고 싶지 않았다.\n\n먼저 해당 트윗을 쓴 당사자에게 직접적으로 물어보았다. _“글씨는 잘 보이나요?”_\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img2.webp)\n\n잘 보인다고 한다 ✅\n\n## 눈에 무리가 갈까?\n\n보통 개발을 하면 하루 종일 모니터를 바라보고 있게 된다. 그런데 가상현실에서의 작업환경이라면 VR 기기를 계속 쓰고 있다는 것인데… 눈에 무리가 가지 않을까? 최근에 라식 수술을 받았기 때문에 눈에 대해서는 특히나 더 예민했다.\n\n_“눈이 뻐근하거나 하지는 않나요?”_\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img3.webp)\n\n트윗의 주인도 이 문제를 인지하고 있었고, 평소에 포모도로 테크닉을 사용해서 주기적으로 휴식을 취해주고 있다고 하는데 좋은 방법인 것 같다.\n\n기기의 무게도 있다보니 계속 쓰고 있다보면 불편할테고 또한 중간중간 휴식을 취하는 것이 일하는 데 도움이 된다고 들었던 것 같기도 하다. 애초에 나 또한 50분 주기로 휴식을 취하니 이때 VR 기기를 벗어두면 괜찮을 것 같다.\n\n## 트윗 주인은 아직도 VR을 사용하고 있을까?\n\n고민하고 있던 부분에 대한 해답은 찾았고, 마지막으로 확인해 볼 것이 있었다. 해당 트윗이 올라온 지 약 1년이 지난 지금, 본 트윗의 주인은 아직도 가상현실에서 개발하고 있을까?\n\n곧바로 DM을 보내보았고, 하루 뒤 연락이 왔다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img5.webp)\n\n## VR기기를 구입하다\n\n고심 끝에 “가상현실에서의 개발, 시도해 볼 가치는 있다”라고 결론을 내렸고 곧바로 아마존에서 [Meta Quest 2](https://www.meta.com/jp/en/quest/products/quest-2/)를 구매했다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img6.webp)\n\n가상현실 SW로는 [Immersed VR](https://immersed.com/)을 선택해서 설치했고, 기기와 성공적으로 연결했다. 나에게 알맞은 각도, 위치, 등등 세팅하는 데 시간이 걸렸지만 결국 해냈다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img7.gif)\n\n글씨와 코드를 읽는 데 불편함은 전혀 없었고 오히려 생각보다 너무 잘 보여서 놀랐다. 네트워크 관련해서도 따로 세팅한 것은 없고, 사용하고 있는 포켓 와이파이에 연결했더니 지연 없이 잘 돌아간다. 이럴 줄 알았으면 진작 할 걸 그랬다.\n\n## 주의사항\n\nVR 기기를 한 번도 사용해 본 적이 없다면, 한 번 정도는 경험해 보고 구매하는 것을 추천한다. \n\nVR에서의 경험은 사람마다 천지 차이이고 실제로 어지럼증을 호소하는 사람도 있기 때문에, 주변 아는 사람 혹은 VR 기기 체험이 가능한 곳에 가서 사용해 보고 결정하기를 바란다.","src/content/writing/5.md","2cda46b0a76d02cb",{"html":386,"metadata":387},"\u003Cp>\u003Cstrong>update\u003C/strong>\u003C/p>\n\u003Cp>현재는 1920x1080 화면 3대를 가로로 연달아 두고 쓰고있다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img8.gif\" alt=\"\">\u003C/p>\n\u003Chr>\n\u003Cp>2022년 11월. 일본에 거주하고 있을 때였다.\u003C/p>\n\u003Cp>일본에 얼마나 있을지 모르고, 이사도 자주 가고 하다 보니 짐을 최소한으로 유지했다. 하지만 항상 골을 썩이던 짐들이 있었으니, 바로 모니터이다. 개발자로 일을 하다 보면 모니터 한두 개 쯤은 갖고 싶어지는데, 나 역시 그랬고 결국 24인치 모니터와 32인치 모니터를 설치해서 사용하고 있었다.\u003C/p>\n\u003Cp>일본에서 미국으로 귀국하는 과정에서 짐을 정리하는데, 이 두 모니터가 짐이었다. 워낙 부피가 나가는 물건이다 보니 가지고 가자니 귀찮고, 중고로 처분하고 가자니 아깝고. 하지만 돌아가면 또 모니터를 사야 하고…. 어떻게 할지 고민하던 와중에 한  \u003Ca href=\"https://twitter.com/hmartapp/status/1444891624538996740?s=20\" rel=\"nofollow\">트윗\u003Cspan> ↗\u003C/span>\u003C/a>을 보게 되었다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img1.webp\" alt=\"\">\u003C/p>\n\u003Cp>가상현실에 구현된 작업 환경. 이 트윗을 보고 내 책상을 보니, 모니터며 잡동사니며 물건이 너무 많다고 느껴졌다.\u003C/p>\n\u003Cp>미니멀함을 추구하지만, 작업환경에서만은 그렇지 못했던 나. 이 트윗을 계기로 작업환경도 미니멀하게 가보자 하는 생각을 하게 됐다.\u003C/p>\n\u003Ch2 id=\"가상현실에서의-코딩-가능할까\">가상현실에서의 코딩 가능할까?\u003C/h2>\n\u003Cp>집 앞 동네 구멍가게에서 과자 사 먹듯 쉽게 살 수 있을 정도로 값싼 기기가 아니다 보니 고민을 해봐야 했다. 괜히 돈 주고 샀다가 후회하고 싶지 않았다.\u003C/p>\n\u003Cp>먼저 해당 트윗을 쓴 당사자에게 직접적으로 물어보았다. \u003Cem>“글씨는 잘 보이나요?”\u003C/em>\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img2.webp\" alt=\"\">\u003C/p>\n\u003Cp>잘 보인다고 한다 ✅\u003C/p>\n\u003Ch2 id=\"눈에-무리가-갈까\">눈에 무리가 갈까?\u003C/h2>\n\u003Cp>보통 개발을 하면 하루 종일 모니터를 바라보고 있게 된다. 그런데 가상현실에서의 작업환경이라면 VR 기기를 계속 쓰고 있다는 것인데… 눈에 무리가 가지 않을까? 최근에 라식 수술을 받았기 때문에 눈에 대해서는 특히나 더 예민했다.\u003C/p>\n\u003Cp>\u003Cem>“눈이 뻐근하거나 하지는 않나요?”\u003C/em>\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img3.webp\" alt=\"\">\u003C/p>\n\u003Cp>트윗의 주인도 이 문제를 인지하고 있었고, 평소에 포모도로 테크닉을 사용해서 주기적으로 휴식을 취해주고 있다고 하는데 좋은 방법인 것 같다.\u003C/p>\n\u003Cp>기기의 무게도 있다보니 계속 쓰고 있다보면 불편할테고 또한 중간중간 휴식을 취하는 것이 일하는 데 도움이 된다고 들었던 것 같기도 하다. 애초에 나 또한 50분 주기로 휴식을 취하니 이때 VR 기기를 벗어두면 괜찮을 것 같다.\u003C/p>\n\u003Ch2 id=\"트윗-주인은-아직도-vr을-사용하고-있을까\">트윗 주인은 아직도 VR을 사용하고 있을까?\u003C/h2>\n\u003Cp>고민하고 있던 부분에 대한 해답은 찾았고, 마지막으로 확인해 볼 것이 있었다. 해당 트윗이 올라온 지 약 1년이 지난 지금, 본 트윗의 주인은 아직도 가상현실에서 개발하고 있을까?\u003C/p>\n\u003Cp>곧바로 DM을 보내보았고, 하루 뒤 연락이 왔다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img5.webp\" alt=\"\">\u003C/p>\n\u003Ch2 id=\"vr기기를-구입하다\">VR기기를 구입하다\u003C/h2>\n\u003Cp>고심 끝에 “가상현실에서의 개발, 시도해 볼 가치는 있다”라고 결론을 내렸고 곧바로 아마존에서 \u003Ca href=\"https://www.meta.com/jp/en/quest/products/quest-2/\" rel=\"nofollow\">Meta Quest 2\u003Cspan> ↗\u003C/span>\u003C/a>를 구매했다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img6.webp\" alt=\"\">\u003C/p>\n\u003Cp>가상현실 SW로는 \u003Ca href=\"https://immersed.com/\" rel=\"nofollow\">Immersed VR\u003Cspan> ↗\u003C/span>\u003C/a>을 선택해서 설치했고, 기기와 성공적으로 연결했다. 나에게 알맞은 각도, 위치, 등등 세팅하는 데 시간이 걸렸지만 결국 해냈다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img7.gif\" alt=\"\">\u003C/p>\n\u003Cp>글씨와 코드를 읽는 데 불편함은 전혀 없었고 오히려 생각보다 너무 잘 보여서 놀랐다. 네트워크 관련해서도 따로 세팅한 것은 없고, 사용하고 있는 포켓 와이파이에 연결했더니 지연 없이 잘 돌아간다. 이럴 줄 알았으면 진작 할 걸 그랬다.\u003C/p>\n\u003Ch2 id=\"주의사항\">주의사항\u003C/h2>\n\u003Cp>VR 기기를 한 번도 사용해 본 적이 없다면, 한 번 정도는 경험해 보고 구매하는 것을 추천한다.\u003C/p>\n\u003Cp>VR에서의 경험은 사람마다 천지 차이이고 실제로 어지럼증을 호소하는 사람도 있기 때문에, 주변 아는 사람 혹은 VR 기기 체험이 가능한 곳에 가서 사용해 보고 결정하기를 바란다.\u003C/p>",{"headings":388,"localImagePaths":403,"remoteImagePaths":404,"frontmatter":405,"imagePaths":406},[389,392,395,398,401],{"depth":26,"slug":390,"text":391},"가상현실에서의-코딩-가능할까","가상현실에서의 코딩 가능할까?",{"depth":26,"slug":393,"text":394},"눈에-무리가-갈까","눈에 무리가 갈까?",{"depth":26,"slug":396,"text":397},"트윗-주인은-아직도-vr을-사용하고-있을까","트윗 주인은 아직도 VR을 사용하고 있을까?",{"depth":26,"slug":399,"text":400},"vr기기를-구입하다","VR기기를 구입하다",{"depth":26,"slug":402,"text":402},"주의사항",[],[],{"title":379,"pubDate":380,"updatedDate":381},[],"4",{"id":407,"data":409,"body":413,"filePath":414,"digest":415,"rendered":416},{"title":410,"pubDate":411,"updatedDate":412},"내 일에 대한 원동력 찾기","Apr 29 2024 13:56","Aug 19 2024 18:53","\u003Cstyle>\n    img[alt=img] {\n        height: 30rem;\n    }\n\u003C/style>\n\n거의 1년 동안 취업이 되지 않는 상태에서 나 자신을 욕하며 우울감에 빠지기도 하고, 내 능력에 대해 의심하며 하루하루를 보냈다. 계획대로 흘러가지 않는 게 인생이라지만, 단 하루조차 계획대로 보내지 못하는 나 자신을 보면 한숨만 나온다. “오늘은 꼭 계획대로 해야지”라고, 하지만 결국 작심삼일, 아니 작심이일도 못 가서 실패한다. 게으른 걸까? 행동력이 없는 걸까? 시간 분배를 못 하는 걸까?\n\n나보다 훨씬 더 노력하고, 더 열심히 하고, 더 뛰어난 사람들이 너무나도 많다. 그걸 알면서도 나아지는 게 없다.\n\n어딘가에서 레이오프가 있었다는 얘기를 들으면 그 이유를 생각하는 것 보다, 경쟁 상대가 그만큼 더 늘어났다는 생각에 불안감만 늘어갔다. \n\n\n> \"지금도 취업이 안 되는데, 그 좋은 기업에서 나온 사람들이 취업하려고 하면 나는 지금보다 더 안 되겠지\".\n\n이런 와중에 한심하게도 웹툰을 보면서 허송세월하다가, 생각지도 못한 부분에서 지금의 나에게 아주 필요한 말을 듣게 (읽게) 되었다.\n\n```\n허광열: \"아뇨 그 예린 반장님은 평생 이런 감정, 모르고 사셨을 분이라고 생각하고 있었어 가지고\"\n강예린: \"왜요~ 더 많지. 저는 심지어 느낌적인게 아니라 실제로 따라잡히고 못 따라잡았던 경험이 수두룩한걸요...\"\n\n허광열: \"그러면 [...] 어떻게 이겨 내려 하셨어요? 당시에 수 많은 경쟁자들, 나보다 잘난 사람들, 부족함 없는 사람들로부터.\"\n강예린: \"아무래도 동기부여가 가장 중요하겠죠, 스스로 세상 모든 것에 영향을 받지 않기 위해서는. 바깥 상황과 전혀 관계 없을, 내 스스로의 일에 대한 원동력.\"\n\n허광열: \"예린 반장님은... 그런게 있나요? 전혀 영향받지 않을 수 있는 저 자신에 대한 동기부여가?\"\n강예린: \"있죠. 절대 변치 않을 동기부여가. 나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\n```\n\n아무래도 나에게는 동기부여가, 나 자신을 움직이는 원동력이 될 그 무언가가 없었던 것 같다.\n\n> “공부를 해봤자, 프로젝트를 해봤자, 뭐든 해봤자… 나보다 뛰어난 사람들이 많은데…”\n\n하루하루 무슨 일을 하던 그 끝에는 항상 남과의 비교로 끝났다. 그러다 보니 항상 시간을 낭비하는 것처럼 느껴졌고, 계속해서 해야 할 이유를 찾지 못했다.\n\n하지만 **나는 나. 타인은 타인.**  나의 현 위치를 냉정하게 바라보고 판단하되, 나의 미래에 대해 비관은 하지 말자. \"나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\n\n![img](/images/finding_what_drives_you/img1.webp)\n\n[[웹툰 1초 220화](https://comic.naver.com/webtoon/detail?titleId=725586&no=222&week=fri)]","src/content/writing/4.md","1781cf78c2564d0b",{"html":417,"metadata":418},"\u003Cstyle>\n    img[alt=img] {\n        height: 30rem;\n    }\n\u003C/style>\n\u003Cp>거의 1년 동안 취업이 되지 않는 상태에서 나 자신을 욕하며 우울감에 빠지기도 하고, 내 능력에 대해 의심하며 하루하루를 보냈다. 계획대로 흘러가지 않는 게 인생이라지만, 단 하루조차 계획대로 보내지 못하는 나 자신을 보면 한숨만 나온다. “오늘은 꼭 계획대로 해야지”라고, 하지만 결국 작심삼일, 아니 작심이일도 못 가서 실패한다. 게으른 걸까? 행동력이 없는 걸까? 시간 분배를 못 하는 걸까?\u003C/p>\n\u003Cp>나보다 훨씬 더 노력하고, 더 열심히 하고, 더 뛰어난 사람들이 너무나도 많다. 그걸 알면서도 나아지는 게 없다.\u003C/p>\n\u003Cp>어딘가에서 레이오프가 있었다는 얘기를 들으면 그 이유를 생각하는 것 보다, 경쟁 상대가 그만큼 더 늘어났다는 생각에 불안감만 늘어갔다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“지금도 취업이 안 되는데, 그 좋은 기업에서 나온 사람들이 취업하려고 하면 나는 지금보다 더 안 되겠지”.\u003C/p>\n\u003C/blockquote>\n\u003Cp>이런 와중에 한심하게도 웹툰을 보면서 허송세월하다가, 생각지도 못한 부분에서 지금의 나에게 아주 필요한 말을 듣게 (읽게) 되었다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>허광열: \"아뇨 그 예린 반장님은 평생 이런 감정, 모르고 사셨을 분이라고 생각하고 있었어 가지고\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"왜요~ 더 많지. 저는 심지어 느낌적인게 아니라 실제로 따라잡히고 못 따라잡았던 경험이 수두룩한걸요...\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>허광열: \"그러면 [...] 어떻게 이겨 내려 하셨어요? 당시에 수 많은 경쟁자들, 나보다 잘난 사람들, 부족함 없는 사람들로부터.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"아무래도 동기부여가 가장 중요하겠죠, 스스로 세상 모든 것에 영향을 받지 않기 위해서는. 바깥 상황과 전혀 관계 없을, 내 스스로의 일에 대한 원동력.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>허광열: \"예린 반장님은... 그런게 있나요? 전혀 영향받지 않을 수 있는 저 자신에 대한 동기부여가?\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"있죠. 절대 변치 않을 동기부여가. 나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>아무래도 나에게는 동기부여가, 나 자신을 움직이는 원동력이 될 그 무언가가 없었던 것 같다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“공부를 해봤자, 프로젝트를 해봤자, 뭐든 해봤자… 나보다 뛰어난 사람들이 많은데…”\u003C/p>\n\u003C/blockquote>\n\u003Cp>하루하루 무슨 일을 하던 그 끝에는 항상 남과의 비교로 끝났다. 그러다 보니 항상 시간을 낭비하는 것처럼 느껴졌고, 계속해서 해야 할 이유를 찾지 못했다.\u003C/p>\n\u003Cp>하지만 \u003Cstrong>나는 나. 타인은 타인.\u003C/strong>  나의 현 위치를 냉정하게 바라보고 판단하되, 나의 미래에 대해 비관은 하지 말자. “나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.”\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/finding_what_drives_you/img1.webp\" alt=\"img\">\u003C/p>\n\u003Cp>[\u003Ca href=\"https://comic.naver.com/webtoon/detail?titleId=725586&#x26;no=222&#x26;week=fri\" rel=\"nofollow\">웹툰 1초 220화\u003Cspan> ↗\u003C/span>\u003C/a>]\u003C/p>",{"headings":419,"localImagePaths":420,"remoteImagePaths":421,"frontmatter":422,"imagePaths":423},[],[],[],{"title":410,"pubDate":411,"updatedDate":412},[],"7",{"id":424,"data":426,"body":429,"filePath":430,"digest":431,"rendered":432},{"title":427,"pubDate":428},"I migrated from Bear app to Obsidian","Nov 04 2024 12:48","Bear app is a cool note app. I've used it for about a year, I think.\n\nIt has all the features I needed to build my second brain: wiki style linking, in-out linking, automatic updating linked notes, markdown, syntax highlighting for scripts, and more that is super useful.\n\nIt's actually pretty limited compare to other note apps but it was enough.\n\nBut the one thing that I really don't like about the bear app is how it store my notes. It seems like they use their own database and it's really not that comfortable when you want to move your note to other system. If you want back up your note, you have to individually export notes to designated directory. Yes, you can select all and export but this little step creates the friction and it gets annoying. I guess this is why people pay for the bear app which provides the 'Sync' option.\n\nI could've chosen the paying option of course, but at least for now, I don't see the benefit of buying subscription just for the sync, when I can simply migrate to other note app that does support one _or simulate it using the iCloud or github repository_.\n\nAnyway, so I migrated _back_ to Obsidian.","src/content/writing/7.md","fa449bf829291969",{"html":433,"metadata":434},"\u003Cp>Bear app is a cool note app. I’ve used it for about a year, I think.\u003C/p>\n\u003Cp>It has all the features I needed to build my second brain: wiki style linking, in-out linking, automatic updating linked notes, markdown, syntax highlighting for scripts, and more that is super useful.\u003C/p>\n\u003Cp>It’s actually pretty limited compare to other note apps but it was enough.\u003C/p>\n\u003Cp>But the one thing that I really don’t like about the bear app is how it store my notes. It seems like they use their own database and it’s really not that comfortable when you want to move your note to other system. If you want back up your note, you have to individually export notes to designated directory. Yes, you can select all and export but this little step creates the friction and it gets annoying. I guess this is why people pay for the bear app which provides the ‘Sync’ option.\u003C/p>\n\u003Cp>I could’ve chosen the paying option of course, but at least for now, I don’t see the benefit of buying subscription just for the sync, when I can simply migrate to other note app that does support one \u003Cem>or simulate it using the iCloud or github repository\u003C/em>.\u003C/p>\n\u003Cp>Anyway, so I migrated \u003Cem>back\u003C/em> to Obsidian.\u003C/p>",{"headings":435,"localImagePaths":436,"remoteImagePaths":437,"frontmatter":438,"imagePaths":439},[],[],[],{"title":427,"pubDate":428},[],"8",{"id":440,"data":442,"body":445,"filePath":446,"digest":447,"rendered":448},{"title":443,"pubDate":444},"나는 왜 한 시간 빨리 출근을 하는걸까","Nov 21 2024 06:00:00","공식적인 업무 시간은 8:00\\~17:00. 하지만 내가 회사에 도착하는 시각은 6:50\\~7:20 사이.\n\n일찍 출발하게 된 첫 계기는 트래픽이었다. 아침에 트래픽이 너무 심해서 기본으로 한 시간, 심하면 두 시간도 걸린다. 그러다 보니 지각을 하기 싫어 아침 빨리 일어나 6시 15분쯤에 집을 나섰다. 회사에 도착하면 7:30~7:50분 사이가 된다. 하지만 어느 날 부터 조금씩 빨리 집을 나서기 시작하면서 지금은 5:35분쯤 집을 떠나고 있다. 일찍 도착하면 6:40분 정도가 되고 평균적으로는 7시 10분 정도가 된다.\n\n퇴근길도 사실 만만찮게 시간이 걸리기는 하는데 어제는 사고가 났었는지 두 시간가량 걸렸다. 천천히 트래픽에 낑겨 운전하면서 오다가 문득 이런 생각이 들었다.\n\n> \"나는 왜 일찍 출근하는 걸까. 이게 무슨 의미가 있지\"\n\n일에 대한 열정이 식은 것은 아니다. 아직 6개월도 안 됐는데 식을 열정이 뭐가 있을까.\n다만 의미를 모르겠다. 빨리 가서 출근하는 이유. 빨리 가서 준비하는 이유. 아니 준비라고 할 게 있나.\n\n빨리 간다고 일찍 퇴근하는 것도 아니고, 일찍 퇴근해 봐야 16:30인데 이때 트래픽이 없는 것도 아니고, 오히려 늦게 퇴근하는 걸 환호 할 지경이다. 그럼 난 왜 일찍 출근하는 걸까. 다들 8~9시 사이에 알아서 출근하는 분위기인데, 나도 그렇게 해볼까.\n\n누군가 \"_왜 이렇게 일찍 오셨어요_\" 라고 물으면, \"_신입이니 빨리 와서 준비해야죠!_\" 라고 대답했었다.\n나는 뭘 준비해야 한다고 느꼈던 걸까. 업데이트? 시스템 파일 다운로드? 그냥 업무 시간에 다운로드하고 업데이트하면 되는 거 아닌가.\n\n모르겠다.","src/content/writing/8.md","820782555c4bf7d1",{"html":449,"metadata":450},"\u003Cp>공식적인 업무 시간은 8:00~17:00. 하지만 내가 회사에 도착하는 시각은 6:50~7:20 사이.\u003C/p>\n\u003Cp>일찍 출발하게 된 첫 계기는 트래픽이었다. 아침에 트래픽이 너무 심해서 기본으로 한 시간, 심하면 두 시간도 걸린다. 그러다 보니 지각을 하기 싫어 아침 빨리 일어나 6시 15분쯤에 집을 나섰다. 회사에 도착하면 7:30~7:50분 사이가 된다. 하지만 어느 날 부터 조금씩 빨리 집을 나서기 시작하면서 지금은 5:35분쯤 집을 떠나고 있다. 일찍 도착하면 6:40분 정도가 되고 평균적으로는 7시 10분 정도가 된다.\u003C/p>\n\u003Cp>퇴근길도 사실 만만찮게 시간이 걸리기는 하는데 어제는 사고가 났었는지 두 시간가량 걸렸다. 천천히 트래픽에 낑겨 운전하면서 오다가 문득 이런 생각이 들었다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“나는 왜 일찍 출근하는 걸까. 이게 무슨 의미가 있지”\u003C/p>\n\u003C/blockquote>\n\u003Cp>일에 대한 열정이 식은 것은 아니다. 아직 6개월도 안 됐는데 식을 열정이 뭐가 있을까.\n다만 의미를 모르겠다. 빨리 가서 출근하는 이유. 빨리 가서 준비하는 이유. 아니 준비라고 할 게 있나.\u003C/p>\n\u003Cp>빨리 간다고 일찍 퇴근하는 것도 아니고, 일찍 퇴근해 봐야 16:30인데 이때 트래픽이 없는 것도 아니고, 오히려 늦게 퇴근하는 걸 환호 할 지경이다. 그럼 난 왜 일찍 출근하는 걸까. 다들 8~9시 사이에 알아서 출근하는 분위기인데, 나도 그렇게 해볼까.\u003C/p>\n\u003Cp>누군가 “\u003Cem>왜 이렇게 일찍 오셨어요\u003C/em>” 라고 물으면, “\u003Cem>신입이니 빨리 와서 준비해야죠!\u003C/em>” 라고 대답했었다.\n나는 뭘 준비해야 한다고 느꼈던 걸까. 업데이트? 시스템 파일 다운로드? 그냥 업무 시간에 다운로드하고 업데이트하면 되는 거 아닌가.\u003C/p>\n\u003Cp>모르겠다.\u003C/p>",{"headings":451,"localImagePaths":452,"remoteImagePaths":453,"frontmatter":454,"imagePaths":455},[],[],[],{"title":443,"pubDate":444},[],"9",{"id":456,"data":458,"body":461,"filePath":462,"digest":463,"rendered":464},{"title":459,"pubDate":460},"집중력 도둑이 내 손목에 있었구나","Dec 03 2024 12:30","책을 읽다가도 \"_띠링!_\"\n\n공부를 하다가도 \"_팅!_\"\n\n일을 하면서도 \"_카톡!_\"\n\n사실 소리는 항상 꺼놓기 때문에 효과음은 없다. 대신 진동이 내 손목을 통해 메시지를 보낸다.\n\n> \"지금 당장 하던 것을 멈추고 나를 봐!\"\n\n나는 내 집중력을 해치는 기기를 직접 내 손으로, 비싼 돈을 주고 구매한 것이다.\n\n망할 ~~애플~~ 스마트 워치.\n\n하지만 수면 시간 관련해서 기록하는 데는 여전히 유용하게 쓰고 있다. 밤에 잠을 잘 때만 스마트 워치를 착용했다가, 기상하면 충전대에 놓고 그대로 출근한다. 아! 가끔 운동할 때도 착용하기는 한다. 하지만 그 외에 착용하는 일이 아마 더는 없지 않을까….","src/content/writing/9.md","4f9165f72bf38f3e",{"html":465,"metadata":466},"\u003Cp>책을 읽다가도 “\u003Cem>띠링!\u003C/em>”\u003C/p>\n\u003Cp>공부를 하다가도 “\u003Cem>팅!\u003C/em>”\u003C/p>\n\u003Cp>일을 하면서도 “\u003Cem>카톡!\u003C/em>”\u003C/p>\n\u003Cp>사실 소리는 항상 꺼놓기 때문에 효과음은 없다. 대신 진동이 내 손목을 통해 메시지를 보낸다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“지금 당장 하던 것을 멈추고 나를 봐!”\u003C/p>\n\u003C/blockquote>\n\u003Cp>나는 내 집중력을 해치는 기기를 직접 내 손으로, 비싼 돈을 주고 구매한 것이다.\u003C/p>\n\u003Cp>망할 \u003Cdel>애플\u003C/del> 스마트 워치.\u003C/p>\n\u003Cp>하지만 수면 시간 관련해서 기록하는 데는 여전히 유용하게 쓰고 있다. 밤에 잠을 잘 때만 스마트 워치를 착용했다가, 기상하면 충전대에 놓고 그대로 출근한다. 아! 가끔 운동할 때도 착용하기는 한다. 하지만 그 외에 착용하는 일이 아마 더는 없지 않을까….\u003C/p>",{"headings":467,"localImagePaths":468,"remoteImagePaths":469,"frontmatter":470,"imagePaths":471},[],[],[],{"title":459,"pubDate":460},[],"14",{"id":472,"data":474,"body":477,"filePath":478,"digest":479,"rendered":480},{"title":475,"pubDate":476},"Dvorak 자판이 만들어진 이유","Feb 24 2023 10:00","## August Dvorak (오거스트 드보락)\n\nAugust Dvorak은 미네소타 글렌코 출신으로 University of Washington (UW)의 박사였으며, 2차 세계대전 당시 미 해군 잠수함의 장교로 복무한 인물이다.\n\n![](/images/14/august-dvorak.webp)\n\n\nDvorak이 타자와 자판에 흥미를 느끼게 된 계기는 당시 타자기로 타자 수업을 하던 한 교수의 질문에서 비롯된다.\n\n> \"저희 학생들은 왜 4자 이하의 짧은 단어들을 칠 때 매번 실수하는 걸까요?\"\n\n타입스크립트(타자기로 친 문서)에서 흔히 실수하는 단어들을 확인해보니 정말로 _the, to, of, and, is, here, it, that, ..._ 와 같이 짧은 단어들이 주를 이뤘다. Dvorak은 타자 치는 법을 몰랐고 배워본 적도 없다. 하지만 반복되는 오류에 대해 생각하며 연구하기 시작했다.\n\n우선 필기에서 오류를 범하는 주요인으로는 크게 세 가지가 있다는 것을 알게 되었다.\n\n1. 익숙하지 않은 단어 (자주 사용되지 않는 단어)\n2. 철자가 어려운 단어\n3. 연습 부족\n\n하지만 세 가지 이유 모두 타자기의 경우와는 연관이 없었다. 앞에서 말했듯이 타자기에서의 실수는 주로 _the, that, it, here, ..._ 와 같이 익숙하면서도 너무나 간단한 단어들이었기 때문에, 개인의 연습 부족이라고 보기에도 어렵다. 여기서 Dvorak은 사람이 아니라 타자기의 자판이 문제라고 생각하게 된다.\n\n## 비효율적인 자판\n\nDvorak은 타자기의 자판을 보면서 의문을 품기 시작했다. 자주 사용되는 문자가 멀리 떨어져 있고, _th, ph, sh, br, ec, ce, un, um, nu, ..._ 와 같이 주로 쓰이는 조합들이 각각 위아래 행에 자리 잡고 있어 같은 손가락이 위아래로 이동하는 횟수가 많다는 것이었다.\n\n이런 비효율적인 움직임을 최소화하면, 자잘한 실수를 하지 않게 될 거로 생각하며 연구를 시작하게 된다.\n\n약 10년 후, 1936년에 [드보락 자판](https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248)이 세상에 모습을 드러냈다.\n![](/images/14/dvorak-layout.webp)\n\n_(reference: https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248)_\n\n단어마다 하나 이상의 모음이 거의 무조건 들어가는 영어이기에, 모음 다섯 개를 전부 홈 행(home-row) 왼쪽에 배치했다. 그리고 조합으로 자주 쓰이는 자음(consonant) 다섯 개를 오른쪽에 배치했다.\n\n왼손의 주된 움직임과 위아래 행으로의 이동이 잦았던 이전 자판과 달리, 드보락 자판은 대부분 홈 행에서 타자가 가능하다.\n\n![](/images/14/qwerty-layout.webp)\n_(reference: https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248)_\n\n---\n\n아래는 한 인터넷 기사의 글을 각각 QWERTY 자판과 Dvorak 자판을 사용했을때의 [히트맵](https://www.patrick-wied.at/projects/heatmap-keyboard/)이다.\n\n쿼티 (QWERTY) 자판:\n![](/images/14/qwerty-heatmap.webp)\n\n드보락 (Dvorak) 자판:\n![](/images/14/dvorak-heatmap.webp)\n\n---\n\n이렇게 효율적인 자판이라면 지금 대부분의 사람이 쓰고 있거나 알고 있어야 하지만, 주류로 올라오는 데는 실패했다.\n\nDvorak 자판을 익히려면 상당한 시간 투자가 필요하며, 학습 중에는 일상 업무를 수행하기 어렵다. 더욱이 중도 포기 또한 쉽지 않다. 새로운 자판을 학습 하면서 기존 자판의 근육 기억이 사라져 되돌아가는 데도 어느정도의 시간이 소요되기 때문이다.\n\n하지만 이 자판이 일반적으로 사용 되지 못한 가장 큰 이유는, 대다수의 사람들이 이미 익숙한 자판을 포기하면서 까지 새로운 자판을 배워야 할 이유가 없었기 때문이다.\n\n한 마디로, 그렇게까지 효율적인 키보드 자판의 필요성을 사람들은 느끼지 못했다 ([변화를 싫어하는 사람들 - QWERTY 관성](/writing/15)).\n\n> \"I’m tired of trying to do something worthwhile for the human race. They simply don’t want to change!\" - August Dvorak","src/content/writing/14.md","d1af3759fc943e85",{"html":481,"metadata":482},"\u003Ch2 id=\"august-dvorak-오거스트-드보락\">August Dvorak (오거스트 드보락)\u003C/h2>\n\u003Cp>August Dvorak은 미네소타 글렌코 출신으로 University of Washington (UW)의 박사였으며, 2차 세계대전 당시 미 해군 잠수함의 장교로 복무한 인물이다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/14/august-dvorak.webp\" alt=\"\">\u003C/p>\n\u003Cp>Dvorak이 타자와 자판에 흥미를 느끼게 된 계기는 당시 타자기로 타자 수업을 하던 한 교수의 질문에서 비롯된다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“저희 학생들은 왜 4자 이하의 짧은 단어들을 칠 때 매번 실수하는 걸까요?”\u003C/p>\n\u003C/blockquote>\n\u003Cp>타입스크립트(타자기로 친 문서)에서 흔히 실수하는 단어들을 확인해보니 정말로 \u003Cem>the, to, of, and, is, here, it, that, …\u003C/em> 와 같이 짧은 단어들이 주를 이뤘다. Dvorak은 타자 치는 법을 몰랐고 배워본 적도 없다. 하지만 반복되는 오류에 대해 생각하며 연구하기 시작했다.\u003C/p>\n\u003Cp>우선 필기에서 오류를 범하는 주요인으로는 크게 세 가지가 있다는 것을 알게 되었다.\u003C/p>\n\u003Col>\n\u003Cli>익숙하지 않은 단어 (자주 사용되지 않는 단어)\u003C/li>\n\u003Cli>철자가 어려운 단어\u003C/li>\n\u003Cli>연습 부족\u003C/li>\n\u003C/ol>\n\u003Cp>하지만 세 가지 이유 모두 타자기의 경우와는 연관이 없었다. 앞에서 말했듯이 타자기에서의 실수는 주로 \u003Cem>the, that, it, here, …\u003C/em> 와 같이 익숙하면서도 너무나 간단한 단어들이었기 때문에, 개인의 연습 부족이라고 보기에도 어렵다. 여기서 Dvorak은 사람이 아니라 타자기의 자판이 문제라고 생각하게 된다.\u003C/p>\n\u003Ch2 id=\"비효율적인-자판\">비효율적인 자판\u003C/h2>\n\u003Cp>Dvorak은 타자기의 자판을 보면서 의문을 품기 시작했다. 자주 사용되는 문자가 멀리 떨어져 있고, \u003Cem>th, ph, sh, br, ec, ce, un, um, nu, …\u003C/em> 와 같이 주로 쓰이는 조합들이 각각 위아래 행에 자리 잡고 있어 같은 손가락이 위아래로 이동하는 횟수가 많다는 것이었다.\u003C/p>\n\u003Cp>이런 비효율적인 움직임을 최소화하면, 자잘한 실수를 하지 않게 될 거로 생각하며 연구를 시작하게 된다.\u003C/p>\n\u003Cp>약 10년 후, 1936년에 \u003Ca href=\"https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248\" rel=\"nofollow\">드보락 자판\u003Cspan> ↗\u003C/span>\u003C/a>이 세상에 모습을 드러냈다.\n\u003Cimg src=\"/images/14/dvorak-layout.webp\" alt=\"\">\u003C/p>\n\u003Cp>\u003Cem>(reference: \u003Ca href=\"https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248\" rel=\"nofollow\">https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248\u003Cspan> ↗\u003C/span>\u003C/a>)\u003C/em>\u003C/p>\n\u003Cp>단어마다 하나 이상의 모음이 거의 무조건 들어가는 영어이기에, 모음 다섯 개를 전부 홈 행(home-row) 왼쪽에 배치했다. 그리고 조합으로 자주 쓰이는 자음(consonant) 다섯 개를 오른쪽에 배치했다.\u003C/p>\n\u003Cp>왼손의 주된 움직임과 위아래 행으로의 이동이 잦았던 이전 자판과 달리, 드보락 자판은 대부분 홈 행에서 타자가 가능하다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/14/qwerty-layout.webp\" alt=\"\">\n\u003Cem>(reference: \u003Ca href=\"https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248\" rel=\"nofollow\">https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/2040248\u003Cspan> ↗\u003C/span>\u003C/a>)\u003C/em>\u003C/p>\n\u003Chr>\n\u003Cp>아래는 한 인터넷 기사의 글을 각각 QWERTY 자판과 Dvorak 자판을 사용했을때의 \u003Ca href=\"https://www.patrick-wied.at/projects/heatmap-keyboard/\" rel=\"nofollow\">히트맵\u003Cspan> ↗\u003C/span>\u003C/a>이다.\u003C/p>\n\u003Cp>쿼티 (QWERTY) 자판:\n\u003Cimg src=\"/images/14/qwerty-heatmap.webp\" alt=\"\">\u003C/p>\n\u003Cp>드보락 (Dvorak) 자판:\n\u003Cimg src=\"/images/14/dvorak-heatmap.webp\" alt=\"\">\u003C/p>\n\u003Chr>\n\u003Cp>이렇게 효율적인 자판이라면 지금 대부분의 사람이 쓰고 있거나 알고 있어야 하지만, 주류로 올라오는 데는 실패했다.\u003C/p>\n\u003Cp>Dvorak 자판을 익히려면 상당한 시간 투자가 필요하며, 학습 중에는 일상 업무를 수행하기 어렵다. 더욱이 중도 포기 또한 쉽지 않다. 새로운 자판을 학습 하면서 기존 자판의 근육 기억이 사라져 되돌아가는 데도 어느정도의 시간이 소요되기 때문이다.\u003C/p>\n\u003Cp>하지만 이 자판이 일반적으로 사용 되지 못한 가장 큰 이유는, 대다수의 사람들이 이미 익숙한 자판을 포기하면서 까지 새로운 자판을 배워야 할 이유가 없었기 때문이다.\u003C/p>\n\u003Cp>한 마디로, 그렇게까지 효율적인 키보드 자판의 필요성을 사람들은 느끼지 못했다 (\u003Ca href=\"/writing/15\">변화를 싫어하는 사람들 - QWERTY 관성\u003C/a>).\u003C/p>\n\u003Cblockquote>\n\u003Cp>“I’m tired of trying to do something worthwhile for the human race. They simply don’t want to change!” - August Dvorak\u003C/p>\n\u003C/blockquote>",{"headings":483,"localImagePaths":490,"remoteImagePaths":491,"frontmatter":492,"imagePaths":493},[484,487],{"depth":26,"slug":485,"text":486},"august-dvorak-오거스트-드보락","August Dvorak (오거스트 드보락)",{"depth":26,"slug":488,"text":489},"비효율적인-자판","비효율적인 자판",[],[],{"title":475,"pubDate":476},[],"15",{"id":494,"data":496,"body":499,"filePath":500,"digest":501,"rendered":502},{"title":497,"pubDate":498},"변화를 싫어하는 사람들 - QWERTY 관성","Feb 25 2023 22:00","_드보락(Dvorak)을 사용하는 글 주인의 주관적인 내용이 아주 잔뜩 담긴 글입니다._\n\n---\n\n현재 전 세계에서 가장 널리 사용되는 자판은 쿼티(QWERTY) 자판이다. 자판 상단 행의 문자 여섯 개를 왼쪽부터 순서대로 나열해서 붙여진 이름이다.\n\n이 글을 보는 사람들의 9할 이상이 쿼티 자판을 쓰고 있을 것이라고 확신할 수 있을 정도로 전 세계적으로 널리 사용되고 있는 자판이다. 하지만 왜 사용되고 있는 걸까? 나는 단 한 번도 \"쿼티 자판으로 타자를 배우겠어\"하고 본인이 선택해서 배웠다는 사람을 들어 본 적이 없다.\n\n지인이 타자 수업을 받고 왔는데 \"자판은 쿼티였어?\"와 같은 질문을 하면 \"커…. 뭐?\"와 같은 반응을 보이지 않을까 싶다. 본인이 사용하는 자판이 QWERTY라고 불리는 것도 모를 확률이 높다.\n\n사람들은 아무런 의심 없이 당연하게 쿼티 자판을 받아들이고 적응하며 사용하고 있다. 뭔가 불편한 부분이 있다면 그건 자판의 문제가 아니라 나 자신의 연습 부족이라고 생각하면서 말이다.\n\n## QWERTY 자판은 사람이 아닌 타자기를 위한 것\n\n쿼티 자판은 애초에 타자기의 글쇠들이 서로 엉키지 않도록 하기 위해 만들어진 자판이다.\n\n타자기에서 키를 동시에 입력하거나 주변에 위치한 키들을 빠르게 입력하면 글쇠가 엉켜 고장이 나버리는 문제가 있었다.\n\n이를 방지하기 위해 자주 쓰이는 문자와 문자의 조합(ph, sh, th, 등등)을 연구해서 자판에서 최대한 멀리 떨어뜨려 놓은 자판을 만들게 되는데 그것이 지금의 QWERTY 자판이다. Christopher Sholes가 발명했다고 알려져 있고 공개된 특허는 [여기](https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/0207559)에서 확인 할 수 있다.\n\n\n## 타자속도를 늦추기 위해 만들어진 자판이다?\n\n한 가지 잘못된 정보가 있는데 쿼티 자판은 일부러 타자 속도를 늦추기 위해 만들어진 것이 아니다.\n\n> \"When a key was pressed, the corresponding typebar would swing upwards, causing the print head to strike at the center of the ring. Gravity would then return the typebar to its initial position. The implication of this design, however, was that pressing adjoining keys in quick succession would cause their typebars to collide and jam the machine.\" (Utterback 1999, p5)[^a]\n\n당시 Christopher Sholes의 타자기는 중력에 의해 글쇠가 제자리에 돌아오도록 설계되어 있었다. 글쇠가 돌아오는 걸 기다릴 필요가 없도록 같이 쓰이는 문자들을 멀리 떨어뜨려 놓은 것이다. 그렇기 때문에 더 이상 글쇠가 엉켜버릴 걱정을 하지 않아도 되었고, 왼쪽 오른쪽 번갈아 가면서 타자를 할 수가 있기 때문에 오히려 빠르게 칠 수 있었다. 애초에 [Dvorak 자판](/writing/14)도 타자기를 기반으로 만들어졌다.\n\n## 비효율적인 키의 배치\n\n글쇠의 문제를 떠나서, 쿼티의 배치 자체가 비효율적이다. 항상 쓰이는 모음 중에서 오직 `A`만이 홈 행(home row)에 자리 잡고 있다. 이 말은 거의 매번 손가락을 위 혹은 아래 행으로 움직여야 한다는 것이다.\n\n재밌는 건 Christopher Sholes도 이를 알고 있었다는 것. 그는 QWERTY가 좋은 자판이라고 생각하지 않았고 계속해서 좀 더 효율적인 자판을 만들어내려고 했다. 그의 마지막 자판은 아래와 같은 모습을 하고 있다.\n\n![qwerty final layout](/images/15/qwerty-final-layout.webp)\n_Reference: C.L. Sholes Type Writing Machine - [Patent No.568630](https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/0568630)_\n\n드보락 자판이 만들어진 이유도 효율성 때문이다. 쿼티의 구조가 비효율적이라고 느낀 August Dvorak이 손의 움직임을 최소화할 수 있도록 홈 행 왼쪽에는 모음을, 오른쪽에는 가장 자주 쓰이는 자음 5개를 배치했다. 자연스럽게 양손을 균형 있게 사용하게 되면서 속도와 정확도를 챙기게 된 것인데 \"드보락은 빨리 칠 수 있게 만들어진 것\"이라는 오해가 있다.\n\n## 현재의 상태를 유지하고 싶어하는 사람들\n\nQWERTY가 비효율적이라면 어째서 2023년인 지금까지 계속해서 사용되고 있는 걸까? 여러 이유가 있겠지만, 내가 생각하는 바는 아래와 같다.\n\n더욱 효율적인 자판이라고 하는 것들이 여럿 나왔지만, 그 '효율적'이라는 것이 지금 웬만큼 문제없이 잘 사용하고 있는 자판을 굳이 버려가면서까지 배울 만큼 혁신적이지 않았기 때문이다. 단 몇 퍼센트의 성능 향상이 있다고 해서 당장 문제없이 돌아가는 시스템을 시간과 돈을 허비해가며 죄다 교체해버릴 수는 없지 않겠는가.\n\n변화를 싫어하는 사람들의 마음도 한몫했다고 본다. 쿼티의 발명가가 쿼티보다 효율적인 자판을 만들었지만 사장되어 버린 이유는, 쿼티를 사용하는 사람들은 계속해서 쿼티를 사용하려고 했기 때문이다. 타자기에서 전자로 넘어가면서 더 이상 글쇠의 문제는 없어지게 되었지만, QWERTY 관성(慣性)을 어찌할 수 없었다.\n\n그렇게 점점 더 많은 사람이 쿼티를 접하게 되었고 결국엔 국제 기준까지 되어버렸다. 기준이 되어 버린 만큼 해당 자판을 쓰는 게 당연해졌고, 내가 키보드를 처음 접했을 때처럼 자판에 대해서는 아무런 의심도 하지 않는 게 당연하게 되어버렸다.\n\n[^a]: Utterback, James M. (1999). Mastering the Dynamics of Innovation. Boston: Harvard Business Press.","src/content/writing/15.md","63dff5dede7bc19b",{"html":503,"metadata":504},"\u003Cp>\u003Cem>드보락(Dvorak)을 사용하는 글 주인의 주관적인 내용이 아주 잔뜩 담긴 글입니다.\u003C/em>\u003C/p>\n\u003Chr>\n\u003Cp>현재 전 세계에서 가장 널리 사용되는 자판은 쿼티(QWERTY) 자판이다. 자판 상단 행의 문자 여섯 개를 왼쪽부터 순서대로 나열해서 붙여진 이름이다.\u003C/p>\n\u003Cp>이 글을 보는 사람들의 9할 이상이 쿼티 자판을 쓰고 있을 것이라고 확신할 수 있을 정도로 전 세계적으로 널리 사용되고 있는 자판이다. 하지만 왜 사용되고 있는 걸까? 나는 단 한 번도 “쿼티 자판으로 타자를 배우겠어”하고 본인이 선택해서 배웠다는 사람을 들어 본 적이 없다.\u003C/p>\n\u003Cp>지인이 타자 수업을 받고 왔는데 “자판은 쿼티였어?”와 같은 질문을 하면 “커…. 뭐?”와 같은 반응을 보이지 않을까 싶다. 본인이 사용하는 자판이 QWERTY라고 불리는 것도 모를 확률이 높다.\u003C/p>\n\u003Cp>사람들은 아무런 의심 없이 당연하게 쿼티 자판을 받아들이고 적응하며 사용하고 있다. 뭔가 불편한 부분이 있다면 그건 자판의 문제가 아니라 나 자신의 연습 부족이라고 생각하면서 말이다.\u003C/p>\n\u003Ch2 id=\"qwerty-자판은-사람이-아닌-타자기를-위한-것\">QWERTY 자판은 사람이 아닌 타자기를 위한 것\u003C/h2>\n\u003Cp>쿼티 자판은 애초에 타자기의 글쇠들이 서로 엉키지 않도록 하기 위해 만들어진 자판이다.\u003C/p>\n\u003Cp>타자기에서 키를 동시에 입력하거나 주변에 위치한 키들을 빠르게 입력하면 글쇠가 엉켜 고장이 나버리는 문제가 있었다.\u003C/p>\n\u003Cp>이를 방지하기 위해 자주 쓰이는 문자와 문자의 조합(ph, sh, th, 등등)을 연구해서 자판에서 최대한 멀리 떨어뜨려 놓은 자판을 만들게 되는데 그것이 지금의 QWERTY 자판이다. Christopher Sholes가 발명했다고 알려져 있고 공개된 특허는 \u003Ca href=\"https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/0207559\" rel=\"nofollow\">여기\u003Cspan> ↗\u003C/span>\u003C/a>에서 확인 할 수 있다.\u003C/p>\n\u003Ch2 id=\"타자속도를-늦추기-위해-만들어진-자판이다\">타자속도를 늦추기 위해 만들어진 자판이다?\u003C/h2>\n\u003Cp>한 가지 잘못된 정보가 있는데 쿼티 자판은 일부러 타자 속도를 늦추기 위해 만들어진 것이 아니다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“When a key was pressed, the corresponding typebar would swing upwards, causing the print head to strike at the center of the ring. Gravity would then return the typebar to its initial position. The implication of this design, however, was that pressing adjoining keys in quick succession would cause their typebars to collide and jam the machine.” (Utterback 1999, p5)\u003Csup>\u003Ca href=\"#user-content-fn-a\" id=\"user-content-fnref-a\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1\u003C/a>\u003C/sup>\u003C/p>\n\u003C/blockquote>\n\u003Cp>당시 Christopher Sholes의 타자기는 중력에 의해 글쇠가 제자리에 돌아오도록 설계되어 있었다. 글쇠가 돌아오는 걸 기다릴 필요가 없도록 같이 쓰이는 문자들을 멀리 떨어뜨려 놓은 것이다. 그렇기 때문에 더 이상 글쇠가 엉켜버릴 걱정을 하지 않아도 되었고, 왼쪽 오른쪽 번갈아 가면서 타자를 할 수가 있기 때문에 오히려 빠르게 칠 수 있었다. 애초에 \u003Ca href=\"/writing/14\">Dvorak 자판\u003C/a>도 타자기를 기반으로 만들어졌다.\u003C/p>\n\u003Ch2 id=\"비효율적인-키의-배치\">비효율적인 키의 배치\u003C/h2>\n\u003Cp>글쇠의 문제를 떠나서, 쿼티의 배치 자체가 비효율적이다. 항상 쓰이는 모음 중에서 오직 \u003Ccode>A\u003C/code>만이 홈 행(home row)에 자리 잡고 있다. 이 말은 거의 매번 손가락을 위 혹은 아래 행으로 움직여야 한다는 것이다.\u003C/p>\n\u003Cp>재밌는 건 Christopher Sholes도 이를 알고 있었다는 것. 그는 QWERTY가 좋은 자판이라고 생각하지 않았고 계속해서 좀 더 효율적인 자판을 만들어내려고 했다. 그의 마지막 자판은 아래와 같은 모습을 하고 있다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/15/qwerty-final-layout.webp\" alt=\"qwerty final layout\">\n\u003Cem>Reference: C.L. Sholes Type Writing Machine - \u003Ca href=\"https://image-ppubs.uspto.gov/dirsearch-public/print/downloadPdf/0568630\" rel=\"nofollow\">Patent No.568630\u003Cspan> ↗\u003C/span>\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>드보락 자판이 만들어진 이유도 효율성 때문이다. 쿼티의 구조가 비효율적이라고 느낀 August Dvorak이 손의 움직임을 최소화할 수 있도록 홈 행 왼쪽에는 모음을, 오른쪽에는 가장 자주 쓰이는 자음 5개를 배치했다. 자연스럽게 양손을 균형 있게 사용하게 되면서 속도와 정확도를 챙기게 된 것인데 “드보락은 빨리 칠 수 있게 만들어진 것”이라는 오해가 있다.\u003C/p>\n\u003Ch2 id=\"현재의-상태를-유지하고-싶어하는-사람들\">현재의 상태를 유지하고 싶어하는 사람들\u003C/h2>\n\u003Cp>QWERTY가 비효율적이라면 어째서 2023년인 지금까지 계속해서 사용되고 있는 걸까? 여러 이유가 있겠지만, 내가 생각하는 바는 아래와 같다.\u003C/p>\n\u003Cp>더욱 효율적인 자판이라고 하는 것들이 여럿 나왔지만, 그 ‘효율적’이라는 것이 지금 웬만큼 문제없이 잘 사용하고 있는 자판을 굳이 버려가면서까지 배울 만큼 혁신적이지 않았기 때문이다. 단 몇 퍼센트의 성능 향상이 있다고 해서 당장 문제없이 돌아가는 시스템을 시간과 돈을 허비해가며 죄다 교체해버릴 수는 없지 않겠는가.\u003C/p>\n\u003Cp>변화를 싫어하는 사람들의 마음도 한몫했다고 본다. 쿼티의 발명가가 쿼티보다 효율적인 자판을 만들었지만 사장되어 버린 이유는, 쿼티를 사용하는 사람들은 계속해서 쿼티를 사용하려고 했기 때문이다. 타자기에서 전자로 넘어가면서 더 이상 글쇠의 문제는 없어지게 되었지만, QWERTY 관성(慣性)을 어찌할 수 없었다.\u003C/p>\n\u003Cp>그렇게 점점 더 많은 사람이 쿼티를 접하게 되었고 결국엔 국제 기준까지 되어버렸다. 기준이 되어 버린 만큼 해당 자판을 쓰는 게 당연해졌고, 내가 키보드를 처음 접했을 때처럼 자판에 대해서는 아무런 의심도 하지 않는 게 당연하게 되어버렸다.\u003C/p>\n\u003Csection data-footnotes=\"\" class=\"footnotes\">\u003Ch2 class=\"sr-only\" id=\"footnote-label\">Footnotes\u003C/h2>\n\u003Col>\n\u003Cli id=\"user-content-fn-a\">\n\u003Cp>Utterback, James M. (1999). Mastering the Dynamics of Innovation. Boston: Harvard Business Press. \u003Ca href=\"#user-content-fnref-a\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003C/section>",{"headings":505,"localImagePaths":521,"remoteImagePaths":522,"frontmatter":523,"imagePaths":524},[506,509,512,515,518],{"depth":26,"slug":507,"text":508},"qwerty-자판은-사람이-아닌-타자기를-위한-것","QWERTY 자판은 사람이 아닌 타자기를 위한 것",{"depth":26,"slug":510,"text":511},"타자속도를-늦추기-위해-만들어진-자판이다","타자속도를 늦추기 위해 만들어진 자판이다?",{"depth":26,"slug":513,"text":514},"비효율적인-키의-배치","비효율적인 키의 배치",{"depth":26,"slug":516,"text":517},"현재의-상태를-유지하고-싶어하는-사람들","현재의 상태를 유지하고 싶어하는 사람들",{"depth":26,"slug":519,"text":520},"footnote-label","Footnotes",[],[],{"title":497,"pubDate":498},[],"16",{"id":525,"data":527,"body":530,"filePath":531,"digest":532,"rendered":533},{"title":528,"pubDate":529},"Side Project - YourTrack","Feb 18 2024 12:58","- Project Repository: https://github.com/rolemadelen/yourtrack/tree/main\n- Project Deployment: https://yourtrack.vercel.app/\n\n## Project Idea\n\nThis project was inspired by [Receiptify](https://receiptify.herokuapp.com/), an app that allows you to visualize your top tracks from the Spotify app based on your previous listening history. I've been using this every month to see my monthly top tracks.\n\nOne day, I was thinking about a side project to do using React. I came across Spotify's web API and decided to create my own version of this application but much simpler.\n\nThe initial name for the project was _Trendify_. However, I changed it to _YourTrack_ because the domain with Trendify in Vercel was already taken :(\n\n## Technical Stack\n\nI used React and Vite for the frontend, and SCSS for styling. While state management wasn't necessary for this small application, I might consider Jotai or Recoil in the future if I find the need for further optimization due to their simplicity.\n\nI chose to use JavaScript instead of TypeScript because I didn't think this application was complex enough to benefit significantly from TypeScript. Nevertheless, I did use `prop-types` to ensure components receive proper data.\n\nThe application allows users to download the top 10 tracks as an image. For this feature, [html2canvas](https://html2canvas.hertzen.com/) was utilized.\n\n## Features\n\n### Spotify Integration\n\nI implemented the Authorization Code with PKCE flow to authenticate users and obtain the access token. This access token is then utilized to make API calls to Spotify.\n\nTo provide a brief overview of PKCE, it stands for Proof Key for Code Exchange—an authorization code extension designed to prevent CSRF and authorization code injection attacks. While it was originally employed for mobile devices, it has become the recommended approach for applications unable to securely store client secrets within their codebase. For more in-depth information on the PKCE extension and implementation details.\n\n### 30-Second Track Preview\n\nUpon reviewing the documentation, I discovered that the returned JSON object includes a `preview_url` field containing a link to a 30-second audio preview file. Motivated by this, I decided to implement a feature enabling users to click on a track and listen to its preview.\n\nThe following API was employed to fetch the preview link of a selected track using its `id`.\n\n```js\nexport async function fetchAudioPreview(id, token) {\n  const req = request(token);\n\n  const AUDIO_PREVIEW_URL = `https://api.spotify.com/v1/tracks/${id}`;\n  const result = await fetch(AUDIO_PREVIEW_URL, req);\n  return await result.json();\n}\n```\n\nI implemented a logic which allows users to click on a different track while one is playing or click on the same track to stop the audio preview.\n\n![](/images/16/yourtrack-30s-preview.webp)\n\n### Customizable Themes\n\nThe application offers users a variety of themes to choose from. Currently, there are six predefined themes; however, I am contemplating the addition of a color picker to allow for a more extensive range of customization.\n\nAs users select different themes, the entire color scheme of the app undergoes a transformation. This includes the color of the radio selection, download button, and the background color on the track's ranking when the preview audio for that track is playing.\n\n![](/images/16/theme.webp)\n\n### Download as Image\n\nLast but not least, users have the option to download the top 10 tracks as an image. To facilitate this process, `html2canvas` was used to convert the component into a canvas, which can then be downloaded as an image.\n\nInitially, there were issues with images not loading correctly upon download, primarily due to CORS problems. However, this was resolved by including a specific flag when calling `html2canvas`.\n\n```js\nexport const exportAsImage = async (el, imageFileName) => {\n  const canvas = await html2canvas(el, {\n    scale: 2,\n    useCORS: true,\n  });\n  const image = canvas.toDataURL('image/png', 1.0);\n  downloadImage(image, imageFileName);\n};\n```\n\nThere was a minor setback with `html2canvas` when downloading the component as an image, particularly when dealing with overflowed text that was hidden with ellipsis in the design. Unfortunately, the ellipsis were omitted upon download, resulting in a cut-off of the text.\n\nDespite the ongoing issues reported on GitHub ([#324](https://github.com/niklasvh/html2canvas/issues/324) - closed, [#2262](https://github.com/niklasvh/html2canvas/issues/2262) - open), a solution was manually crafted. The approach involves calculating the precise number of characters in a track title that fit within the width. During the download, an ellipsis `'...'` is appended. Once the image is downloaded, any truncated texts are replaced back with their original titles.\n\nWhile this is not an ideal solution, simplicity guided the choice of this workaround.\n\n```js\nexport const exportAsImage = async (tracksList, el, imageFileName) => {\n  const MAX_CHAR = 26;\n  const originalTitle = [];\n\n  // checks for the overflowed title\n  [...tracksList.children].forEach((list) => {\n    const songTitle = list.querySelector('.song-title');\n    if (songTitle.scrollWidth > songTitle.clientWidth) {\n      originalTitle.push({ idx: songTitle.textContent });\n      songTitle.textContent = songTitle.textContent.substr(0, MAX_CHAR) + '...';\n    }\n  });\n\n  const canvas = await html2canvas(el, {\n    scale: 2,\n    useCORS: true,\n  });\n  const image = canvas.toDataURL('image/png', 1.0);\n  downloadImage(tracksList, image, imageFileName);\n\n  // replace back with their original title\n  originalTitle.map((idx, text) => {\n    tracksList.children[idx].querySelector('.song-title').textContent = text;\n  });\n};\n\n```\n\n\n## Retrospect\n### Good Job 👍🏼\n\n- Successfully implementing the PKCE authorization code flow.\n- Completed all the planned features.\n- Used `localStorage` for preview audio, reducing the number of API calls.\n- Refactored the code, potentially enhancing maintainability and readability (even if it's challenging to quantify as a solo project).\n\n### But 🤔\n\n- Acknowledged the application's minimalistic nature.\n- Consider additional features, such as extending the time range (half a year, all time) and utilizing more data from the API.\n- The possibility of refining the design further. The plain white background could have benefited from more initial design consideration.","src/content/writing/16.md","0226d7a5d433d642",{"html":534,"metadata":535},"\u003Cul>\n\u003Cli>Project Repository: \u003Ca href=\"https://github.com/rolemadelen/yourtrack/tree/main\" rel=\"nofollow\">https://github.com/rolemadelen/yourtrack/tree/main\u003Cspan> ↗\u003C/span>\u003C/a>\u003C/li>\n\u003Cli>Project Deployment: \u003Ca href=\"https://yourtrack.vercel.app/\" rel=\"nofollow\">https://yourtrack.vercel.app/\u003Cspan> ↗\u003C/span>\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"project-idea\">Project Idea\u003C/h2>\n\u003Cp>This project was inspired by \u003Ca href=\"https://receiptify.herokuapp.com/\" rel=\"nofollow\">Receiptify\u003Cspan> ↗\u003C/span>\u003C/a>, an app that allows you to visualize your top tracks from the Spotify app based on your previous listening history. I’ve been using this every month to see my monthly top tracks.\u003C/p>\n\u003Cp>One day, I was thinking about a side project to do using React. I came across Spotify’s web API and decided to create my own version of this application but much simpler.\u003C/p>\n\u003Cp>The initial name for the project was \u003Cem>Trendify\u003C/em>. However, I changed it to \u003Cem>YourTrack\u003C/em> because the domain with Trendify in Vercel was already taken :(\u003C/p>\n\u003Ch2 id=\"technical-stack\">Technical Stack\u003C/h2>\n\u003Cp>I used React and Vite for the frontend, and SCSS for styling. While state management wasn’t necessary for this small application, I might consider Jotai or Recoil in the future if I find the need for further optimization due to their simplicity.\u003C/p>\n\u003Cp>I chose to use JavaScript instead of TypeScript because I didn’t think this application was complex enough to benefit significantly from TypeScript. Nevertheless, I did use \u003Ccode>prop-types\u003C/code> to ensure components receive proper data.\u003C/p>\n\u003Cp>The application allows users to download the top 10 tracks as an image. For this feature, \u003Ca href=\"https://html2canvas.hertzen.com/\" rel=\"nofollow\">html2canvas\u003Cspan> ↗\u003C/span>\u003C/a> was utilized.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Ch3 id=\"spotify-integration\">Spotify Integration\u003C/h3>\n\u003Cp>I implemented the Authorization Code with PKCE flow to authenticate users and obtain the access token. This access token is then utilized to make API calls to Spotify.\u003C/p>\n\u003Cp>To provide a brief overview of PKCE, it stands for Proof Key for Code Exchange—an authorization code extension designed to prevent CSRF and authorization code injection attacks. While it was originally employed for mobile devices, it has become the recommended approach for applications unable to securely store client secrets within their codebase. For more in-depth information on the PKCE extension and implementation details.\u003C/p>\n\u003Ch3 id=\"30-second-track-preview\">30-Second Track Preview\u003C/h3>\n\u003Cp>Upon reviewing the documentation, I discovered that the returned JSON object includes a \u003Ccode>preview_url\u003C/code> field containing a link to a 30-second audio preview file. Motivated by this, I decided to implement a feature enabling users to click on a track and listen to its preview.\u003C/p>\n\u003Cp>The following API was employed to fetch the preview link of a selected track using its \u003Ccode>id\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetchAudioPreview\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">id\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">token\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> req\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> request\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(token);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> AUDIO_PREVIEW_URL\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `https://api.spotify.com/v1/tracks/${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">id\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> result\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> fetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">AUDIO_PREVIEW_URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, req);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> result.\u003C/span>\u003Cspan style=\"color:#B392F0\">json\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I implemented a logic which allows users to click on a different track while one is playing or click on the same track to stop the audio preview.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/16/yourtrack-30s-preview.webp\" alt=\"\">\u003C/p>\n\u003Ch3 id=\"customizable-themes\">Customizable Themes\u003C/h3>\n\u003Cp>The application offers users a variety of themes to choose from. Currently, there are six predefined themes; however, I am contemplating the addition of a color picker to allow for a more extensive range of customization.\u003C/p>\n\u003Cp>As users select different themes, the entire color scheme of the app undergoes a transformation. This includes the color of the radio selection, download button, and the background color on the track’s ranking when the preview audio for that track is playing.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/16/theme.webp\" alt=\"\">\u003C/p>\n\u003Ch3 id=\"download-as-image\">Download as Image\u003C/h3>\n\u003Cp>Last but not least, users have the option to download the top 10 tracks as an image. To facilitate this process, \u003Ccode>html2canvas\u003C/code> was used to convert the component into a canvas, which can then be downloaded as an image.\u003C/p>\n\u003Cp>Initially, there were issues with images not loading correctly upon download, primarily due to CORS problems. However, this was resolved by including a specific flag when calling \u003Ccode>html2canvas\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> exportAsImage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">el\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">imageFileName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> canvas\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> html2canvas\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(el, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    scale: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    useCORS: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> image\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> canvas.\u003C/span>\u003Cspan style=\"color:#B392F0\">toDataURL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'image/png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  downloadImage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(image, imageFileName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There was a minor setback with \u003Ccode>html2canvas\u003C/code> when downloading the component as an image, particularly when dealing with overflowed text that was hidden with ellipsis in the design. Unfortunately, the ellipsis were omitted upon download, resulting in a cut-off of the text.\u003C/p>\n\u003Cp>Despite the ongoing issues reported on GitHub (\u003Ca href=\"https://github.com/niklasvh/html2canvas/issues/324\" rel=\"nofollow\">#324\u003Cspan> ↗\u003C/span>\u003C/a> - closed, \u003Ca href=\"https://github.com/niklasvh/html2canvas/issues/2262\" rel=\"nofollow\">#2262\u003Cspan> ↗\u003C/span>\u003C/a> - open), a solution was manually crafted. The approach involves calculating the precise number of characters in a track title that fit within the width. During the download, an ellipsis \u003Ccode>'...'\u003C/code> is appended. Once the image is downloaded, any truncated texts are replaced back with their original titles.\u003C/p>\n\u003Cp>While this is not an ideal solution, simplicity guided the choice of this workaround.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> const\u003C/span>\u003Cspan style=\"color:#B392F0\"> exportAsImage\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">tracksList\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">el\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">imageFileName\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MAX_CHAR\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 26\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> originalTitle\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // checks for the overflowed title\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  [\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">tracksList.children].\u003C/span>\u003Cspan style=\"color:#B392F0\">forEach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">list\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> songTitle\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> list.\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.song-title'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (songTitle.scrollWidth \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> songTitle.clientWidth) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      originalTitle.\u003C/span>\u003Cspan style=\"color:#B392F0\">push\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ idx: songTitle.textContent });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      songTitle.textContent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> songTitle.textContent.\u003C/span>\u003Cspan style=\"color:#B392F0\">substr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">MAX_CHAR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '...'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> canvas\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> await\u003C/span>\u003Cspan style=\"color:#B392F0\"> html2canvas\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(el, {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    scale: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    useCORS: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> image\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> canvas.\u003C/span>\u003Cspan style=\"color:#B392F0\">toDataURL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'image/png'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  downloadImage\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(tracksList, image, imageFileName);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // replace back with their original title\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  originalTitle.\u003C/span>\u003Cspan style=\"color:#B392F0\">map\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#FFAB70\">idx\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">text\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    tracksList.children[idx].\u003C/span>\u003Cspan style=\"color:#B392F0\">querySelector\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'.song-title'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).textContent \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> text;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"retrospect\">Retrospect\u003C/h2>\n\u003Ch3 id=\"good-job\">Good Job 👍🏼\u003C/h3>\n\u003Cul>\n\u003Cli>Successfully implementing the PKCE authorization code flow.\u003C/li>\n\u003Cli>Completed all the planned features.\u003C/li>\n\u003Cli>Used \u003Ccode>localStorage\u003C/code> for preview audio, reducing the number of API calls.\u003C/li>\n\u003Cli>Refactored the code, potentially enhancing maintainability and readability (even if it’s challenging to quantify as a solo project).\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"but\">But 🤔\u003C/h3>\n\u003Cul>\n\u003Cli>Acknowledged the application’s minimalistic nature.\u003C/li>\n\u003Cli>Consider additional features, such as extending the time range (half a year, all time) and utilizing more data from the API.\u003C/li>\n\u003Cli>The possibility of refining the design further. The plain white background could have benefited from more initial design consideration.\u003C/li>\n\u003C/ul>",{"headings":536,"localImagePaths":568,"remoteImagePaths":569,"frontmatter":570,"imagePaths":571},[537,540,543,546,550,553,556,559,562,565],{"depth":26,"slug":538,"text":539},"project-idea","Project Idea",{"depth":26,"slug":541,"text":542},"technical-stack","Technical Stack",{"depth":26,"slug":544,"text":545},"features","Features",{"depth":547,"slug":548,"text":549},3,"spotify-integration","Spotify Integration",{"depth":547,"slug":551,"text":552},"30-second-track-preview","30-Second Track Preview",{"depth":547,"slug":554,"text":555},"customizable-themes","Customizable Themes",{"depth":547,"slug":557,"text":558},"download-as-image","Download as Image",{"depth":26,"slug":560,"text":561},"retrospect","Retrospect",{"depth":547,"slug":563,"text":564},"good-job","Good Job 👍🏼",{"depth":547,"slug":566,"text":567},"but","But 🤔",[],[],{"title":528,"pubDate":529},[],"17",{"id":572,"data":574,"body":578,"filePath":579,"digest":580,"rendered":581},{"title":575,"pubDate":576,"updatedDate":577},"Side Project - Command Line Pomodoro Timer","Mar 22 2024 22:30","May 11 2025 11:04","As I'm learning Rust, I decided to go for a project. But what should I make? Choosing what to make is always the hardest part when it comes to a side project. \n\nIt didn't took long though. I decided to make a pomodoro timer. \n\n~~The reason for this is because, I started doing a study-with-me live on YouTube. As I do the live, I wanted to display a timer on the screen to share my state: `focused` and `on break`.~~\n\n~~For example, here's the actual shot of me doing the live with a pomodoro timer I made.~~\n\n\n## Planning Phase\n\nI started by jotting down some of the basic features for this application. Here's my original note written in obsidian.\n\nThe initial name for the program was simply `terminal-pomodoro`; it's pretty mundane. I asked for LLM's help to generate some good name but meh 🫤\n\nI decided to mix these two words: _Pomodoro_ and _Shell_. After trying some combinations, I decided to go with _Pomosh_.\n\nThis is just a side note, but [someone](https://mastodon.social/@zenforyen/112136497291326282) told me that the word _pomosh (помощь)_ means _help_ in Russian.\n\n\n## Implementing Phase\n### User input \n\nThe input is straightforward. I prompt the user and get their inputs for the session and break durations in minutes.\n\nHere's the initial version of the code before I refactored; it's only partial.\n\n```rust\nfn read_string() -> String {\n    let mut input = String::new();\n    io::stdin()\n        .read_line(&mut input)\n        .expect(\"[read_int()] failed to read an input\");\n    input\n}\n\nfn setup(focus_session: &mut i64, break_session: &mut i64) {\n    let focus_bound = [5, 90];\n    let break_bound = [2, 90];\n    loop {\n        print!(\n            \"How long is the focus session? ({lower}-{upper} minutes): \",\n            lower = focus_bound[0],\n            upper = focus_bound[1]\n        );\n        io::stdout().flush().unwrap();\n        *focus_session = read_string()\n            .trim()\n            .parse()\n            .expect(\"failed to parse a focus_session\");\n\n        if *focus_session >= 5 && *focus_session \u003C= 90 {\n            break;\n        }\n    }\n\n\t// ... break duration\n}\n\nfn main() {\n\tlet mut focus_session: i64 = 0;\n\tlet mut break_session: i64 = 0;\n\t\n\tsetup(&mut focus_session, &mut break_session);\n}\n```\n\nFor pomodoro, it's quite unusual to have a session that lasts longer than 90 minutes. So I limited the duration to be between 5 and 90 minutes. \n\n### Display time\n\nAs you can see from the planning phase, I thought I had to get the current time to make the app get going but I didn't had to. I already know the duration, all I need to do is count it down from `x` minutes to `0`. The question is how. \n\nRust comes with a native OS threads, so I can use `sleep`.\n\nSince I'm displaying minutes only, I just need to decrement the minute in every 60 seconds of sleep.\n\n```rust\nlet mut focus_min = 25;\n\nwhile focus_min >= 0 {\n\tfocus_min -= 1;\n\t\n\tprintln!(\"{}\", focus_min);\n\t\n\tsleep(Duration::new(60, 0));\n}\n```\n\nThis will print minutes from `24` to `0`. \n\n---\n\nI want to display the time using ascii art. Thanks to [yuanqing](https://gist.github.com/yuanqing/ffa2244bd134f911d365), I was able to get all the numbers already defined in ascii format.\n\n```text\n000000\n00  00\n00  00\n00  00\n000000\n\n1111\n  11\n  11\n  11\n111111\n\n...\n\n888888\n88  88\n888888\n88  88\n888888\n\n999999\n99  99\n999999\n    99\n999999\n```\n\nThe problem is that these numbers are all drawn one at a time. How should I print them side by side?\n\nI first stored all of them in an array.\n```rust\nlet ascii_art: [&str; 10] = [\n\t\"000000\\n00  00\\n00  00\\n00  00\\n000000\",\n\t\"1111  \\n  11  \\n  11  \\n  11  \\n111111\",\n\t\"222222\\n     2\\n222222\\n2     \\n222222\",\n\t\"333333\\n    33\\n333333\\n    33\\n333333\",\n\t\"44  44\\n44  44\\n444444\\n    44\\n    44\",\n\t\"555555\\n55    \\n555555\\n    55\\n555555\",\n\t\"666666\\n66    \\n666666\\n66  66\\n666666\",\n\t\"777777\\n    77\\n    77\\n    77\\n    77\",\n\t\"888888\\n88  88\\n888888\\n88  88\\n888888\",\n\t\"999999\\n99  99\\n999999\\n    99\\n999999\",\n];\n```\n\nWhat I'm trying to do is..\n- as I count down the duration (e.g. `24`),\n- I'll separate the minutes: `2` and `4`,\n- use it as an index: `ascii_art[2]` and `ascii_art[4]`,\n- and read these strings line by line to print two numbers side by side\n\n```rust\nfn merge_and_print(a: &str, b: &str) {\n    let a = a.to_string();\n    let b = b.to_string();\n\n    let a: Vec\u003C&str> = a.split('\\n').collect();\n    let b: Vec\u003C&str> = b.split('\\n').collect();\n\n    for i in 0..5 {\n        print!(\"{}  {}\", a[i].bright_blue(), b[i].bright_blue());\n        println!();\n    }\n}\n```\n\nNow I get to print minutes like the following:\n\n```text\n 222222  44  44\n      2  44  44\n 222222  444444\n 2           44\n 222222      44\n```\n\n### Play the chime\n\nI decided to play the audio when the session completes. I used the rust playback library, [rodio](https://github.com/RustAudio/rodio). \n\n```rust\nuse rodio::{Decoder, OutputStream, Sink};\nuse std::fs::File;\n\nfn play_audio() {\n\tlet file = File::open(\"./src/chime.mp3\").unwrap();\n    let source = Decoder::new(BufReader::new(cursor)).unwrap();\n    let (_stream, stream_handle) = OutputStream::try_default().unwrap();\n    let sink = Sink::try_new(&stream_handle).unwrap();\n\n    sink.append(source);\n    sink.sleep_until_end();\n}\n```\n\nAfter the release, I had an [issue with the program not playing the audio](https://github.com/rolemadelen/pomosh/issues/3). This was because I used `File` to open the audio. I had to load the audio file at runtime. So I used `include_bytes!` to embed the file's contents into the binary.\n\n```rust\nconst CHIME_SOUND: &[u8] = include_bytes!(\"../assets/chime.mp3\");\n\nfn play_audio() {\n    let cursor = Cursor::new(CHIME_SOUND);\n    let source = Decoder::new(BufReader::new(cursor)).unwrap();\n    let (_stream, stream_handle) = OutputStream::try_default().unwrap();\n    let sink = Sink::try_new(&stream_handle).unwrap();\n\n    sink.append(source);\n    sink.sleep_until_end();\n}\n```\n\nAnd here's a completed view of `pomosh`:\n\n\n## Reflection\n\nI've learned numerous concepts while doing the project. Only couple days in learning Rust, I only knew about `std::io`. But through this project, I learned about other crates like `thread`, `chrono`, `SystemTime`, `rodio`, and many others.\n\nAnother new thing that I was able to achieve was letting people use homebrew to install this CLI program. I've never done this before, and I got very excited when I was able to install it using `brew tap rolemadelen/pomosh && brew install pomosh`. I felt like the old days when I was first exposed to the programming.\n\nWant to try it out? Check out the [project repository](https://github.com/rolemadelen/pomosh).","src/content/writing/17.md","4d615e5ec87b24cf",{"html":582,"metadata":583},"\u003Cp>As I’m learning Rust, I decided to go for a project. But what should I make? Choosing what to make is always the hardest part when it comes to a side project.\u003C/p>\n\u003Cp>It didn’t took long though. I decided to make a pomodoro timer.\u003C/p>\n\u003Cp>\u003Cdel>The reason for this is because, I started doing a study-with-me live on YouTube. As I do the live, I wanted to display a timer on the screen to share my state: \u003Ccode>focused\u003C/code> and \u003Ccode>on break\u003C/code>.\u003C/del>\u003C/p>\n\u003Cp>\u003Cdel>For example, here’s the actual shot of me doing the live with a pomodoro timer I made.\u003C/del>\u003C/p>\n\u003Ch2 id=\"planning-phase\">Planning Phase\u003C/h2>\n\u003Cp>I started by jotting down some of the basic features for this application. Here’s my original note written in obsidian.\u003C/p>\n\u003Cp>The initial name for the program was simply \u003Ccode>terminal-pomodoro\u003C/code>; it’s pretty mundane. I asked for LLM’s help to generate some good name but meh 🫤\u003C/p>\n\u003Cp>I decided to mix these two words: \u003Cem>Pomodoro\u003C/em> and \u003Cem>Shell\u003C/em>. After trying some combinations, I decided to go with \u003Cem>Pomosh\u003C/em>.\u003C/p>\n\u003Cp>This is just a side note, but \u003Ca href=\"https://mastodon.social/@zenforyen/112136497291326282\" rel=\"nofollow\">someone\u003Cspan> ↗\u003C/span>\u003C/a> told me that the word \u003Cem>pomosh (помощь)\u003C/em> means \u003Cem>help\u003C/em> in Russian.\u003C/p>\n\u003Ch2 id=\"implementing-phase\">Implementing Phase\u003C/h2>\n\u003Ch3 id=\"user-input\">User input\u003C/h3>\n\u003Cp>The input is straightforward. I prompt the user and get their inputs for the session and break durations in minutes.\u003C/p>\n\u003Cp>Here’s the initial version of the code before I refactored; it’s only partial.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> read_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> input \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> String\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    io\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">stdin\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">read_line\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> input)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        .\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"[read_int()] failed to read an input\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    input\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(focus_session\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> i64\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, break_session\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;mut\u003C/span>\u003Cspan style=\"color:#B392F0\"> i64\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_bound \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> break_bound \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    loop\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">            \"How long is the focus session? ({lower}-{upper} minutes): \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            lower \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_bound[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            upper \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_bound[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        io\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">stdout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">flush\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">focus_session \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> read_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">trim\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            .\u003C/span>\u003Cspan style=\"color:#B392F0\">expect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"failed to parse a focus_session\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        if\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">focus_session \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">focus_session \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 90\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            break\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// ... break duration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tlet\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_session\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i64\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tlet\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> break_session\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> i64\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tsetup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_session, \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> break_session);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For pomodoro, it’s quite unusual to have a session that lasts longer than 90 minutes. So I limited the duration to be between 5 and 90 minutes.\u003C/p>\n\u003Ch3 id=\"display-time\">Display time\u003C/h3>\n\u003Cp>As you can see from the planning phase, I thought I had to get the current time to make the app get going but I didn’t had to. I already know the duration, all I need to do is count it down from \u003Ccode>x\u003C/code> minutes to \u003Ccode>0\u003C/code>. The question is how.\u003C/p>\n\u003Cp>Rust comes with a native OS threads, so I can use \u003Ccode>sleep\u003C/code>.\u003C/p>\n\u003Cp>Since I’m displaying minutes only, I just need to decrement the minute in every 60 seconds of sleep.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#F97583\"> mut\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_min \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 25\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> focus_min \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tfocus_min \u003C/span>\u003Cspan style=\"color:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tprintln!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, focus_min);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tsleep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">Duration\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">60\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will print minutes from \u003Ccode>24\u003C/code> to \u003Ccode>0\u003C/code>.\u003C/p>\n\u003Chr>\n\u003Cp>I want to display the time using ascii art. Thanks to \u003Ca href=\"https://gist.github.com/yuanqing/ffa2244bd134f911d365\" rel=\"nofollow\">yuanqing\u003Cspan> ↗\u003C/span>\u003C/a>, I was able to get all the numbers already defined in ascii format.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>00  00\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>00  00\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>00  00\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>000000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1111\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  11\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  11\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  11\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>111111\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>888888\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>88  88\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>888888\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>88  88\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>888888\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>999999\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>99  99\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>999999\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    99\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>999999\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The problem is that these numbers are all drawn one at a time. How should I print them side by side?\u003C/p>\n\u003Cp>I first stored all of them in an array.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ascii_art\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"000000\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">00  00\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">00  00\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">00  00\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">000000\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"1111  \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  11  \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  11  \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  11  \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">111111\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"222222\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">     2\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">222222\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">2     \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">222222\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"333333\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    33\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">333333\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    33\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">333333\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"44  44\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">44  44\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">444444\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    44\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    44\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"555555\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">55    \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">555555\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    55\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">555555\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"666666\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">66    \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">666666\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">66  66\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">666666\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"777777\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    77\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    77\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    77\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    77\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"888888\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">88  88\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">888888\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">88  88\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">888888\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\"999999\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">99  99\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">999999\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">    99\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">999999\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>What I’m trying to do is..\u003C/p>\n\u003Cul>\n\u003Cli>as I count down the duration (e.g. \u003Ccode>24\u003C/code>),\u003C/li>\n\u003Cli>I’ll separate the minutes: \u003Ccode>2\u003C/code> and \u003Ccode>4\u003C/code>,\u003C/li>\n\u003Cli>use it as an index: \u003Ccode>ascii_art[2]\u003C/code> and \u003Ccode>ascii_art[4]\u003C/code>,\u003C/li>\n\u003Cli>and read these strings line by line to print two numbers side by side\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> merge_and_print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(a\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, b\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> a\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Vec\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#B392F0\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">> \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> b\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">split\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">collect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">..\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        print!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{}  {}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, a[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">bright_blue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(), b[i]\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">bright_blue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">());\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        println!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now I get to print minutes like the following:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan> 222222  44  44\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>      2  44  44\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 222222  444444\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 2           44\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan> 222222      44\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"play-the-chime\">Play the chime\u003C/h3>\n\u003Cp>I decided to play the audio when the session completes. I used the rust playback library, \u003Ca href=\"https://github.com/RustAudio/rodio\" rel=\"nofollow\">rodio\u003Cspan> ↗\u003C/span>\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> rodio\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">Decoder\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">OutputStream\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">Sink\u003C/span>\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">use\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">fs\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">File\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> play_audio\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tlet\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> file \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> File\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">open\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"./src/chime.mp3\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Decoder\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">BufReader\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(cursor))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (_stream, stream_handle) \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> OutputStream\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">try_default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sink \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sink\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">try_new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stream_handle)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sink\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(source);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sink\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sleep_until_end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>After the release, I had an \u003Ca href=\"https://github.com/rolemadelen/pomosh/issues/3\" rel=\"nofollow\">issue with the program not playing the audio\u003Cspan> ↗\u003C/span>\u003C/a>. This was because I used \u003Ccode>File\u003C/code> to open the audio. I had to load the audio file at runtime. So I used \u003Ccode>include_bytes!\u003C/code> to embed the file’s contents into the binary.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rust\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> CHIME_SOUND\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#B392F0\">u8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> include_bytes!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"../assets/chime.mp3\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">fn\u003C/span>\u003Cspan style=\"color:#B392F0\"> play_audio\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> cursor \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Cursor\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">CHIME_SOUND\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> source \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Decoder\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">BufReader\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(cursor))\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (_stream, stream_handle) \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> OutputStream\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">try_default\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sink \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> Sink\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#B392F0\">try_new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">stream_handle)\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">unwrap\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sink\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">append\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(source);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    sink\u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">sleep_until_end\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And here’s a completed view of \u003Ccode>pomosh\u003C/code>:\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>I’ve learned numerous concepts while doing the project. Only couple days in learning Rust, I only knew about \u003Ccode>std::io\u003C/code>. But through this project, I learned about other crates like \u003Ccode>thread\u003C/code>, \u003Ccode>chrono\u003C/code>, \u003Ccode>SystemTime\u003C/code>, \u003Ccode>rodio\u003C/code>, and many others.\u003C/p>\n\u003Cp>Another new thing that I was able to achieve was letting people use homebrew to install this CLI program. I’ve never done this before, and I got very excited when I was able to install it using \u003Ccode>brew tap rolemadelen/pomosh &#x26;&#x26; brew install pomosh\u003C/code>. I felt like the old days when I was first exposed to the programming.\u003C/p>\n\u003Cp>Want to try it out? Check out the \u003Ca href=\"https://github.com/rolemadelen/pomosh\" rel=\"nofollow\">project repository\u003Cspan> ↗\u003C/span>\u003C/a>.\u003C/p>",{"headings":584,"localImagePaths":603,"remoteImagePaths":604,"frontmatter":605,"imagePaths":606},[585,588,591,594,597,600],{"depth":26,"slug":586,"text":587},"planning-phase","Planning Phase",{"depth":26,"slug":589,"text":590},"implementing-phase","Implementing Phase",{"depth":547,"slug":592,"text":593},"user-input","User input",{"depth":547,"slug":595,"text":596},"display-time","Display time",{"depth":547,"slug":598,"text":599},"play-the-chime","Play the chime",{"depth":26,"slug":601,"text":602},"reflection","Reflection",[],[],{"title":575,"pubDate":576,"updatedDate":577},[]]