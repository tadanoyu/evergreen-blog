[["Map",1,2,9,10,245,246],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.10","content-config-digest","5ab970fb93e6173b","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"content\":{\"type\":\"text\",\"value\":\" ↗\"}}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","writing",["Map",11,12,27,28,43,44,60,61,76,77,92,93,117,118,148,149,164,165,180,181,197,198,213,214,229,230],"1",{"id":11,"data":13,"body":16,"filePath":17,"digest":18,"rendered":19},{"title":14,"pubDate":15},"미용실","Apr 29 2024 07:00","내가 집을 떠나 일본으로 이주 했을 때, 처음으로 거주하게 되었던 곳은 藤沢 (후지사와)였다.\n이곳에서 FLT (Foreign Language Teacher) 일을 하면서 약 1년간 살았었다.\n\n나는 우리 가족들 중에서도 유독 머리가 빨리 자라는 편이라서 2-3개월마다 머리를 잘라주어야만 했다. 평소라면 이렇게 자주가지는 않을테지만 아무래도 학교에서 일을 하다 보니, 계속해서 깔끔하게 머리를 유지시켜야 했다.\n\n일본 미용실 가격이 비싼편에 속하기 때문에 나는 500-1000엔 하는 저렴한 이발소에서 이발하고는 했다. 아이들을 가르치는 입장으로써 따로 머리를 꾸밀 수 있는 것도 아니고, 평소에 스타일링을 하는 편도 아니라서 그냥 대충 아무 데나 가서 이발하고는 했다.\n\n그러다 어느 날 문득, 일본 미용실에 가보고 싶어졌다. 어디가 좋을까 여기저기 기웃거리다가, 집 근처에 있는 미용실에 들어갔다. 하지만 예약을 해야 한다고 해서 그 자리에서 예약하고, 다음 날 다시 찾아갔다.\n\n---\n\n좋았다. \n\n그냥 좋았다.\n\n내가 일본에서 미용실을 안 갔던 이유는 일본어 문제가 가장 컸다. 한국 미용실에서도 \"전체적으로 짧게 잘라주세요\" 정도에 그치는데, 일본어로 세세하게 어떻게 설명해야 할지 몰랐다. 그래서 그냥 사진을 들고 갔는데, 하나하나 세세하게 물어보면서 내 부족한 일본어를 이해하려고 하는 부분이 너무 감사했고, 그냥 다음에도 계속 여기로 오자는 마음이 들었다.\n\n그렇게 약 3년 동안 (다른 구로 이사간 후에도 여기로 찾아왔다) 이 미용실에서 평범한 머리부터 시작해서, 빨강, 보라, 은색, 파랑, 등등 탈색과 염색을 반복하며 여러 스타일을 시도했고, 나는 소위 말하는 단골이 되었다.\n\n일본을 떠나고 1년 후, 가족들과 함께 한국 여행을 가면서 일본에 들리게 되었다. \n1년 동안 자르지 않고 기르던 머리를, 일본에 도착하자마자 같은 미용실에 들려, 미용사분과 오랜만에 인사를 하고 머리를 잘랐다.\n\n어떻게 보면 나는 머리를 자르기 위해 미국에서 일본까지 날아간 셈이다.\n\n---\n\n지금은 집에서 대충 머리를 알아서 손질하고 있는데, 언젠가 또 일본에 가게되면, 다시 들리지 않을까 싶다.","src/content/writing/1.md","0770e70e4dfeed6d",{"html":20,"metadata":21},"\u003Cp>내가 집을 떠나 일본으로 이주 했을 때, 처음으로 거주하게 되었던 곳은 藤沢 (후지사와)였다.\n이곳에서 FLT (Foreign Language Teacher) 일을 하면서 약 1년간 살았었다.\u003C/p>\n\u003Cp>나는 우리 가족들 중에서도 유독 머리가 빨리 자라는 편이라서 2-3개월마다 머리를 잘라주어야만 했다. 평소라면 이렇게 자주가지는 않을테지만 아무래도 학교에서 일을 하다 보니, 계속해서 깔끔하게 머리를 유지시켜야 했다.\u003C/p>\n\u003Cp>일본 미용실 가격이 비싼편에 속하기 때문에 나는 500-1000엔 하는 저렴한 이발소에서 이발하고는 했다. 아이들을 가르치는 입장으로써 따로 머리를 꾸밀 수 있는 것도 아니고, 평소에 스타일링을 하는 편도 아니라서 그냥 대충 아무 데나 가서 이발하고는 했다.\u003C/p>\n\u003Cp>그러다 어느 날 문득, 일본 미용실에 가보고 싶어졌다. 어디가 좋을까 여기저기 기웃거리다가, 집 근처에 있는 미용실에 들어갔다. 하지만 예약을 해야 한다고 해서 그 자리에서 예약하고, 다음 날 다시 찾아갔다.\u003C/p>\n\u003Chr>\n\u003Cp>좋았다.\u003C/p>\n\u003Cp>그냥 좋았다.\u003C/p>\n\u003Cp>내가 일본에서 미용실을 안 갔던 이유는 일본어 문제가 가장 컸다. 한국 미용실에서도 “전체적으로 짧게 잘라주세요” 정도에 그치는데, 일본어로 세세하게 어떻게 설명해야 할지 몰랐다. 그래서 그냥 사진을 들고 갔는데, 하나하나 세세하게 물어보면서 내 부족한 일본어를 이해하려고 하는 부분이 너무 감사했고, 그냥 다음에도 계속 여기로 오자는 마음이 들었다.\u003C/p>\n\u003Cp>그렇게 약 3년 동안 (다른 구로 이사간 후에도 여기로 찾아왔다) 이 미용실에서 평범한 머리부터 시작해서, 빨강, 보라, 은색, 파랑, 등등 탈색과 염색을 반복하며 여러 스타일을 시도했고, 나는 소위 말하는 단골이 되었다.\u003C/p>\n\u003Cp>일본을 떠나고 1년 후, 가족들과 함께 한국 여행을 가면서 일본에 들리게 되었다.\n1년 동안 자르지 않고 기르던 머리를, 일본에 도착하자마자 같은 미용실에 들려, 미용사분과 오랜만에 인사를 하고 머리를 잘랐다.\u003C/p>\n\u003Cp>어떻게 보면 나는 머리를 자르기 위해 미국에서 일본까지 날아간 셈이다.\u003C/p>\n\u003Chr>\n\u003Cp>지금은 집에서 대충 머리를 알아서 손질하고 있는데, 언젠가 또 일본에 가게되면, 다시 들리지 않을까 싶다.\u003C/p>",{"headings":22,"localImagePaths":23,"remoteImagePaths":24,"frontmatter":25,"imagePaths":26},[],[],[],{"title":14,"pubDate":15},[],"10",{"id":27,"data":29,"body":32,"filePath":33,"digest":34,"rendered":35},{"title":30,"pubDate":31},"일찍 출근해야 하는 이유를 찾았다","Dec 12 2024 12:00","그동안 회사에 일찍 출근하며 남들보다 최소 한 시간 더 일을 했던 것 같다 ([나는 왜 한 시간 일찍 출근을 하는걸까](/writing/나는-왜-한-시간-일찍-출근을-하는걸까)). 일찍 출근하며 일하면서 번아웃 비스름한 것을 느낌과 동시에 “나는 굳이 여기서 이렇게까지 열심히 하는 이유가 무엇인가?” 하는 질문을 내게 던졌고 그 답을 아직 찾지는 못했다.\n\n평소보다 30~40분 정도 늦게 집을 나섰고, 회사에 도착하니 7시 50분 혹은 8시 5분 정도가 되었다. 이 방식으로 2주 정도 출퇴근을 하며 느낀 건, 운전 시간이 늘어났다는 것뿐이다. 새벽에 일어나 공부를 해보려고 했으나, 씻고 밥 먹고 곧 출근해야 한다는 생각 때문인지 크게 집중하지 못했다.\n\n그러던 어느 트래픽이 심했던 날, 차 안에서 생각했다.\n\n“차라리 회사에 일찍 가서 8시까지 공부를 할까? 운전 덜 하고 좋을 것 같은데….”그다음 날, 예전 일찍 출근하던 대로 일찍 집을 나섰고, 회사에, 6:50분에 도착했다.\n\n아무래도 오피스는 사람들이 출근하기도 하고 인사도 하고 해야 하니, 사람이 없는 랩으로 회사 노트북과 노트를 들고 가서 공부를 시작했다.\n\n사내 내부망을 쓰기 때문에 간혹 접근이 안 되는 사이트가 있어서 괜찮을까 생각했으나, 다행히 나한테 필요한 사이트는 접근할 수 있었다.\n\n조용했고, 집중이 아주 잘 되었다. 7시부터 8시까지 편하게 자기 계발을 할 수 있게 되었다.\n\n“열심히 하는 이유가 무엇인가”에 대한 답은 사실 아직도 잘 모르겠다. 하지만 적어도 지금 나의 상황에 있어서 회사에 일찍 출근해야 하는 (하면 좋은) 이유는 찾았다.\n\n:)","src/content/writing/10.md","53953706bd63c7d2",{"html":36,"metadata":37},"\u003Cp>그동안 회사에 일찍 출근하며 남들보다 최소 한 시간 더 일을 했던 것 같다 (\u003Ca href=\"/writing/%EB%82%98%EB%8A%94-%EC%99%9C-%ED%95%9C-%EC%8B%9C%EA%B0%84-%EC%9D%BC%EC%B0%8D-%EC%B6%9C%EA%B7%BC%EC%9D%84-%ED%95%98%EB%8A%94%EA%B1%B8%EA%B9%8C\">나는 왜 한 시간 일찍 출근을 하는걸까\u003C/a>). 일찍 출근하며 일하면서 번아웃 비스름한 것을 느낌과 동시에 “나는 굳이 여기서 이렇게까지 열심히 하는 이유가 무엇인가?” 하는 질문을 내게 던졌고 그 답을 아직 찾지는 못했다.\u003C/p>\n\u003Cp>평소보다 30~40분 정도 늦게 집을 나섰고, 회사에 도착하니 7시 50분 혹은 8시 5분 정도가 되었다. 이 방식으로 2주 정도 출퇴근을 하며 느낀 건, 운전 시간이 늘어났다는 것뿐이다. 새벽에 일어나 공부를 해보려고 했으나, 씻고 밥 먹고 곧 출근해야 한다는 생각 때문인지 크게 집중하지 못했다.\u003C/p>\n\u003Cp>그러던 어느 트래픽이 심했던 날, 차 안에서 생각했다.\u003C/p>\n\u003Cp>“차라리 회사에 일찍 가서 8시까지 공부를 할까? 운전 덜 하고 좋을 것 같은데….”그다음 날, 예전 일찍 출근하던 대로 일찍 집을 나섰고, 회사에, 6:50분에 도착했다.\u003C/p>\n\u003Cp>아무래도 오피스는 사람들이 출근하기도 하고 인사도 하고 해야 하니, 사람이 없는 랩으로 회사 노트북과 노트를 들고 가서 공부를 시작했다.\u003C/p>\n\u003Cp>사내 내부망을 쓰기 때문에 간혹 접근이 안 되는 사이트가 있어서 괜찮을까 생각했으나, 다행히 나한테 필요한 사이트는 접근할 수 있었다.\u003C/p>\n\u003Cp>조용했고, 집중이 아주 잘 되었다. 7시부터 8시까지 편하게 자기 계발을 할 수 있게 되었다.\u003C/p>\n\u003Cp>“열심히 하는 이유가 무엇인가”에 대한 답은 사실 아직도 잘 모르겠다. 하지만 적어도 지금 나의 상황에 있어서 회사에 일찍 출근해야 하는 (하면 좋은) 이유는 찾았다.\u003C/p>\n\u003Cp>:)\u003C/p>",{"headings":38,"localImagePaths":39,"remoteImagePaths":40,"frontmatter":41,"imagePaths":42},[],[],[],{"title":30,"pubDate":31},[],"12",{"id":43,"data":45,"body":49,"filePath":50,"digest":51,"rendered":52},{"title":46,"pubDate":47,"updatedDate":48},"나는 지금 어떻게 지내고 있나","April 01 2025 05:30","April 30 2025 21:20","[Derek Sivers](https://sive.rs/now2)의 [nownownow](https://nownownow.com/about)로 부터 영감을 받은 '나는 지금' 페이지.\u003Cbr />\n글이 읽기 귀찮다면, **Bold**체만 확인.\n\n---\n\n📆 2025-04-30, 21:20 | @living room in SoCal\n\nRe-started learning the Gregg's shorthand :)\nIt's fun!\n\n---\n\n📆 2025-04-27, 08:35 | @living room in SoCal\n\n지금까지 [노토](/note)들은 영어로 작성해왔었는데, 그냥 한국어로 작성하기로 했다.\n[Home](/)도 영어 위주에서 한국어 위주로 변경.\n\n**노트들 복습 겸 전부 한국어로 다시 쓰고 있다**.\n\n---\n\n📆 2025-04-26, 20:00 | @my bed in SoCal\n\n**이번 달 초에 회사 근처로 이사를 왔다**.\n지금까지 출퇴근하는데 약 3시간 정도 걸렸었는데, 지금은 왕복 30분 정도밖에 안 걸린다.\n\n새벽 4시30분쯤 일어나서 씻고, 간단히 밥 먹고 5시에 집을 나섰다. 회사에 도착하면 6시 30분쯤 되었는데, 업무 시작 전까지 하고 싶은 공부를 했었다.\n\n지금도 새벽 5시쯤 눈을 뜬다. 이전과는 다르게 바로 출근 준비를 하지 않아서 여유롭다. 회사까지 약 15분 정도 걸리므로, 2시간 반 정도의 시간이 있는데, 이 시간을 어떻게 활용해야 할지 모르겠다.\n\n공부하고 싶은 마음도 있고, 사이드 프로젝트를 하고 싶은 생각도 있지만, 생각뿐….\n\n**아침을 좀 더 효율적으로 쓰기 위해서 뭘, 어떻게 하면 좋을지 생각 중이다.**\n\n---\n\n3일 전, 언제나처럼 새벽에 일어나서 노트북을 쓰는데, 중간에 속이 갑자기 메스꺼웠다. 출근 전까지 눈이나 부치려고 노트북을 닫고 일어나, 침대로 향했다. 하지만 가는 길에, 머리가 핑 돌았고, 한 걸음 더 내딛는 순간 기절할 것 같아서 그 자리에 주저앉아버렸다. 식은땀과 토할 것 같은 기분에 그 자리에 누워있을 수밖에 없었는데, 아내의 도움으로, 침대로 향할 수 있었다.\n\n최근 아래 두 개의 사랑니를 발치하면서 ibuprofen을 좀 많이 복용했는데, 약의 부작용으로 위에 궤양이 생긴 게 아닌가 하는 의심이 든다. 정확히는 모르겠지만 궤양으로 인해 위에 출혈이 생겼고, 혈액이 부족하다 보니 빈혈 비슷한 증상으로 쓰러진 게 아니었을까…?\n\n위 사건(?) 이후, 아내가 식단을 엄청나게 챙겨주고 있다. 아직 풀 컨디션으로 돌아오지는 않았지만, 그래도 어지러운 건 별로 없고, 출근도 평소처럼 하고 있다.\n\n**오래오래 아내와 재밌게 살기 위해서라도, 건강을 좀 더 신경 써야겠다는 생각을 좀.. 하게 됐다.**\n\n---\n\n**Validation engineer로 일을 하면서**, 코딩에서 손을 뗀 지 좀 오래된 것 같다. 물론 혼자서 로그 보면서 디버깅한다든지, 업무에 사용할 스크립트를 작성하기도 해서 완전히 손을 뗀 거는 아니지만, 본래의 프론트엔드 개발자로서는 감을 완전히 잃어버린 것 같다.\n\n**일단 자료구조와 알고리즘 공부를 다시 하고 싶어서 C++로 codewars와 leetcode를 아주 조금씩 하고 있다**. 그런데 정말 정말 조금씩이라서 진도가 아예 안나간다. \n\n**아! 새벽에 일어나서 계획 세우고 자료구조/알고리즘 공부를 해볼까?**","src/content/writing/12.md","01729424dc959782",{"html":53,"metadata":54},"\u003Cp>\u003Ca href=\"https://sive.rs/now2\" rel=\"nofollow\">Derek Sivers\u003Cspan> ↗\u003C/span>\u003C/a>의 \u003Ca href=\"https://nownownow.com/about\" rel=\"nofollow\">nownownow\u003Cspan> ↗\u003C/span>\u003C/a>로 부터 영감을 받은 ‘나는 지금’ 페이지.\u003Cbr>\n글이 읽기 귀찮다면, \u003Cstrong>Bold\u003C/strong>체만 확인.\u003C/p>\n\u003Chr>\n\u003Cp>📆 2025-04-30, 21:20 | @living room in SoCal\u003C/p>\n\u003Cp>Re-started learning the Gregg’s shorthand :)\nIt’s fun!\u003C/p>\n\u003Chr>\n\u003Cp>📆 2025-04-27, 08:35 | @living room in SoCal\u003C/p>\n\u003Cp>지금까지 \u003Ca href=\"/note\">노토\u003C/a>들은 영어로 작성해왔었는데, 그냥 한국어로 작성하기로 했다.\n\u003Ca href=\"/\">Home\u003C/a>도 영어 위주에서 한국어 위주로 변경.\u003C/p>\n\u003Cp>\u003Cstrong>노트들 복습 겸 전부 한국어로 다시 쓰고 있다\u003C/strong>.\u003C/p>\n\u003Chr>\n\u003Cp>📆 2025-04-26, 20:00 | @my bed in SoCal\u003C/p>\n\u003Cp>\u003Cstrong>이번 달 초에 회사 근처로 이사를 왔다\u003C/strong>.\n지금까지 출퇴근하는데 약 3시간 정도 걸렸었는데, 지금은 왕복 30분 정도밖에 안 걸린다.\u003C/p>\n\u003Cp>새벽 4시30분쯤 일어나서 씻고, 간단히 밥 먹고 5시에 집을 나섰다. 회사에 도착하면 6시 30분쯤 되었는데, 업무 시작 전까지 하고 싶은 공부를 했었다.\u003C/p>\n\u003Cp>지금도 새벽 5시쯤 눈을 뜬다. 이전과는 다르게 바로 출근 준비를 하지 않아서 여유롭다. 회사까지 약 15분 정도 걸리므로, 2시간 반 정도의 시간이 있는데, 이 시간을 어떻게 활용해야 할지 모르겠다.\u003C/p>\n\u003Cp>공부하고 싶은 마음도 있고, 사이드 프로젝트를 하고 싶은 생각도 있지만, 생각뿐….\u003C/p>\n\u003Cp>\u003Cstrong>아침을 좀 더 효율적으로 쓰기 위해서 뭘, 어떻게 하면 좋을지 생각 중이다.\u003C/strong>\u003C/p>\n\u003Chr>\n\u003Cp>3일 전, 언제나처럼 새벽에 일어나서 노트북을 쓰는데, 중간에 속이 갑자기 메스꺼웠다. 출근 전까지 눈이나 부치려고 노트북을 닫고 일어나, 침대로 향했다. 하지만 가는 길에, 머리가 핑 돌았고, 한 걸음 더 내딛는 순간 기절할 것 같아서 그 자리에 주저앉아버렸다. 식은땀과 토할 것 같은 기분에 그 자리에 누워있을 수밖에 없었는데, 아내의 도움으로, 침대로 향할 수 있었다.\u003C/p>\n\u003Cp>최근 아래 두 개의 사랑니를 발치하면서 ibuprofen을 좀 많이 복용했는데, 약의 부작용으로 위에 궤양이 생긴 게 아닌가 하는 의심이 든다. 정확히는 모르겠지만 궤양으로 인해 위에 출혈이 생겼고, 혈액이 부족하다 보니 빈혈 비슷한 증상으로 쓰러진 게 아니었을까…?\u003C/p>\n\u003Cp>위 사건(?) 이후, 아내가 식단을 엄청나게 챙겨주고 있다. 아직 풀 컨디션으로 돌아오지는 않았지만, 그래도 어지러운 건 별로 없고, 출근도 평소처럼 하고 있다.\u003C/p>\n\u003Cp>\u003Cstrong>오래오래 아내와 재밌게 살기 위해서라도, 건강을 좀 더 신경 써야겠다는 생각을 좀.. 하게 됐다.\u003C/strong>\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cstrong>Validation engineer로 일을 하면서\u003C/strong>, 코딩에서 손을 뗀 지 좀 오래된 것 같다. 물론 혼자서 로그 보면서 디버깅한다든지, 업무에 사용할 스크립트를 작성하기도 해서 완전히 손을 뗀 거는 아니지만, 본래의 프론트엔드 개발자로서는 감을 완전히 잃어버린 것 같다.\u003C/p>\n\u003Cp>\u003Cstrong>일단 자료구조와 알고리즘 공부를 다시 하고 싶어서 C++로 codewars와 leetcode를 아주 조금씩 하고 있다\u003C/strong>. 그런데 정말 정말 조금씩이라서 진도가 아예 안나간다.\u003C/p>\n\u003Cp>\u003Cstrong>아! 새벽에 일어나서 계획 세우고 자료구조/알고리즘 공부를 해볼까?\u003C/strong>\u003C/p>",{"headings":55,"localImagePaths":56,"remoteImagePaths":57,"frontmatter":58,"imagePaths":59},[],[],[],{"title":46,"pubDate":47,"updatedDate":48},[],"11",{"id":60,"data":62,"body":65,"filePath":66,"digest":67,"rendered":68},{"title":63,"pubDate":64},"라식","Jan 02 2025 12:50:00","라식 수술을 한 지 3.5년 정도 된 것 같은데, 어제 가족으로부터 재밌는 말을 들었다.\n\n> \"너 라식 했어?\"\n\n음? 😳 \n\n그래서 일본에서 라식 수술을 했던 경험을 적어보고자 한다. 오래되었기에 정확히 기억나지는 않지만, 최대한 기억나는 데로 끄적여보겠다.\n\n---\n\n때는 2021년, 코로나로 한창 떠들썩하던 시기이다.\n나는 초등학교에서 FLT로 일을 하고 있었고, 당연히 안경을 쓰고 있었다.\n\n안경 + 마스크 조합은 경험해 본 사람은 알겠지만 진짜 엄청 불편하다. 렌즈를 쓰기도 했었는데, 이것도 매일 하다 보면 불편하다. 무엇보다 지속해서 돈이 나가는 것도 맘에 들지 않았다.\n\n이와 같은 생활을 하는 와중에, 동료 교사가 라식을 했다는 얘기를 듣고 라식에 관심을 가지기 시작했고, 이것저것 알아보기 시작했다. 길게 휴가를 낼 수 없는 상황에서 라섹보다는 라식에 마음이 갔고, 그중에서 스마일 라식이라는 것이 눈에 띄었다.\n\n일반 라식의 경우 각막 절편(뚜껑)을 생성하지만, 스마일라식은 절편을 생성하지 않고 시력 교정이 가능하게 하는 수술 방법이라고 이해하면 된다. 절편을 생성하지 않기 때문에 치유 속도도 비교적 빠른 편이다.\n\n오래 고민하다가 라식을 해야겠다는 마음을 먹었고, 그중에서 스마일 라식을 해야겠다고 속으로 정했다. 하지만, 일본에는 명칭이 다른 건지 모르겠지만 스마일 라식이라는 수술 방법을 제공하는 곳은 없었다.\n\n결국 내가 선택한 건 アマリス750Ｚレーシック (아마리스 750Z 라식)이다. 수술 방법의 이름이라기보다는 사용하는 기계의 명칭 같기는 하지만, 어쨌든 진행하는 수술의 이름은 위와 같았다.\n\n눈을 검사하기 위해 이른 아침 집을 떠나 병원에 도착했다. 정확히 기억은 안 나는 데 5시간 정도 있었던 것 같다. 그것도 끝이 아니어서 다음 날 다시 방문해야 했다. 모든 검사를 끝마치고 마지막에 의사분이 검사결과지를 보면서 내가 선택한 アマリス750Ｚレーシック 수술을 할 수 있는지 판단한다. 나는 양쪽 눈 다 문제없었기에, 수술 날짜를 잡았다 (사실 검사만 받고 다시 생각해 보려고 했으나, 수술 날짜를 잡아주기에 그냥 해버렸다).\n\n---\n\n수술 당일.\n\n병원에 도착하고 대기하다 보면 이름을 부르는데, 그때 수술실로 안내를 받는다. 바로 수술을 진행하지는 않고, 수술실 앞 의자에 앉아서 대기한다. 대기를 하다 보면 간호사분이 와서 눈에 어떤 약물 (안약 같은..)을 투여하는데 뭐였는지 기억은 안 난다. 동공이 커지게 하는 거였던가…. 어쨌든 약물 투여 후, 이름이 불릴 때까지 눈을 감으면서 대기하라고 한다. 5~10분 정도 기다렸던 것 같다.\n\n이름이 불렸고, 수술실에 들어갔다. 아래와 같은 큰 기계가 있었고, 나는 수술대 위에 몸을 뉘었다.\n\n![img](/images/amaris-750z.webp)\n\n첫 번째로 머리를 고정했고, 그다음 수술 중 눈꺼풀이 감기지 않도록 어느 기구를 오른쪽 눈에 끼우는 것이 느껴졌다.\n그다음 약물인지 단순히 물인지 모르겠지만 눈을 세척하는 듯한 느낌이 들었고, 이어서 \"초록색 불빛을 계속 봐주세요\"라는 말과 함께 수술이 진행됐다.\n\n실제로 초록색이었는지는 모르지만, 눈앞에 보이는 불빛을 계속해서 바라봤다.\n\n어느 순간 타는 냄새가 살짝 나기 시작했고, 이어서 안구에 뭔가 긁는 듯한 (마치 딱딱한 벽을 손톱으로 긁는 것 같은) 느낌이 들기 시작했다. 그리고, 눈앞이 보이지 않았다. 하지만 완전한 어둠은 아니고 하얀 불빛 같은 게 보이기는 했기에 거기에 계속 집중했다.\n몇 초 후, 다시 눈을 물로 세척하는 듯한 느낌이 들었고, 이어서 안 보이던 불빛이 보이기 시작했다. 오른쪽 눈의 수술은 끝났다.\n\n왼쪽 눈도 위와 동일한 과정으로 진행됐다.\n\n수술 시작부터, \"끝났습니다\"라는 말을 듣기까지 걸린 시간은, 체감상 1분이 채 되지 않는 것 같다. 정말 말도 안 되게 빨리 끝났다.\n\n---\n\n수술이 끝난 직후 어느 대기실로 안내를 받았는데, 눈을 뜨고 간호사 뒤를 따라갔었는지, 아니면 눈을 감은 상태에서 안내를 받았는지 기억은 안 난다. 어쨌든 대기실에 도착해서, 15분 정도, 다른 간호사분이 와서 안내할 때까지는 계속 눈을 감고 있어 달라고 했다.\n\n어느 정도의 시간이 지난 후, 간호사분이 와서 눈을 떠도 괜찮다고 해서 눈을 떴다. 시야는 여전히 흐렸지만, 평소 안경을 벗었을 때보다는 훨씬 잘 보였다. 이후 어떤 영상 (눈 관리에 관한 영상이었던 것 같은데...)을 보고 나서 눈에 뿌리는 약을 처방받고, 며칠 후 (정확히 기억은 안 난다),  시력 검사를 위해 다시 와달라는 말과 함께 집에 가도 된다고 해서 병원을 나왔다.\n\n집에 가기 위해 지하철에 도착했을 때 깜짝 놀랐다. 여전히 흐릿하기는 하지만, 눈을 살짝 찌푸리면 노선도를 읽을 수 있었다. 평소에는 불가능했던 일. 어쨌든 그렇게 지하철을 탔고 집에 오는 동안 최대만 눈을 감고 있었다.\n\n집에 도착해서는 핸드폰이며 컴퓨터며 스크린과는 최대한 멀리했고, 저녁 일찍 잠에 들었다.\n\n---\n\n다음 날.\n\n눈을 떴고 신기한 경험을 했다. \n\n천장이 너무 깔끔하게 보였다. 너무 신기해서 발코니에 나가 밖을 바라봤는데, 너무 잘보였다.\n\n며칠 후 병원에 도착해서 시력검사를 했고, 정확히 기억은 안나지만 양쪽 1.5인가 1.8인가 나왔던 것 같다.\n\n2025년 현재에도 시력은 (아마도) 계속 유지되고 있다. 최근에 시력 검사를 한 적이 없어서 정확히는 모르겠지만 크게 나빠진 것 같지는 않다.\n\n\n끝.","src/content/writing/11.md","b76912ea5845e1f5",{"html":69,"metadata":70},"\u003Cp>라식 수술을 한 지 3.5년 정도 된 것 같은데, 어제 가족으로부터 재밌는 말을 들었다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“너 라식 했어?”\u003C/p>\n\u003C/blockquote>\n\u003Cp>음? 😳\u003C/p>\n\u003Cp>그래서 일본에서 라식 수술을 했던 경험을 적어보고자 한다. 오래되었기에 정확히 기억나지는 않지만, 최대한 기억나는 데로 끄적여보겠다.\u003C/p>\n\u003Chr>\n\u003Cp>때는 2021년, 코로나로 한창 떠들썩하던 시기이다.\n나는 초등학교에서 FLT로 일을 하고 있었고, 당연히 안경을 쓰고 있었다.\u003C/p>\n\u003Cp>안경 + 마스크 조합은 경험해 본 사람은 알겠지만 진짜 엄청 불편하다. 렌즈를 쓰기도 했었는데, 이것도 매일 하다 보면 불편하다. 무엇보다 지속해서 돈이 나가는 것도 맘에 들지 않았다.\u003C/p>\n\u003Cp>이와 같은 생활을 하는 와중에, 동료 교사가 라식을 했다는 얘기를 듣고 라식에 관심을 가지기 시작했고, 이것저것 알아보기 시작했다. 길게 휴가를 낼 수 없는 상황에서 라섹보다는 라식에 마음이 갔고, 그중에서 스마일 라식이라는 것이 눈에 띄었다.\u003C/p>\n\u003Cp>일반 라식의 경우 각막 절편(뚜껑)을 생성하지만, 스마일라식은 절편을 생성하지 않고 시력 교정이 가능하게 하는 수술 방법이라고 이해하면 된다. 절편을 생성하지 않기 때문에 치유 속도도 비교적 빠른 편이다.\u003C/p>\n\u003Cp>오래 고민하다가 라식을 해야겠다는 마음을 먹었고, 그중에서 스마일 라식을 해야겠다고 속으로 정했다. 하지만, 일본에는 명칭이 다른 건지 모르겠지만 스마일 라식이라는 수술 방법을 제공하는 곳은 없었다.\u003C/p>\n\u003Cp>결국 내가 선택한 건 アマリス750Ｚレーシック (아마리스 750Z 라식)이다. 수술 방법의 이름이라기보다는 사용하는 기계의 명칭 같기는 하지만, 어쨌든 진행하는 수술의 이름은 위와 같았다.\u003C/p>\n\u003Cp>눈을 검사하기 위해 이른 아침 집을 떠나 병원에 도착했다. 정확히 기억은 안 나는 데 5시간 정도 있었던 것 같다. 그것도 끝이 아니어서 다음 날 다시 방문해야 했다. 모든 검사를 끝마치고 마지막에 의사분이 검사결과지를 보면서 내가 선택한 アマリス750Ｚレーシック 수술을 할 수 있는지 판단한다. 나는 양쪽 눈 다 문제없었기에, 수술 날짜를 잡았다 (사실 검사만 받고 다시 생각해 보려고 했으나, 수술 날짜를 잡아주기에 그냥 해버렸다).\u003C/p>\n\u003Chr>\n\u003Cp>수술 당일.\u003C/p>\n\u003Cp>병원에 도착하고 대기하다 보면 이름을 부르는데, 그때 수술실로 안내를 받는다. 바로 수술을 진행하지는 않고, 수술실 앞 의자에 앉아서 대기한다. 대기를 하다 보면 간호사분이 와서 눈에 어떤 약물 (안약 같은..)을 투여하는데 뭐였는지 기억은 안 난다. 동공이 커지게 하는 거였던가…. 어쨌든 약물 투여 후, 이름이 불릴 때까지 눈을 감으면서 대기하라고 한다. 5~10분 정도 기다렸던 것 같다.\u003C/p>\n\u003Cp>이름이 불렸고, 수술실에 들어갔다. 아래와 같은 큰 기계가 있었고, 나는 수술대 위에 몸을 뉘었다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/amaris-750z.webp\" alt=\"img\">\u003C/p>\n\u003Cp>첫 번째로 머리를 고정했고, 그다음 수술 중 눈꺼풀이 감기지 않도록 어느 기구를 오른쪽 눈에 끼우는 것이 느껴졌다.\n그다음 약물인지 단순히 물인지 모르겠지만 눈을 세척하는 듯한 느낌이 들었고, 이어서 “초록색 불빛을 계속 봐주세요”라는 말과 함께 수술이 진행됐다.\u003C/p>\n\u003Cp>실제로 초록색이었는지는 모르지만, 눈앞에 보이는 불빛을 계속해서 바라봤다.\u003C/p>\n\u003Cp>어느 순간 타는 냄새가 살짝 나기 시작했고, 이어서 안구에 뭔가 긁는 듯한 (마치 딱딱한 벽을 손톱으로 긁는 것 같은) 느낌이 들기 시작했다. 그리고, 눈앞이 보이지 않았다. 하지만 완전한 어둠은 아니고 하얀 불빛 같은 게 보이기는 했기에 거기에 계속 집중했다.\n몇 초 후, 다시 눈을 물로 세척하는 듯한 느낌이 들었고, 이어서 안 보이던 불빛이 보이기 시작했다. 오른쪽 눈의 수술은 끝났다.\u003C/p>\n\u003Cp>왼쪽 눈도 위와 동일한 과정으로 진행됐다.\u003C/p>\n\u003Cp>수술 시작부터, “끝났습니다”라는 말을 듣기까지 걸린 시간은, 체감상 1분이 채 되지 않는 것 같다. 정말 말도 안 되게 빨리 끝났다.\u003C/p>\n\u003Chr>\n\u003Cp>수술이 끝난 직후 어느 대기실로 안내를 받았는데, 눈을 뜨고 간호사 뒤를 따라갔었는지, 아니면 눈을 감은 상태에서 안내를 받았는지 기억은 안 난다. 어쨌든 대기실에 도착해서, 15분 정도, 다른 간호사분이 와서 안내할 때까지는 계속 눈을 감고 있어 달라고 했다.\u003C/p>\n\u003Cp>어느 정도의 시간이 지난 후, 간호사분이 와서 눈을 떠도 괜찮다고 해서 눈을 떴다. 시야는 여전히 흐렸지만, 평소 안경을 벗었을 때보다는 훨씬 잘 보였다. 이후 어떤 영상 (눈 관리에 관한 영상이었던 것 같은데…)을 보고 나서 눈에 뿌리는 약을 처방받고, 며칠 후 (정확히 기억은 안 난다),  시력 검사를 위해 다시 와달라는 말과 함께 집에 가도 된다고 해서 병원을 나왔다.\u003C/p>\n\u003Cp>집에 가기 위해 지하철에 도착했을 때 깜짝 놀랐다. 여전히 흐릿하기는 하지만, 눈을 살짝 찌푸리면 노선도를 읽을 수 있었다. 평소에는 불가능했던 일. 어쨌든 그렇게 지하철을 탔고 집에 오는 동안 최대만 눈을 감고 있었다.\u003C/p>\n\u003Cp>집에 도착해서는 핸드폰이며 컴퓨터며 스크린과는 최대한 멀리했고, 저녁 일찍 잠에 들었다.\u003C/p>\n\u003Chr>\n\u003Cp>다음 날.\u003C/p>\n\u003Cp>눈을 떴고 신기한 경험을 했다.\u003C/p>\n\u003Cp>천장이 너무 깔끔하게 보였다. 너무 신기해서 발코니에 나가 밖을 바라봤는데, 너무 잘보였다.\u003C/p>\n\u003Cp>며칠 후 병원에 도착해서 시력검사를 했고, 정확히 기억은 안나지만 양쪽 1.5인가 1.8인가 나왔던 것 같다.\u003C/p>\n\u003Cp>2025년 현재에도 시력은 (아마도) 계속 유지되고 있다. 최근에 시력 검사를 한 적이 없어서 정확히는 모르겠지만 크게 나빠진 것 같지는 않다.\u003C/p>\n\u003Cp>끝.\u003C/p>",{"headings":71,"localImagePaths":72,"remoteImagePaths":73,"frontmatter":74,"imagePaths":75},[],[],[],{"title":63,"pubDate":64},[],"2",{"id":76,"data":78,"body":81,"filePath":82,"digest":83,"rendered":84},{"title":79,"pubDate":80},"Chat GPT ruined my confidence in English","May 18 2024 06:30:00","I was born in Korea and immigrated to the States when I was around 10. English is not my first language.\n\nThe grammar was never meant to be my friend. I hated it. I was a bit shy to speak and write because I didn't wanted show that my English was bad.\n\nBut as I grow, I started care less about the grammar itself. I realized that what's important are expressing my idea in my own words, and people don't expect people to speak in perfect grammar and advanced vocabularies. So I started expressing myself with broken English with confidence.\n\nNow, Chat GPT came out. Ever since this demonic tool came out, I started relying on it. Before I post anything in English in my blog or even in SNS, I found myself utilizing Chat GPT to perfect my grammar and even use vocabularies that I normally don't use. \n\nThere's no \"I\" in those sentences. It's not me. I'm back to younger version of me who's afraid of exposing my bad English.\n\nI need to stop relying on the machine, especially when I want to talk about my own experience.","src/content/writing/2.md","3693d01c684b0d4c",{"html":85,"metadata":86},"\u003Cp>I was born in Korea and immigrated to the States when I was around 10. English is not my first language.\u003C/p>\n\u003Cp>The grammar was never meant to be my friend. I hated it. I was a bit shy to speak and write because I didn’t wanted show that my English was bad.\u003C/p>\n\u003Cp>But as I grow, I started care less about the grammar itself. I realized that what’s important are expressing my idea in my own words, and people don’t expect people to speak in perfect grammar and advanced vocabularies. So I started expressing myself with broken English with confidence.\u003C/p>\n\u003Cp>Now, Chat GPT came out. Ever since this demonic tool came out, I started relying on it. Before I post anything in English in my blog or even in SNS, I found myself utilizing Chat GPT to perfect my grammar and even use vocabularies that I normally don’t use.\u003C/p>\n\u003Cp>There’s no “I” in those sentences. It’s not me. I’m back to younger version of me who’s afraid of exposing my bad English.\u003C/p>\n\u003Cp>I need to stop relying on the machine, especially when I want to talk about my own experience.\u003C/p>",{"headings":87,"localImagePaths":88,"remoteImagePaths":89,"frontmatter":90,"imagePaths":91},[],[],[],{"title":79,"pubDate":80},[],"3",{"id":92,"data":94,"body":97,"filePath":98,"digest":99,"rendered":100},{"title":95,"pubDate":96},"우연히 일본어를 할 줄 알게 되었다","Aug 15 2024 17:32","## 귀가 뜨이다\n\n어렸을 때 우리 집에는 컴퓨터가 딱 한 대 있었는데, 나랑 A가 두 시간씩 번갈아 가면서 사용했다.\n\n나에게 주어진 두 시간을 다 쓰고 나면, 할 게 없어 심심한 나는 옆에 앉아서 A가 컴퓨터로 하는 것을 같이 보고는 했다. 항상 그랬던 것은 아니고 주로 방송이나 예능을 볼 때 옆에 앉았는데, 대부분이 일본 방송이었다. 이때 처음으로 일본 문화와 일본어를 접하게 되었다.\n\n거의 매일 일본어를 들으며 생활하다 보니 자연스럽게 일본이란 나라 그리고 언어에 흥미를 느끼게 되었던 것 같다. 그러면서 때때로 드라마나 애니에서 들었던 단어나 문장들을 의미도 모른 채 따라 말하거나, 히라가나와 가타카나를 찾아보면서 그림 그리듯 따라 써보기도 했다. 이것도 공부라면 공부라고 할 수 있을 것 같다.\n\n이런 비슷한 생활을 고등학생이 되기 전까지 했고 고등학생이 되면서부터는 장르를 가리지 않고 혼자 많이 찾아봤다.\n\n이런 생활을 하면서 당연히 일본어를 할 수 있었던 것은 아니지만, 귀가 뜨여서 일상에서의 대화는 70% 정도 이해할 수 있었다.\n\n\n## 말을 할 수 있게 된 계기\n\n이 상태로 몇 년이 지나, 대학교에 입학했고 4학년이 됐다. 여전히 일본어를 할 줄은 몰랐지만, 웬만한 대화는 전부 이해할 수 있는 상태 였다.\n\n졸업 요건을 충분히 만족했고, 더 이상 듣고 싶은 수업이 없던 때에 [JAPN 10A. 기초 일본어](https://catalog.ucsd.edu/courses/JAPN.html) 수업을 발견했다. 어차피 할 것도 없었고, 재밌어 보였기에 바로 신청했고 수업을 듣게 되었다.\n\n이 수업을 들으면서 타인의 일본어는 이해할 수 있지만 직접 말은 할 수 없는 이유를 알게 되었다. 바로 기본적인 문법을 모르기 때문이었다.\n\n누군가가 나에게 “これ食べてもいいですか?” 라고, 물으면, 수많은 애니, 드라마, 영화, 등등의 매체를 통해 들었던 경험으로 “이거 먹어도 되나요?”라고 알아서 번역되어 내 뇌 속으로 들어온다.\n\n하지만 기본적인 문법을 모르는 나로서는 반대로 “이거 먹어도 되나요?”가 어떤 과정을 거쳐 “これ食べてもいいですか”가 되는지 알 길이 없었고, 그래서 말을 할 수 없었다.\n\n하지만 기초 일본어 수업을 들으면서 기본적인 문장의 구조와 상황에 따라 동사가 어떻게 변형되는지 이해했고, 이해가 되자 머릿속 여기저기 흩어져 있던 일본 단어와 문장들이 서로 연결되기 시작했다. 이때부터 하고 싶은 말은 자연스럽게 일본어로 할 수 있게 되었다. 물론 모르는 단어가 있기도 하지만, 이럴 때는 이미 알고 있는 쉬운 단어들로 설명하면서 대화했다.\n\n## 현재\n\n2024년 현재, 졸업하고 약 4~5년이 지났다. 사실 예전이나 지금이나 공부를 하지 않은 건 여전하기 때문에 대학교 당시와 비교해서 크게 실력이 늘었다고는 하지 못할 것 같다. 하지만 일본에서 일했던 경험 때문인지, 좀 더 자연스럽게 말할 수 있게 되었다.","src/content/writing/3.md","d5a71509b75d23d0",{"html":101,"metadata":102},"\u003Ch2 id=\"귀가-뜨이다\">귀가 뜨이다\u003C/h2>\n\u003Cp>어렸을 때 우리 집에는 컴퓨터가 딱 한 대 있었는데, 나랑 A가 두 시간씩 번갈아 가면서 사용했다.\u003C/p>\n\u003Cp>나에게 주어진 두 시간을 다 쓰고 나면, 할 게 없어 심심한 나는 옆에 앉아서 A가 컴퓨터로 하는 것을 같이 보고는 했다. 항상 그랬던 것은 아니고 주로 방송이나 예능을 볼 때 옆에 앉았는데, 대부분이 일본 방송이었다. 이때 처음으로 일본 문화와 일본어를 접하게 되었다.\u003C/p>\n\u003Cp>거의 매일 일본어를 들으며 생활하다 보니 자연스럽게 일본이란 나라 그리고 언어에 흥미를 느끼게 되었던 것 같다. 그러면서 때때로 드라마나 애니에서 들었던 단어나 문장들을 의미도 모른 채 따라 말하거나, 히라가나와 가타카나를 찾아보면서 그림 그리듯 따라 써보기도 했다. 이것도 공부라면 공부라고 할 수 있을 것 같다.\u003C/p>\n\u003Cp>이런 비슷한 생활을 고등학생이 되기 전까지 했고 고등학생이 되면서부터는 장르를 가리지 않고 혼자 많이 찾아봤다.\u003C/p>\n\u003Cp>이런 생활을 하면서 당연히 일본어를 할 수 있었던 것은 아니지만, 귀가 뜨여서 일상에서의 대화는 70% 정도 이해할 수 있었다.\u003C/p>\n\u003Ch2 id=\"말을-할-수-있게-된-계기\">말을 할 수 있게 된 계기\u003C/h2>\n\u003Cp>이 상태로 몇 년이 지나, 대학교에 입학했고 4학년이 됐다. 여전히 일본어를 할 줄은 몰랐지만, 웬만한 대화는 전부 이해할 수 있는 상태 였다.\u003C/p>\n\u003Cp>졸업 요건을 충분히 만족했고, 더 이상 듣고 싶은 수업이 없던 때에 \u003Ca href=\"https://catalog.ucsd.edu/courses/JAPN.html\" rel=\"nofollow\">JAPN 10A. 기초 일본어\u003Cspan> ↗\u003C/span>\u003C/a> 수업을 발견했다. 어차피 할 것도 없었고, 재밌어 보였기에 바로 신청했고 수업을 듣게 되었다.\u003C/p>\n\u003Cp>이 수업을 들으면서 타인의 일본어는 이해할 수 있지만 직접 말은 할 수 없는 이유를 알게 되었다. 바로 기본적인 문법을 모르기 때문이었다.\u003C/p>\n\u003Cp>누군가가 나에게 “これ食べてもいいですか?” 라고, 물으면, 수많은 애니, 드라마, 영화, 등등의 매체를 통해 들었던 경험으로 “이거 먹어도 되나요?”라고 알아서 번역되어 내 뇌 속으로 들어온다.\u003C/p>\n\u003Cp>하지만 기본적인 문법을 모르는 나로서는 반대로 “이거 먹어도 되나요?”가 어떤 과정을 거쳐 “これ食べてもいいですか”가 되는지 알 길이 없었고, 그래서 말을 할 수 없었다.\u003C/p>\n\u003Cp>하지만 기초 일본어 수업을 들으면서 기본적인 문장의 구조와 상황에 따라 동사가 어떻게 변형되는지 이해했고, 이해가 되자 머릿속 여기저기 흩어져 있던 일본 단어와 문장들이 서로 연결되기 시작했다. 이때부터 하고 싶은 말은 자연스럽게 일본어로 할 수 있게 되었다. 물론 모르는 단어가 있기도 하지만, 이럴 때는 이미 알고 있는 쉬운 단어들로 설명하면서 대화했다.\u003C/p>\n\u003Ch2 id=\"현재\">현재\u003C/h2>\n\u003Cp>2024년 현재, 졸업하고 약 4~5년이 지났다. 사실 예전이나 지금이나 공부를 하지 않은 건 여전하기 때문에 대학교 당시와 비교해서 크게 실력이 늘었다고는 하지 못할 것 같다. 하지만 일본에서 일했던 경험 때문인지, 좀 더 자연스럽게 말할 수 있게 되었다.\u003C/p>",{"headings":103,"localImagePaths":113,"remoteImagePaths":114,"frontmatter":115,"imagePaths":116},[104,108,111],{"depth":105,"slug":106,"text":107},2,"귀가-뜨이다","귀가 뜨이다",{"depth":105,"slug":109,"text":110},"말을-할-수-있게-된-계기","말을 할 수 있게 된 계기",{"depth":105,"slug":112,"text":112},"현재",[],[],{"title":95,"pubDate":96},[],"5",{"id":117,"data":119,"body":123,"filePath":124,"digest":125,"rendered":126},{"title":120,"pubDate":121,"updatedDate":122},"모니터에서 가상현실로","Dec 28 2022 14:35","April 28 2025 21:30","**update**\n\n현재는 1920x1080 화면 3대를 가로로 연달아 두고 쓰고있다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img8.gif)\n\n---\n\n2022년 11월. 일본에 거주하고 있을 때였다.\n\n일본에 얼마나 있을지 모르고, 이사도 자주 가고 하다 보니 짐을 최소한으로 유지했다. 하지만 항상 골을 썩이던 짐들이 있었으니, 바로 모니터이다. 개발자로 일을 하다 보면 모니터 한두 개 쯤은 갖고 싶어지는데, 나 역시 그랬고 결국 24인치 모니터와 32인치 모니터를 설치해서 사용하고 있었다.\n\n일본에서 미국으로 귀국하는 과정에서 짐을 정리하는데, 이 두 모니터가 짐이었다. 워낙 부피가 나가는 물건이다 보니 가지고 가자니 귀찮고, 중고로 처분하고 가자니 아깝고. 하지만 돌아가면 또 모니터를 사야 하고…. 어떻게 할지 고민하던 와중에 한  [트윗](https://twitter.com/hmartapp/status/1444891624538996740?s=20)을 보게 되었다.\n\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img1.webp)\n\n가상현실에 구현된 작업 환경. 이 트윗을 보고 내 책상을 보니, 모니터며 잡동사니며 물건이 너무 많다고 느껴졌다.\n\n미니멀함을 추구하지만, 작업환경에서만은 그렇지 못했던 나. 이 트윗을 계기로 작업환경도 미니멀하게 가보자 하는 생각을 하게 됐다.\n\n## 가상현실에서의 코딩 가능할까?\n\n집 앞 동네 구멍가게에서 과자 사 먹듯 쉽게 살 수 있을 정도로 값싼 기기가 아니다 보니 고민을 해봐야 했다. 괜히 돈 주고 샀다가 후회하고 싶지 않았다.\n\n먼저 해당 트윗을 쓴 당사자에게 직접적으로 물어보았다. _“글씨는 잘 보이나요?”_\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img2.webp)\n\n잘 보인다고 한다 ✅\n\n## 눈에 무리가 갈까?\n\n보통 개발을 하면 하루 종일 모니터를 바라보고 있게 된다. 그런데 가상현실에서의 작업환경이라면 VR 기기를 계속 쓰고 있다는 것인데… 눈에 무리가 가지 않을까? 최근에 라식 수술을 받았기 때문에 눈에 대해서는 특히나 더 예민했다.\n\n_“눈이 뻐근하거나 하지는 않나요?”_\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img3.webp)\n\n트윗의 주인도 이 문제를 인지하고 있었고, 평소에 포모도로 테크닉을 사용해서 주기적으로 휴식을 취해주고 있다고 하는데 좋은 방법인 것 같다.\n\n기기의 무게도 있다보니 계속 쓰고 있다보면 불편할테고 또한 중간중간 휴식을 취하는 것이 일하는 데 도움이 된다고 들었던 것 같기도 하다. 애초에 나 또한 50분 주기로 휴식을 취하니 이때 VR 기기를 벗어두면 괜찮을 것 같다.\n\n## 트윗 주인은 아직도 VR을 사용하고 있을까?\n\n고민하고 있던 부분에 대한 해답은 찾았고, 마지막으로 확인해 볼 것이 있었다. 해당 트윗이 올라온 지 약 1년이 지난 지금, 본 트윗의 주인은 아직도 가상현실에서 개발하고 있을까?\n\n곧바로 DM을 보내보았고, 하루 뒤 연락이 왔다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img5.webp)\n\n## VR기기를 구입하다\n\n고심 끝에 “가상현실에서의 개발, 시도해 볼 가치는 있다”라고 결론을 내렸고 곧바로 아마존에서 [Meta Quest 2](https://www.meta.com/jp/en/quest/products/quest-2/)를 구매했다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img6.webp)\n\n가상현실 SW로는 [Immersed VR](https://immersed.com/)을 선택해서 설치했고, 기기와 성공적으로 연결했다. 나에게 알맞은 각도, 위치, 등등 세팅하는 데 시간이 걸렸지만 결국 해냈다.\n\n![](/images/transitioning_from_monitors_to_a_vr_workspace/img7.gif)\n\n글씨와 코드를 읽는 데 불편함은 전혀 없었고 오히려 생각보다 너무 잘 보여서 놀랐다. 네트워크 관련해서도 따로 세팅한 것은 없고, 사용하고 있는 포켓 와이파이에 연결했더니 지연 없이 잘 돌아간다. 이럴 줄 알았으면 진작 할 걸 그랬다.\n\n## 주의사항\n\nVR 기기를 한 번도 사용해 본 적이 없다면, 한 번 정도는 경험해 보고 구매하는 것을 추천한다. \n\nVR에서의 경험은 사람마다 천지 차이이고 실제로 어지럼증을 호소하는 사람도 있기 때문에, 주변 아는 사람 혹은 VR 기기 체험이 가능한 곳에 가서 사용해 보고 결정하기를 바란다.","src/content/writing/5.md","2cda46b0a76d02cb",{"html":127,"metadata":128},"\u003Cp>\u003Cstrong>update\u003C/strong>\u003C/p>\n\u003Cp>현재는 1920x1080 화면 3대를 가로로 연달아 두고 쓰고있다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img8.gif\" alt=\"\">\u003C/p>\n\u003Chr>\n\u003Cp>2022년 11월. 일본에 거주하고 있을 때였다.\u003C/p>\n\u003Cp>일본에 얼마나 있을지 모르고, 이사도 자주 가고 하다 보니 짐을 최소한으로 유지했다. 하지만 항상 골을 썩이던 짐들이 있었으니, 바로 모니터이다. 개발자로 일을 하다 보면 모니터 한두 개 쯤은 갖고 싶어지는데, 나 역시 그랬고 결국 24인치 모니터와 32인치 모니터를 설치해서 사용하고 있었다.\u003C/p>\n\u003Cp>일본에서 미국으로 귀국하는 과정에서 짐을 정리하는데, 이 두 모니터가 짐이었다. 워낙 부피가 나가는 물건이다 보니 가지고 가자니 귀찮고, 중고로 처분하고 가자니 아깝고. 하지만 돌아가면 또 모니터를 사야 하고…. 어떻게 할지 고민하던 와중에 한  \u003Ca href=\"https://twitter.com/hmartapp/status/1444891624538996740?s=20\" rel=\"nofollow\">트윗\u003Cspan> ↗\u003C/span>\u003C/a>을 보게 되었다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img1.webp\" alt=\"\">\u003C/p>\n\u003Cp>가상현실에 구현된 작업 환경. 이 트윗을 보고 내 책상을 보니, 모니터며 잡동사니며 물건이 너무 많다고 느껴졌다.\u003C/p>\n\u003Cp>미니멀함을 추구하지만, 작업환경에서만은 그렇지 못했던 나. 이 트윗을 계기로 작업환경도 미니멀하게 가보자 하는 생각을 하게 됐다.\u003C/p>\n\u003Ch2 id=\"가상현실에서의-코딩-가능할까\">가상현실에서의 코딩 가능할까?\u003C/h2>\n\u003Cp>집 앞 동네 구멍가게에서 과자 사 먹듯 쉽게 살 수 있을 정도로 값싼 기기가 아니다 보니 고민을 해봐야 했다. 괜히 돈 주고 샀다가 후회하고 싶지 않았다.\u003C/p>\n\u003Cp>먼저 해당 트윗을 쓴 당사자에게 직접적으로 물어보았다. \u003Cem>“글씨는 잘 보이나요?”\u003C/em>\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img2.webp\" alt=\"\">\u003C/p>\n\u003Cp>잘 보인다고 한다 ✅\u003C/p>\n\u003Ch2 id=\"눈에-무리가-갈까\">눈에 무리가 갈까?\u003C/h2>\n\u003Cp>보통 개발을 하면 하루 종일 모니터를 바라보고 있게 된다. 그런데 가상현실에서의 작업환경이라면 VR 기기를 계속 쓰고 있다는 것인데… 눈에 무리가 가지 않을까? 최근에 라식 수술을 받았기 때문에 눈에 대해서는 특히나 더 예민했다.\u003C/p>\n\u003Cp>\u003Cem>“눈이 뻐근하거나 하지는 않나요?”\u003C/em>\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img3.webp\" alt=\"\">\u003C/p>\n\u003Cp>트윗의 주인도 이 문제를 인지하고 있었고, 평소에 포모도로 테크닉을 사용해서 주기적으로 휴식을 취해주고 있다고 하는데 좋은 방법인 것 같다.\u003C/p>\n\u003Cp>기기의 무게도 있다보니 계속 쓰고 있다보면 불편할테고 또한 중간중간 휴식을 취하는 것이 일하는 데 도움이 된다고 들었던 것 같기도 하다. 애초에 나 또한 50분 주기로 휴식을 취하니 이때 VR 기기를 벗어두면 괜찮을 것 같다.\u003C/p>\n\u003Ch2 id=\"트윗-주인은-아직도-vr을-사용하고-있을까\">트윗 주인은 아직도 VR을 사용하고 있을까?\u003C/h2>\n\u003Cp>고민하고 있던 부분에 대한 해답은 찾았고, 마지막으로 확인해 볼 것이 있었다. 해당 트윗이 올라온 지 약 1년이 지난 지금, 본 트윗의 주인은 아직도 가상현실에서 개발하고 있을까?\u003C/p>\n\u003Cp>곧바로 DM을 보내보았고, 하루 뒤 연락이 왔다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img5.webp\" alt=\"\">\u003C/p>\n\u003Ch2 id=\"vr기기를-구입하다\">VR기기를 구입하다\u003C/h2>\n\u003Cp>고심 끝에 “가상현실에서의 개발, 시도해 볼 가치는 있다”라고 결론을 내렸고 곧바로 아마존에서 \u003Ca href=\"https://www.meta.com/jp/en/quest/products/quest-2/\" rel=\"nofollow\">Meta Quest 2\u003Cspan> ↗\u003C/span>\u003C/a>를 구매했다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img6.webp\" alt=\"\">\u003C/p>\n\u003Cp>가상현실 SW로는 \u003Ca href=\"https://immersed.com/\" rel=\"nofollow\">Immersed VR\u003Cspan> ↗\u003C/span>\u003C/a>을 선택해서 설치했고, 기기와 성공적으로 연결했다. 나에게 알맞은 각도, 위치, 등등 세팅하는 데 시간이 걸렸지만 결국 해냈다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/transitioning_from_monitors_to_a_vr_workspace/img7.gif\" alt=\"\">\u003C/p>\n\u003Cp>글씨와 코드를 읽는 데 불편함은 전혀 없었고 오히려 생각보다 너무 잘 보여서 놀랐다. 네트워크 관련해서도 따로 세팅한 것은 없고, 사용하고 있는 포켓 와이파이에 연결했더니 지연 없이 잘 돌아간다. 이럴 줄 알았으면 진작 할 걸 그랬다.\u003C/p>\n\u003Ch2 id=\"주의사항\">주의사항\u003C/h2>\n\u003Cp>VR 기기를 한 번도 사용해 본 적이 없다면, 한 번 정도는 경험해 보고 구매하는 것을 추천한다.\u003C/p>\n\u003Cp>VR에서의 경험은 사람마다 천지 차이이고 실제로 어지럼증을 호소하는 사람도 있기 때문에, 주변 아는 사람 혹은 VR 기기 체험이 가능한 곳에 가서 사용해 보고 결정하기를 바란다.\u003C/p>",{"headings":129,"localImagePaths":144,"remoteImagePaths":145,"frontmatter":146,"imagePaths":147},[130,133,136,139,142],{"depth":105,"slug":131,"text":132},"가상현실에서의-코딩-가능할까","가상현실에서의 코딩 가능할까?",{"depth":105,"slug":134,"text":135},"눈에-무리가-갈까","눈에 무리가 갈까?",{"depth":105,"slug":137,"text":138},"트윗-주인은-아직도-vr을-사용하고-있을까","트윗 주인은 아직도 VR을 사용하고 있을까?",{"depth":105,"slug":140,"text":141},"vr기기를-구입하다","VR기기를 구입하다",{"depth":105,"slug":143,"text":143},"주의사항",[],[],{"title":120,"pubDate":121,"updatedDate":122},[],"6",{"id":148,"data":150,"body":153,"filePath":154,"digest":155,"rendered":156},{"title":151,"pubDate":152},"2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까","Sep 26 2024 18:00:00","회사에 입사한지 대략 2개월이 지났다. 나는 지금 잘하고 있는 걸까?\n\n사수와 함께 다이내믹에 나서면, 꿔다 놓은 병풍처럼 옆에서 하는 게 아무것도 없다. 적어도 나는 그렇게 느끼고 있다. 알고 있는 스펙이 별로 없다 보니 (분명 공부는 하고 있는데 말이지) 뭘 봐야 할지 모르겠고, “어! 이슈”라고 말해도 왜 이슈인지 모르겠다 (물론 사수님이 설명은 해준다. 하지만 말하기 전에는 모른다).\n\n내가 직접 확인하고 이슈인 것 같아서 올린 티켓들은 대부분이 이슈가 아니었다. 물론 이슈가 맞았던 적도 있지만 이슈가 아니라고 답변이 오면 “아 아니구나” 하고 티켓을 닫아 버리는 내가 바보 같기도 하다. 스펙을 정확히 알고 있으면 싸우기라도 할 텐데 모르니 당하는 느낌?\n\n티켓을 올리거나 확인할 때 항상 하는 일이 있다. 나와 비슷한 시기에 입사한 사람의 티켓을 확인하는 것. 올린 티켓의 개수와 티켓의 퀄리티 (단순 이슈인지, A급인지, 등등)을 확인하는 버릇이 생겼다. 물론 단순히 티켓의 개수가 일을 잘하고 못하느냐를 결정짓지 않는다는 것을 알고는 있다. 그럼에도 어쩔 수 없이 자꾸 확인하게 된다. 이 사람은 오늘 어떤 이슈를 찾았을까? 어떻게 적응하고 있을까? 어떻게 배우고 있을까? 이건 어떻게 확인했지? 등등.\n\n나도 잘하고 싶다. 근데 어떻게 잘하지?\n\n2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까?","src/content/writing/6.md","e51ee3c07840defb",{"html":157,"metadata":158},"\u003Cp>회사에 입사한지 대략 2개월이 지났다. 나는 지금 잘하고 있는 걸까?\u003C/p>\n\u003Cp>사수와 함께 다이내믹에 나서면, 꿔다 놓은 병풍처럼 옆에서 하는 게 아무것도 없다. 적어도 나는 그렇게 느끼고 있다. 알고 있는 스펙이 별로 없다 보니 (분명 공부는 하고 있는데 말이지) 뭘 봐야 할지 모르겠고, “어! 이슈”라고 말해도 왜 이슈인지 모르겠다 (물론 사수님이 설명은 해준다. 하지만 말하기 전에는 모른다).\u003C/p>\n\u003Cp>내가 직접 확인하고 이슈인 것 같아서 올린 티켓들은 대부분이 이슈가 아니었다. 물론 이슈가 맞았던 적도 있지만 이슈가 아니라고 답변이 오면 “아 아니구나” 하고 티켓을 닫아 버리는 내가 바보 같기도 하다. 스펙을 정확히 알고 있으면 싸우기라도 할 텐데 모르니 당하는 느낌?\u003C/p>\n\u003Cp>티켓을 올리거나 확인할 때 항상 하는 일이 있다. 나와 비슷한 시기에 입사한 사람의 티켓을 확인하는 것. 올린 티켓의 개수와 티켓의 퀄리티 (단순 이슈인지, A급인지, 등등)을 확인하는 버릇이 생겼다. 물론 단순히 티켓의 개수가 일을 잘하고 못하느냐를 결정짓지 않는다는 것을 알고는 있다. 그럼에도 어쩔 수 없이 자꾸 확인하게 된다. 이 사람은 오늘 어떤 이슈를 찾았을까? 어떻게 적응하고 있을까? 어떻게 배우고 있을까? 이건 어떻게 확인했지? 등등.\u003C/p>\n\u003Cp>나도 잘하고 싶다. 근데 어떻게 잘하지?\u003C/p>\n\u003Cp>2개월 차 신입은 할 줄 아는 게 없는 게 당연한 걸까?\u003C/p>",{"headings":159,"localImagePaths":160,"remoteImagePaths":161,"frontmatter":162,"imagePaths":163},[],[],[],{"title":151,"pubDate":152},[],"7",{"id":164,"data":166,"body":169,"filePath":170,"digest":171,"rendered":172},{"title":167,"pubDate":168},"I migrated from Bear app to Obsidian","Nov 04 2024 12:48","Bear app is a cool note app. I've used it for about a year, I think.\n\nIt has all the features I needed to build my second brain: wiki style linking, in-out linking, automatic updating linked notes, markdown, syntax highlighting for scripts, and more that is super useful.\n\nIt's actually pretty limited compare to other note apps but it was enough.\n\nBut the one thing that I really don't like about the bear app is how it store my notes. It seems like they use their own database and it's really not that comfortable when you want to move your note to other system. If you want back up your note, you have to individually export notes to designated directory. Yes, you can select all and export but this little step creates the friction and it gets annoying. I guess this is why people pay for the bear app which provides the 'Sync' option.\n\nI could've chosen the paying option of course, but at least for now, I don't see the benefit of buying subscription just for the sync, when I can simply migrate to other note app that does support one _or simulate it using the iCloud or github repository_.\n\nAnyway, so I migrated _back_ to Obsidian.","src/content/writing/7.md","fa449bf829291969",{"html":173,"metadata":174},"\u003Cp>Bear app is a cool note app. I’ve used it for about a year, I think.\u003C/p>\n\u003Cp>It has all the features I needed to build my second brain: wiki style linking, in-out linking, automatic updating linked notes, markdown, syntax highlighting for scripts, and more that is super useful.\u003C/p>\n\u003Cp>It’s actually pretty limited compare to other note apps but it was enough.\u003C/p>\n\u003Cp>But the one thing that I really don’t like about the bear app is how it store my notes. It seems like they use their own database and it’s really not that comfortable when you want to move your note to other system. If you want back up your note, you have to individually export notes to designated directory. Yes, you can select all and export but this little step creates the friction and it gets annoying. I guess this is why people pay for the bear app which provides the ‘Sync’ option.\u003C/p>\n\u003Cp>I could’ve chosen the paying option of course, but at least for now, I don’t see the benefit of buying subscription just for the sync, when I can simply migrate to other note app that does support one \u003Cem>or simulate it using the iCloud or github repository\u003C/em>.\u003C/p>\n\u003Cp>Anyway, so I migrated \u003Cem>back\u003C/em> to Obsidian.\u003C/p>",{"headings":175,"localImagePaths":176,"remoteImagePaths":177,"frontmatter":178,"imagePaths":179},[],[],[],{"title":167,"pubDate":168},[],"4",{"id":180,"data":182,"body":186,"filePath":187,"digest":188,"rendered":189},{"title":183,"pubDate":184,"updatedDate":185},"내 일에 대한 원동력 찾기","Apr 29 2024 13:56","Aug 19 2024 18:53","\u003Cstyle>\n    img[alt=img] {\n        height: 30rem;\n    }\n\u003C/style>\n\n거의 1년 동안 취업이 되지 않는 상태에서 나 자신을 욕하며 우울감에 빠지기도 하고, 내 능력에 대해 의심하며 하루하루를 보냈다. 계획대로 흘러가지 않는 게 인생이라지만, 단 하루조차 계획대로 보내지 못하는 나 자신을 보면 한숨만 나온다. “오늘은 꼭 계획대로 해야지”라고, 하지만 결국 작심삼일, 아니 작심이일도 못 가서 실패한다. 게으른 걸까? 행동력이 없는 걸까? 시간 분배를 못 하는 걸까?\n\n나보다 훨씬 더 노력하고, 더 열심히 하고, 더 뛰어난 사람들이 너무나도 많다. 그걸 알면서도 나아지는 게 없다.\n\n어딘가에서 레이오프가 있었다는 얘기를 들으면 그 이유를 생각하는 것 보다, 경쟁 상대가 그만큼 더 늘어났다는 생각에 불안감만 늘어갔다. \n\n\n> \"지금도 취업이 안 되는데, 그 좋은 기업에서 나온 사람들이 취업하려고 하면 나는 지금보다 더 안 되겠지\".\n\n이런 와중에 한심하게도 웹툰을 보면서 허송세월하다가, 생각지도 못한 부분에서 지금의 나에게 아주 필요한 말을 듣게 (읽게) 되었다.\n\n```\n허광열: \"아뇨 그 예린 반장님은 평생 이런 감정, 모르고 사셨을 분이라고 생각하고 있었어 가지고\"\n강예린: \"왜요~ 더 많지. 저는 심지어 느낌적인게 아니라 실제로 따라잡히고 못 따라잡았던 경험이 수두룩한걸요...\"\n\n허광열: \"그러면 [...] 어떻게 이겨 내려 하셨어요? 당시에 수 많은 경쟁자들, 나보다 잘난 사람들, 부족함 없는 사람들로부터.\"\n강예린: \"아무래도 동기부여가 가장 중요하겠죠, 스스로 세상 모든 것에 영향을 받지 않기 위해서는. 바깥 상황과 전혀 관계 없을, 내 스스로의 일에 대한 원동력.\"\n\n허광열: \"예린 반장님은... 그런게 있나요? 전혀 영향받지 않을 수 있는 저 자신에 대한 동기부여가?\"\n강예린: \"있죠. 절대 변치 않을 동기부여가. 나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\n```\n\n아무래도 나에게는 동기부여가, 나 자신을 움직이는 원동력이 될 그 무언가가 없었던 것 같다.\n\n> “공부를 해봤자, 프로젝트를 해봤자, 뭐든 해봤자… 나보다 뛰어난 사람들이 많은데…”\n\n하루하루 무슨 일을 하던 그 끝에는 항상 남과의 비교로 끝났다. 그러다 보니 항상 시간을 낭비하는 것처럼 느껴졌고, 계속해서 해야 할 이유를 찾지 못했다.\n\n하지만 **나는 나. 타인은 타인.**  나의 현 위치를 냉정하게 바라보고 판단하되, 나의 미래에 대해 비관은 하지 말자. \"나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\n\n![img](/images/finding_what_drives_you/img1.webp)\n\n[[웹툰 1초 220화](https://comic.naver.com/webtoon/detail?titleId=725586&no=222&week=fri)]","src/content/writing/4.md","1781cf78c2564d0b",{"html":190,"metadata":191},"\u003Cstyle>\n    img[alt=img] {\n        height: 30rem;\n    }\n\u003C/style>\n\u003Cp>거의 1년 동안 취업이 되지 않는 상태에서 나 자신을 욕하며 우울감에 빠지기도 하고, 내 능력에 대해 의심하며 하루하루를 보냈다. 계획대로 흘러가지 않는 게 인생이라지만, 단 하루조차 계획대로 보내지 못하는 나 자신을 보면 한숨만 나온다. “오늘은 꼭 계획대로 해야지”라고, 하지만 결국 작심삼일, 아니 작심이일도 못 가서 실패한다. 게으른 걸까? 행동력이 없는 걸까? 시간 분배를 못 하는 걸까?\u003C/p>\n\u003Cp>나보다 훨씬 더 노력하고, 더 열심히 하고, 더 뛰어난 사람들이 너무나도 많다. 그걸 알면서도 나아지는 게 없다.\u003C/p>\n\u003Cp>어딘가에서 레이오프가 있었다는 얘기를 들으면 그 이유를 생각하는 것 보다, 경쟁 상대가 그만큼 더 늘어났다는 생각에 불안감만 늘어갔다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“지금도 취업이 안 되는데, 그 좋은 기업에서 나온 사람들이 취업하려고 하면 나는 지금보다 더 안 되겠지”.\u003C/p>\n\u003C/blockquote>\n\u003Cp>이런 와중에 한심하게도 웹툰을 보면서 허송세월하다가, 생각지도 못한 부분에서 지금의 나에게 아주 필요한 말을 듣게 (읽게) 되었다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>허광열: \"아뇨 그 예린 반장님은 평생 이런 감정, 모르고 사셨을 분이라고 생각하고 있었어 가지고\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"왜요~ 더 많지. 저는 심지어 느낌적인게 아니라 실제로 따라잡히고 못 따라잡았던 경험이 수두룩한걸요...\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>허광열: \"그러면 [...] 어떻게 이겨 내려 하셨어요? 당시에 수 많은 경쟁자들, 나보다 잘난 사람들, 부족함 없는 사람들로부터.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"아무래도 동기부여가 가장 중요하겠죠, 스스로 세상 모든 것에 영향을 받지 않기 위해서는. 바깥 상황과 전혀 관계 없을, 내 스스로의 일에 대한 원동력.\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>허광열: \"예린 반장님은... 그런게 있나요? 전혀 영향받지 않을 수 있는 저 자신에 대한 동기부여가?\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>강예린: \"있죠. 절대 변치 않을 동기부여가. 나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>아무래도 나에게는 동기부여가, 나 자신을 움직이는 원동력이 될 그 무언가가 없었던 것 같다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“공부를 해봤자, 프로젝트를 해봤자, 뭐든 해봤자… 나보다 뛰어난 사람들이 많은데…”\u003C/p>\n\u003C/blockquote>\n\u003Cp>하루하루 무슨 일을 하던 그 끝에는 항상 남과의 비교로 끝났다. 그러다 보니 항상 시간을 낭비하는 것처럼 느껴졌고, 계속해서 해야 할 이유를 찾지 못했다.\u003C/p>\n\u003Cp>하지만 \u003Cstrong>나는 나. 타인은 타인.\u003C/strong>  나의 현 위치를 냉정하게 바라보고 판단하되, 나의 미래에 대해 비관은 하지 말자. “나는 뭐든 할 수 있다. 내겐 그 재능이 있고, 내 스스로 그걸 매우 잘 알고 있다.”\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/finding_what_drives_you/img1.webp\" alt=\"img\">\u003C/p>\n\u003Cp>[\u003Ca href=\"https://comic.naver.com/webtoon/detail?titleId=725586&#x26;no=222&#x26;week=fri\" rel=\"nofollow\">웹툰 1초 220화\u003Cspan> ↗\u003C/span>\u003C/a>]\u003C/p>",{"headings":192,"localImagePaths":193,"remoteImagePaths":194,"frontmatter":195,"imagePaths":196},[],[],[],{"title":183,"pubDate":184,"updatedDate":185},[],"8",{"id":197,"data":199,"body":202,"filePath":203,"digest":204,"rendered":205},{"title":200,"pubDate":201},"나는 왜 한 시간 빨리 출근을 하는걸까","Nov 21 2024 06:00:00","공식적인 업무 시간은 8:00\\~17:00. 하지만 내가 회사에 도착하는 시각은 6:50\\~7:20 사이.\n\n일찍 출발하게 된 첫 계기는 트래픽이었다. 아침에 트래픽이 너무 심해서 기본으로 한 시간, 심하면 두 시간도 걸린다. 그러다 보니 지각을 하기 싫어 아침 빨리 일어나 6시 15분쯤에 집을 나섰다. 회사에 도착하면 7:30~7:50분 사이가 된다. 하지만 어느 날 부터 조금씩 빨리 집을 나서기 시작하면서 지금은 5:35분쯤 집을 떠나고 있다. 일찍 도착하면 6:40분 정도가 되고 평균적으로는 7시 10분 정도가 된다.\n\n퇴근길도 사실 만만찮게 시간이 걸리기는 하는데 어제는 사고가 났었는지 두 시간가량 걸렸다. 천천히 트래픽에 낑겨 운전하면서 오다가 문득 이런 생각이 들었다.\n\n> \"나는 왜 일찍 출근하는 걸까. 이게 무슨 의미가 있지\"\n\n일에 대한 열정이 식은 것은 아니다. 아직 6개월도 안 됐는데 식을 열정이 뭐가 있을까.\n다만 의미를 모르겠다. 빨리 가서 출근하는 이유. 빨리 가서 준비하는 이유. 아니 준비라고 할 게 있나.\n\n빨리 간다고 일찍 퇴근하는 것도 아니고, 일찍 퇴근해 봐야 16:30인데 이때 트래픽이 없는 것도 아니고, 오히려 늦게 퇴근하는 걸 환호 할 지경이다. 그럼 난 왜 일찍 출근하는 걸까. 다들 8~9시 사이에 알아서 출근하는 분위기인데, 나도 그렇게 해볼까.\n\n누군가 \"_왜 이렇게 일찍 오셨어요_\" 라고 물으면, \"_신입이니 빨리 와서 준비해야죠!_\" 라고 대답했었다.\n나는 뭘 준비해야 한다고 느꼈던 걸까. 업데이트? 시스템 파일 다운로드? 그냥 업무 시간에 다운로드하고 업데이트하면 되는 거 아닌가.\n\n모르겠다.","src/content/writing/8.md","820782555c4bf7d1",{"html":206,"metadata":207},"\u003Cp>공식적인 업무 시간은 8:00~17:00. 하지만 내가 회사에 도착하는 시각은 6:50~7:20 사이.\u003C/p>\n\u003Cp>일찍 출발하게 된 첫 계기는 트래픽이었다. 아침에 트래픽이 너무 심해서 기본으로 한 시간, 심하면 두 시간도 걸린다. 그러다 보니 지각을 하기 싫어 아침 빨리 일어나 6시 15분쯤에 집을 나섰다. 회사에 도착하면 7:30~7:50분 사이가 된다. 하지만 어느 날 부터 조금씩 빨리 집을 나서기 시작하면서 지금은 5:35분쯤 집을 떠나고 있다. 일찍 도착하면 6:40분 정도가 되고 평균적으로는 7시 10분 정도가 된다.\u003C/p>\n\u003Cp>퇴근길도 사실 만만찮게 시간이 걸리기는 하는데 어제는 사고가 났었는지 두 시간가량 걸렸다. 천천히 트래픽에 낑겨 운전하면서 오다가 문득 이런 생각이 들었다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“나는 왜 일찍 출근하는 걸까. 이게 무슨 의미가 있지”\u003C/p>\n\u003C/blockquote>\n\u003Cp>일에 대한 열정이 식은 것은 아니다. 아직 6개월도 안 됐는데 식을 열정이 뭐가 있을까.\n다만 의미를 모르겠다. 빨리 가서 출근하는 이유. 빨리 가서 준비하는 이유. 아니 준비라고 할 게 있나.\u003C/p>\n\u003Cp>빨리 간다고 일찍 퇴근하는 것도 아니고, 일찍 퇴근해 봐야 16:30인데 이때 트래픽이 없는 것도 아니고, 오히려 늦게 퇴근하는 걸 환호 할 지경이다. 그럼 난 왜 일찍 출근하는 걸까. 다들 8~9시 사이에 알아서 출근하는 분위기인데, 나도 그렇게 해볼까.\u003C/p>\n\u003Cp>누군가 “\u003Cem>왜 이렇게 일찍 오셨어요\u003C/em>” 라고 물으면, “\u003Cem>신입이니 빨리 와서 준비해야죠!\u003C/em>” 라고 대답했었다.\n나는 뭘 준비해야 한다고 느꼈던 걸까. 업데이트? 시스템 파일 다운로드? 그냥 업무 시간에 다운로드하고 업데이트하면 되는 거 아닌가.\u003C/p>\n\u003Cp>모르겠다.\u003C/p>",{"headings":208,"localImagePaths":209,"remoteImagePaths":210,"frontmatter":211,"imagePaths":212},[],[],[],{"title":200,"pubDate":201},[],"9",{"id":213,"data":215,"body":218,"filePath":219,"digest":220,"rendered":221},{"title":216,"pubDate":217},"집중력 도둑이 내 손목에 있었구나","Dec 03 2024 12:30","책을 읽다가도 \"_띠링!_\"\n\n공부를 하다가도 \"_팅!_\"\n\n일을 하면서도 \"_카톡!_\"\n\n사실 소리는 항상 꺼놓기 때문에 효과음은 없다. 대신 진동이 내 손목을 통해 메시지를 보낸다.\n\n> \"지금 당장 하던 것을 멈추고 나를 봐!\"\n\n나는 내 집중력을 해치는 기기를 직접 내 손으로, 비싼 돈을 주고 구매한 것이다.\n\n망할 ~~애플~~ 스마트 워치.\n\n하지만 수면 시간 관련해서 기록하는 데는 여전히 유용하게 쓰고 있다. 밤에 잠을 잘 때만 스마트 워치를 착용했다가, 기상하면 충전대에 놓고 그대로 출근한다. 아! 가끔 운동할 때도 착용하기는 한다. 하지만 그 외에 착용하는 일이 아마 더는 없지 않을까….","src/content/writing/9.md","4f9165f72bf38f3e",{"html":222,"metadata":223},"\u003Cp>책을 읽다가도 “\u003Cem>띠링!\u003C/em>”\u003C/p>\n\u003Cp>공부를 하다가도 “\u003Cem>팅!\u003C/em>”\u003C/p>\n\u003Cp>일을 하면서도 “\u003Cem>카톡!\u003C/em>”\u003C/p>\n\u003Cp>사실 소리는 항상 꺼놓기 때문에 효과음은 없다. 대신 진동이 내 손목을 통해 메시지를 보낸다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>“지금 당장 하던 것을 멈추고 나를 봐!”\u003C/p>\n\u003C/blockquote>\n\u003Cp>나는 내 집중력을 해치는 기기를 직접 내 손으로, 비싼 돈을 주고 구매한 것이다.\u003C/p>\n\u003Cp>망할 \u003Cdel>애플\u003C/del> 스마트 워치.\u003C/p>\n\u003Cp>하지만 수면 시간 관련해서 기록하는 데는 여전히 유용하게 쓰고 있다. 밤에 잠을 잘 때만 스마트 워치를 착용했다가, 기상하면 충전대에 놓고 그대로 출근한다. 아! 가끔 운동할 때도 착용하기는 한다. 하지만 그 외에 착용하는 일이 아마 더는 없지 않을까….\u003C/p>",{"headings":224,"localImagePaths":225,"remoteImagePaths":226,"frontmatter":227,"imagePaths":228},[],[],[],{"title":216,"pubDate":217},[],"13",{"id":229,"data":231,"body":234,"filePath":235,"digest":236,"rendered":237},{"title":232,"pubDate":233},"Python + Selenium을 사용하여 이슈 작성을 자동화해 보았다","May 08 2025 05:20","내가 입사하기 전, 티켓을 자동으로 올려주는 코드를 이미 누군가 만든 적이 있다고 들었다. 하지만 입사하고 거의 1년이 돼가는 지금까지 해당 프로그램을 사용하는 팀원들을 보지는 못했다. 적어도 서부의 경우는 그렇다. 동부에서는 사용하고 있는 것으로 알고 있다.\n\n티켓을 올리는 게 시간이 걸리는 작업이다 보니 꼭 한번 만들어보고 싶었는데 시간이 좀처럼 없었다. 그러다 최근 한국에 휴일이 겹치면서 업무가 상대적으로 적었는데, 지금이 좋은 기회라고 생각해서 자동화 프로그램을 만들기로 했다.\n\n기존 스크립트를 사용하는 사이드 프로젝트의 경우 Ruby를 사용했을 테지만, 팀원들과 공유를 위해서는 기본적으로 설치되어 있는 Python이 편할 것 같아서, 엄청 오랜만에 Python을 써봤다.\n\n기존 프로그램의 경우, 내가 알기로는 아래와 같이 동작한다:\n1. GUI\n2. multithreading - 동시에 여러 티켓 **등재**\n3. headless - 선택 가능\n4. **티켓 작성 및 등재까지 자동화**\n\n내가 만든 프로그램의 경우는 아래와 같이 동작한다:\n1. TUI\n2. single-threaded - 티켓 하나씩 순차적으로 **작성**\n3. not headless - 무조건\n4. **티켓 작성까지만 자동화**. 등재는 하지 않음.\n\n\n우선 등재까지 하지 않은 이유는, 중복 티켓을 올리지 않기 위해서가 첫 번째이다. Selenium으로 `submit`을 클릭했을 때, 어떠한 이유로 인해 서버에서의 반응 속도가 느리거나 혹은 프로그램의 이슈로 여러 번 클릭이 가해지면, 같은 티켓이 5개씩 등재될 수도 있다.\n\n두 번째로는, 티켓을 올리기 전에 사람이 직접 간단하게나마 내용을 다시 한번 확인하기를 바랐다. 우리는 실수하는 동물이기에 확인 작업은 꼭 필요하다.\n\n---\n\n해당 프로그램을 만들고 나서 시험해 보기 위해 이슈를 부랴부랴 찾아 나섰다 ε=ε=┌( >_\u003C)┘\n\n잘 동작은 하는데 selenium 문제인지 컴퓨터 사양 문제인지 모르겠으나, 텍스트 기재할 때 시간이 좀 걸린다. 특히 이슈 내용! 해당 부분에서 시간이 좀 걸리다 보니, 티켓 하나 작성하는데 페이지 로딩 시간 포함 대략 2분 정도 걸리는 것 같다. \n\n이슈 내용을 빈 문자열로 놓고 실행하면 80초 정도로 시간이 확 줄어든다. `send_key`로 긴 내용의 텍스트를 보내버려서 그러는 건지, 정말 단순히 복붙하는 메소드는 없는지 찾아봐야겠다.","src/content/writing/13.md","967e484ef056e9ed",{"html":238,"metadata":239},"\u003Cp>내가 입사하기 전, 티켓을 자동으로 올려주는 코드를 이미 누군가 만든 적이 있다고 들었다. 하지만 입사하고 거의 1년이 돼가는 지금까지 해당 프로그램을 사용하는 팀원들을 보지는 못했다. 적어도 서부의 경우는 그렇다. 동부에서는 사용하고 있는 것으로 알고 있다.\u003C/p>\n\u003Cp>티켓을 올리는 게 시간이 걸리는 작업이다 보니 꼭 한번 만들어보고 싶었는데 시간이 좀처럼 없었다. 그러다 최근 한국에 휴일이 겹치면서 업무가 상대적으로 적었는데, 지금이 좋은 기회라고 생각해서 자동화 프로그램을 만들기로 했다.\u003C/p>\n\u003Cp>기존 스크립트를 사용하는 사이드 프로젝트의 경우 Ruby를 사용했을 테지만, 팀원들과 공유를 위해서는 기본적으로 설치되어 있는 Python이 편할 것 같아서, 엄청 오랜만에 Python을 써봤다.\u003C/p>\n\u003Cp>기존 프로그램의 경우, 내가 알기로는 아래와 같이 동작한다:\u003C/p>\n\u003Col>\n\u003Cli>GUI\u003C/li>\n\u003Cli>multithreading - 동시에 여러 티켓 \u003Cstrong>등재\u003C/strong>\u003C/li>\n\u003Cli>headless - 선택 가능\u003C/li>\n\u003Cli>\u003Cstrong>티켓 작성 및 등재까지 자동화\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>내가 만든 프로그램의 경우는 아래와 같이 동작한다:\u003C/p>\n\u003Col>\n\u003Cli>TUI\u003C/li>\n\u003Cli>single-threaded - 티켓 하나씩 순차적으로 \u003Cstrong>작성\u003C/strong>\u003C/li>\n\u003Cli>not headless - 무조건\u003C/li>\n\u003Cli>\u003Cstrong>티켓 작성까지만 자동화\u003C/strong>. 등재는 하지 않음.\u003C/li>\n\u003C/ol>\n\u003Cp>우선 등재까지 하지 않은 이유는, 중복 티켓을 올리지 않기 위해서가 첫 번째이다. Selenium으로 \u003Ccode>submit\u003C/code>을 클릭했을 때, 어떠한 이유로 인해 서버에서의 반응 속도가 느리거나 혹은 프로그램의 이슈로 여러 번 클릭이 가해지면, 같은 티켓이 5개씩 등재될 수도 있다.\u003C/p>\n\u003Cp>두 번째로는, 티켓을 올리기 전에 사람이 직접 간단하게나마 내용을 다시 한번 확인하기를 바랐다. 우리는 실수하는 동물이기에 확인 작업은 꼭 필요하다.\u003C/p>\n\u003Chr>\n\u003Cp>해당 프로그램을 만들고 나서 시험해 보기 위해 이슈를 부랴부랴 찾아 나섰다 ε=ε=┌( >_&#x3C;)┘\u003C/p>\n\u003Cp>잘 동작은 하는데 selenium 문제인지 컴퓨터 사양 문제인지 모르겠으나, 텍스트 기재할 때 시간이 좀 걸린다. 특히 이슈 내용! 해당 부분에서 시간이 좀 걸리다 보니, 티켓 하나 작성하는데 페이지 로딩 시간 포함 대략 2분 정도 걸리는 것 같다.\u003C/p>\n\u003Cp>이슈 내용을 빈 문자열로 놓고 실행하면 80초 정도로 시간이 확 줄어든다. \u003Ccode>send_key\u003C/code>로 긴 내용의 텍스트를 보내버려서 그러는 건지, 정말 단순히 복붙하는 메소드는 없는지 찾아봐야겠다.\u003C/p>",{"headings":240,"localImagePaths":241,"remoteImagePaths":242,"frontmatter":243,"imagePaths":244},[],[],[],{"title":232,"pubDate":233},[],"note",["Map",247,248,265,266,282,283,299,300,317,318,335,336,353,354,371,372,389,390,407,408,431,432,449,450,467,468,485,486,503,504,521,522,539,540,557,558,575,576],"240610164501",{"id":247,"data":249,"body":254,"filePath":255,"digest":256,"rendered":257},{"title":250,"folge":251,"uid":247,"pubDate":252,"updatedDate":253},"상황에 따라 적합한 자료구조는 달라진다","0","June 10 2024 16:45","April 28 2025 13:00","자료를 보다 효과적으로 저장하고 처리하기 위해 우리는 다양한 자료구조(Data Structure)를 사용한다.\n\n각 자료구조는 고유의 장단점을 지니고 있으며, 주어진 문제 상황에 가장 적합한 자료구조를 선택할 수 있는 지식과 경험이 중요하다. 예를 들어, [조회 연산이 삽입이나 삭제보다 압도적으로 많은 경우에는 배열을 떠올릴 수 있다](/note/250203120334). 배열은 인덱스를 이용한 빠른 접근(O(1))이 가능하기 때문이다. 반면, 삽입과 삭제가 빈번하게 일어나는 경우에는 연결 리스트가 더 적합할 수 있다.\n\n또한, 단순한 연산 횟수뿐 아니라 시간과 공간 복잡도 전체를 고려해야 하는 경우, 해시테이블(Hash Table) 같은 구조를 고려할 수도 있다. 해시테이블은 평균적으로 빠른 삽입과 조회 속도를 제공하지만, 충돌 처리와 메모리 사용 측면에서 주의가 필요하다.\n\n모든 자료구조를 다 공부해야 한다고 생각하지는 않는다. 그러나 다양한 구조에 대한 시야가 넓을수록 더 나은 선택지를 가질 수 있다. 현재 알고 있는 도구로 문제를 효율적으로 해결할 수 없다면, 새로운 자료구조를 탐색해보는 것도 좋은 전략이 될 수 있다.","src/content/note/240610164501.md","d50dc40c58168b88",{"html":258,"metadata":259},"\u003Cp>자료를 보다 효과적으로 저장하고 처리하기 위해 우리는 다양한 자료구조(Data Structure)를 사용한다.\u003C/p>\n\u003Cp>각 자료구조는 고유의 장단점을 지니고 있으며, 주어진 문제 상황에 가장 적합한 자료구조를 선택할 수 있는 지식과 경험이 중요하다. 예를 들어, \u003Ca href=\"/note/250203120334\">조회 연산이 삽입이나 삭제보다 압도적으로 많은 경우에는 배열을 떠올릴 수 있다\u003C/a>. 배열은 인덱스를 이용한 빠른 접근(O(1))이 가능하기 때문이다. 반면, 삽입과 삭제가 빈번하게 일어나는 경우에는 연결 리스트가 더 적합할 수 있다.\u003C/p>\n\u003Cp>또한, 단순한 연산 횟수뿐 아니라 시간과 공간 복잡도 전체를 고려해야 하는 경우, 해시테이블(Hash Table) 같은 구조를 고려할 수도 있다. 해시테이블은 평균적으로 빠른 삽입과 조회 속도를 제공하지만, 충돌 처리와 메모리 사용 측면에서 주의가 필요하다.\u003C/p>\n\u003Cp>모든 자료구조를 다 공부해야 한다고 생각하지는 않는다. 그러나 다양한 구조에 대한 시야가 넓을수록 더 나은 선택지를 가질 수 있다. 현재 알고 있는 도구로 문제를 효율적으로 해결할 수 없다면, 새로운 자료구조를 탐색해보는 것도 좋은 전략이 될 수 있다.\u003C/p>",{"headings":260,"localImagePaths":261,"remoteImagePaths":262,"frontmatter":263,"imagePaths":264},[],[],[],{"title":250,"folge":251,"uid":247,"pubDate":252,"updatedDate":253},[],"240611100301",{"id":265,"data":267,"body":271,"filePath":272,"digest":273,"rendered":274},{"title":268,"folge":11,"uid":265,"pubDate":269,"updatedDate":270},"배열의 종류는 크게 두 가지로 나뉜다","June 11 2024 10:03:01","April 26 2025 21:45","배열의 종류는 크게 두 가지 형태로 나뉜다: 정적 배열 그리고 동적 배열. 정적(*static*)과 동적(*dynamic*) 배열의 차이는 메모리가 할당되는 시점에서 알 수 있다. [정적 배열의 경우 컴파일 시점에 메모리가 할당](/note/240611103553)되는 반면, [동적 배열은 런타임에 메모리가 할당된다](/note/250101052312).\n\n배열의 구조를 기반으로 나눌수도 있는데, 1차원 배열과 다차원(multidimensional) 배열이 있다.  1차원 배열은 한 줄로 나열된 데이터를 의미하고, 다차원 배열은 2차원 이상의 배열을 의미한다. \n\n다차원 배열내에서도 구분을 둘 수 있는데, 일반적인 2차원 배열과 가변 배열(*jagged array*)이 있다. 가변 배열은 각 행의 길이가 달라지는 배열 구조로, [각 요소(행)의 크기가 다를 수 있는 경우에 유용하다](/note/250101173519). 가변 배열은 구조적 특성 상 동적 배열에 해당한다.","src/content/note/240611100301.md","fe164c4d20536725",{"html":275,"metadata":276},"\u003Cp>배열의 종류는 크게 두 가지 형태로 나뉜다: 정적 배열 그리고 동적 배열. 정적(\u003Cem>static\u003C/em>)과 동적(\u003Cem>dynamic\u003C/em>) 배열의 차이는 메모리가 할당되는 시점에서 알 수 있다. \u003Ca href=\"/note/240611103553\">정적 배열의 경우 컴파일 시점에 메모리가 할당\u003C/a>되는 반면, \u003Ca href=\"/note/250101052312\">동적 배열은 런타임에 메모리가 할당된다\u003C/a>.\u003C/p>\n\u003Cp>배열의 구조를 기반으로 나눌수도 있는데, 1차원 배열과 다차원(multidimensional) 배열이 있다.  1차원 배열은 한 줄로 나열된 데이터를 의미하고, 다차원 배열은 2차원 이상의 배열을 의미한다.\u003C/p>\n\u003Cp>다차원 배열내에서도 구분을 둘 수 있는데, 일반적인 2차원 배열과 가변 배열(\u003Cem>jagged array\u003C/em>)이 있다. 가변 배열은 각 행의 길이가 달라지는 배열 구조로, \u003Ca href=\"/note/250101173519\">각 요소(행)의 크기가 다를 수 있는 경우에 유용하다\u003C/a>. 가변 배열은 구조적 특성 상 동적 배열에 해당한다.\u003C/p>",{"headings":277,"localImagePaths":278,"remoteImagePaths":279,"frontmatter":280,"imagePaths":281},[],[],[],{"title":268,"folge":11,"uid":265,"pubDate":269,"updatedDate":270},[],"241026090000",{"id":282,"data":284,"body":288,"filePath":289,"digest":290,"rendered":291},{"title":285,"folge":92,"uid":282,"pubDate":286,"updatedDate":287},"연결 리스트는 포인터로 노드를 연결해 구성된다","Oct 26 2024 09:00","April 28 2025 16:30","연결 리스트는 선형 자료구조의 일종으로 각 요소를 노드(Node)라고 칭한다.\n\n메모리 속 한 공간에 연속적으로 나열되어 있는 배열의 데이터와는 다르게, 연결 리스트의 노드들은 메모리 속 여기저기에 흩어져 있다. 흩어진 노드들은 각각 다음 노드의 메모리 주소를 담을 수 있는 포인터(pointer) 변수를 가지고 있는데, 이를 이용해서 다른 노드들의 위치를 파악할 수 있다. \n\n노드의 기본 구성 요소는 아래와 같다:\n- `data` - 저장하고 있는 자료\n- `next` - 다음 노드의 주소를 저장할 포인터\n\n 만약 `next` 포인터가 `NULL`을 담고 있다면, 다음 노드가 없다는 뜻으로 해당 노드가 리스트의 마지막임을 의미한다.\n\n```c\nstruct Node {\n    int data;\n    struct Node *next;\n};\n```\n\n연결 리스트의 노드들은 일반적으로 동적 할당되며, 이 경우 메모리는 Heap 영역에 저장된다. 이는 노드의 수가 실행 중에 결정되거나, 생명 주기를 제어할 필요가 있을 때 유용하다.\n\n아래는 세 개의 노드를 연결한 다음 출력하는 예제이다.\n\n```c\n#include \u003Cstdio.h>\n#include \u003Cstdlib.h>\n\n// 노드 구조체\ntypedef struct Node {\n    int data;\n    struct Node *next;\n} Node;\n\nint main(int argc, char **argv) {\n    // 머리 = 첫 번째 노드 \n    Node *head = malloc(sizeof(Node));\n    head->data = 1;\n    head->next = malloc(sizeof(Node));\n\n    // 두 번째 노드\n    head->next->data = 2;\n    head->next->next = malloc(sizeof(Node));\n\n    // 세 번째 노드\n    head->next->next->data = 3;\n    head->next->next->next = NULL;\n\n    // 머리부터 시작해서 마지막 노드까지 선회\n    Node *curr = head;\n    while (curr) {\n        printf(\"%d\\n\", curr->data);\n        curr = curr->next;\n    }\n\n    // 할당했던 노드들의 메모리 해제\n    curr = head;\n    while (curr) {\n        Node *temp = curr->next;\n        free(curr);\n        curr = temp;\n    }\n\n    head = NULL;\n\n    return 0;\n}\n```\n\n마지막 반복문에서는 각 노드를 순회하며 [명시적으로 메모리를 해제 해주고있다](/note/250130081822). 이는 노드들이 동적 할당되었기 때문에, 프로그래머가 직접 `free()`를 호출해 해제해야 하기 때문이다.","src/content/note/241026090000.md","e3878aefdfeb8e87",{"html":292,"metadata":293},"\u003Cp>연결 리스트는 선형 자료구조의 일종으로 각 요소를 노드(Node)라고 칭한다.\u003C/p>\n\u003Cp>메모리 속 한 공간에 연속적으로 나열되어 있는 배열의 데이터와는 다르게, 연결 리스트의 노드들은 메모리 속 여기저기에 흩어져 있다. 흩어진 노드들은 각각 다음 노드의 메모리 주소를 담을 수 있는 포인터(pointer) 변수를 가지고 있는데, 이를 이용해서 다른 노드들의 위치를 파악할 수 있다.\u003C/p>\n\u003Cp>노드의 기본 구성 요소는 아래와 같다:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>data\u003C/code> - 저장하고 있는 자료\u003C/li>\n\u003Cli>\u003Ccode>next\u003C/code> - 다음 노드의 주소를 저장할 포인터\u003C/li>\n\u003C/ul>\n\u003Cp>만약 \u003Ccode>next\u003C/code> 포인터가 \u003Ccode>NULL\u003C/code>을 담고 있다면, 다음 노드가 없다는 뜻으로 해당 노드가 리스트의 마지막임을 의미한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Node {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>연결 리스트의 노드들은 일반적으로 동적 할당되며, 이 경우 메모리는 Heap 영역에 저장된다. 이는 노드의 수가 실행 중에 결정되거나, 생명 주기를 제어할 필요가 있을 때 유용하다.\u003C/p>\n\u003Cp>아래는 세 개의 노드를 연결한 다음 출력하는 예제이다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdio.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdlib.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 노드 구조체\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">typedef\u003C/span>\u003Cspan style=\"color:#F97583\"> struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Node {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> data;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    struct\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">} Node;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> argc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#FFAB70\">argv\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 머리 = 첫 번째 노드 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Node));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Node));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 두 번째 노드\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->next->data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->next->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(Node));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 세 번째 노드\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->next->next->data \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head->next->next->next \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 머리부터 시작해서 마지막 노드까지 선회\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">curr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (curr) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, curr->data);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        curr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> curr->next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // 할당했던 노드들의 메모리 해제\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    curr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> head;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    while\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (curr) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">temp \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> curr->next;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        free\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(curr);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        curr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> temp;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> NULL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>마지막 반복문에서는 각 노드를 순회하며 \u003Ca href=\"/note/250130081822\">명시적으로 메모리를 해제 해주고있다\u003C/a>. 이는 노드들이 동적 할당되었기 때문에, 프로그래머가 직접 \u003Ccode>free()\u003C/code>를 호출해 해제해야 하기 때문이다.\u003C/p>",{"headings":294,"localImagePaths":295,"remoteImagePaths":296,"frontmatter":297,"imagePaths":298},[],[],[],{"title":285,"folge":92,"uid":282,"pubDate":286,"updatedDate":287},[],"240611103553",{"id":299,"data":301,"body":306,"filePath":307,"digest":308,"rendered":309},{"title":302,"folge":303,"uid":299,"pubDate":304,"updatedDate":305},"정적 배열은 컴파일 시점에 메모리가 할당된다","1a","Jun 11 2024 10:35:53","April 26 2025 13:50","정적 배열의 경우 컴파일 시점에 해당 배열의 크기를 확인하고 필요한 만큼의 메모리를 할당한다. 크기가 고정이 되기 때문에 프로그램 실행 중 배열의 크기를 변경할 수 없다.\n\n예를들어 아래처럼 크기 5인 배열 `arr`를 만들고 나서 중간에 크기를 10으로 변경하려고 하면 에러가 난다 (애초에 문법이 틀리다).\n```cpp\n#include \u003Ciostream>\n\nint main() {\n\tint arr[5];\n\n\tarr[0] = 1;\n\tarr[1] = 2;\n\tarr[2] = 3;\n\tarr[3] = 4;\n\tarr[4] = 5;\n\n\tstd::cout \u003C\u003C arr[0] \u003C\u003C std::endl;\n\n\tarr = arr[10]; // Compile error: cannot reassign an array\n\n\treturn 0;\n}\n```\n\n데이터 크기에 대해 프로그램 실행 전까지 알 수 없다면, [런타임 때 메모리 할당이 가능한 동적 배열](/note/250101052312)을 사용하는 것이 좋다.","src/content/note/240611103553.md","9de539824779643d",{"html":310,"metadata":311},"\u003Cp>정적 배열의 경우 컴파일 시점에 해당 배열의 크기를 확인하고 필요한 만큼의 메모리를 할당한다. 크기가 고정이 되기 때문에 프로그램 실행 중 배열의 크기를 변경할 수 없다.\u003C/p>\n\u003Cp>예를들어 아래처럼 크기 5인 배열 \u003Ccode>arr\u003C/code>를 만들고 나서 중간에 크기를 10으로 변경하려고 하면 에러가 난다 (애초에 문법이 틀리다).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;iostream>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tstd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::cout \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::endl;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\"> // Compile error: cannot reassign an array\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>데이터 크기에 대해 프로그램 실행 전까지 알 수 없다면, \u003Ca href=\"/note/250101052312\">런타임 때 메모리 할당이 가능한 동적 배열\u003C/a>을 사용하는 것이 좋다.\u003C/p>",{"headings":312,"localImagePaths":313,"remoteImagePaths":314,"frontmatter":315,"imagePaths":316},[],[],[],{"title":302,"folge":303,"uid":299,"pubDate":304,"updatedDate":305},[],"240610152201",{"id":317,"data":319,"body":324,"filePath":325,"digest":326,"rendered":327},{"title":320,"folge":321,"uid":317,"pubDate":322,"updatedDate":323},"정적 타입 언어에서는 배열이 동일 타입의 원소만을 가진다","1d","June 10 2024 15:22:01","April 27 2025 08:20","변수를 선언 할 때 변수의 타입을 명시적으로 지정해줘야 하는 정적 타입 언어들이 있다. 예를 들면 C, C++, Java, C#, ... 같은 언어들이 있다.\n\n```cpp\nint number      = 1;\nchar character  = 'a';\nbool is_alive   = true;\nfloat decimal1  = 3.14f;\ndouble decimal2 = 3.14159;\n```\n\n배열을 선언할 때도 마찬가지로, 배열이 저장할 원소의 타입을 명시해야 한다. 예를 들어 `int` 타입을 가진 배열은 `int`만 저장 할 수 있고, `bool` 타입 배열은 `bool`만 저장할 수 있다.\n\n타입이 중요한 이유는 배열이 생성될 때 어느정도의 메모리를 할당해야 하는지 파악하는데 필요하기 때문이다. 크기 5를 가진 `int` 배열의 경우, `5 * 4 bytes = 20 bytes`가 할당될 것이고, 만약 크기가 100이라면 `100 * 4 bytes = 400 bytes`가 필요하게 된다 (`int`가 4 byte 라고 가정).\n\n```c\nbool bool_array[5];     // 각 원소의 타입은 bool\nint  integer_array[5];  // 각 원소의 타입은 int\nchar char_array[5];     // 각 원소의 타입은 char\nfloat float_array[5];   // 각 원소의 타입은 float\ndouble double_array[5]; // 각 원소의 타입은 double\n\nint* int_pointer_array[5];  // 각 원소의 타입은 int*\nPerson person_obj_array[5]; // 각 원소의 타입은 Person 오브젝트\n```\n\n만약 배열에 타입 정보가 없다면, 컴파일러는 각 원소의 크기를 알 수 없기 때문에 포인터 연산이나 인덱싱을 정확히 수행할 수 없다.\n\n타입이 없는 언어들의 경우 배열에 어떤 타입이든 상관없이 저장할 수 있다. 하지만 사실 [동적 언어의 배열에도 타입은 있다](/note/250201111442).","src/content/note/240610152201.md","ff9330b9768a596d",{"html":328,"metadata":329},"\u003Cp>변수를 선언 할 때 변수의 타입을 명시적으로 지정해줘야 하는 정적 타입 언어들이 있다. 예를 들면 C, C++, Java, C#, … 같은 언어들이 있다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> number      \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> character  \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'a'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> is_alive   \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">float\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> decimal1  \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3.14\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">double\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> decimal2 \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3.14159\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>배열을 선언할 때도 마찬가지로, 배열이 저장할 원소의 타입을 명시해야 한다. 예를 들어 \u003Ccode>int\u003C/code> 타입을 가진 배열은 \u003Ccode>int\u003C/code>만 저장 할 수 있고, \u003Ccode>bool\u003C/code> 타입 배열은 \u003Ccode>bool\u003C/code>만 저장할 수 있다.\u003C/p>\n\u003Cp>타입이 중요한 이유는 배열이 생성될 때 어느정도의 메모리를 할당해야 하는지 파악하는데 필요하기 때문이다. 크기 5를 가진 \u003Ccode>int\u003C/code> 배열의 경우, \u003Ccode>5 * 4 bytes = 20 bytes\u003C/code>가 할당될 것이고, 만약 크기가 100이라면 \u003Ccode>100 * 4 bytes = 400 bytes\u003C/code>가 필요하게 된다 (\u003Ccode>int\u003C/code>가 4 byte 라고 가정).\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">bool\u003C/span>\u003Cspan style=\"color:#FFAB70\"> bool_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\">     // 각 원소의 타입은 bool\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\">  integer_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\">  // 각 원소의 타입은 int\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#FFAB70\"> char_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\">     // 각 원소의 타입은 char\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">float\u003C/span>\u003Cspan style=\"color:#FFAB70\"> float_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\">   // 각 원소의 타입은 float\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">double\u003C/span>\u003Cspan style=\"color:#FFAB70\"> double_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\"> // 각 원소의 타입은 double\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int*\u003C/span>\u003Cspan style=\"color:#FFAB70\"> int_pointer_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\">  // 각 원소의 타입은 int*\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Person \u003C/span>\u003Cspan style=\"color:#FFAB70\">person_obj_array\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003Cspan style=\"color:#6A737D\"> // 각 원소의 타입은 Person 오브젝트\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>만약 배열에 타입 정보가 없다면, 컴파일러는 각 원소의 크기를 알 수 없기 때문에 포인터 연산이나 인덱싱을 정확히 수행할 수 없다.\u003C/p>\n\u003Cp>타입이 없는 언어들의 경우 배열에 어떤 타입이든 상관없이 저장할 수 있다. 하지만 사실 \u003Ca href=\"/note/250201111442\">동적 언어의 배열에도 타입은 있다\u003C/a>.\u003C/p>",{"headings":330,"localImagePaths":331,"remoteImagePaths":332,"frontmatter":333,"imagePaths":334},[],[],[],{"title":320,"folge":321,"uid":317,"pubDate":322,"updatedDate":323},[],"241113121417",{"id":335,"data":337,"body":342,"filePath":343,"digest":344,"rendered":345},{"title":338,"folge":339,"uid":335,"pubDate":340,"updatedDate":341},"단일 연결 리스트는 한 방향으로만 순회할 수 있다","3b1","Feb 7 2025 07:00","April 29 2025 07:50","[연결 리스트는 포인터로 노드를 연결해서 구성된다](/note/241026090000). 단일 연결 리스트의 경우 각 노드가 다음 노드와 연결이 되어 단방향으로만 이동이 가능한 구조를 가진다.\n\n```text\n  head\n---------     ---------     ---------\n| 노드 A | --> | 노드 B | --> | 노드 C | --> NULL\n---------     ---------     ---------\n```\n\n단일 연결 리스트는 순서를 유지해야 하면서 삽입과 삭제의 효율성이 중요한 경우에 유용하다. 다만 탐색 성능은 다소 떨어질 수 있다.\n\n단일 연결 리스트의 대표적인 연산으로는 \n- 삽입(`insert`)\n- 특정 위치 삽입(`insertAt`)\n- 앞쪽 또는 뒤쪽 노드 제거(`pop_front`, `pop_back`)\n- 특정 노드 제거(`removeNode`)\n- 리스트 병합(`concat`)\n- 전체 삭제(`clear`)\n- 출력(`print`) \n\n등이 있다. 일부 연산은 구현 언어나 리스트 구조에 따라 효율성이 달라질 수 있다.","src/content/note/241113121417.md","c96dbd9de9231b6d",{"html":346,"metadata":347},"\u003Cp>\u003Ca href=\"/note/241026090000\">연결 리스트는 포인터로 노드를 연결해서 구성된다\u003C/a>. 단일 연결 리스트의 경우 각 노드가 다음 노드와 연결이 되어 단방향으로만 이동이 가능한 구조를 가진다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>  head\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---------     ---------     ---------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| 노드 A | --> | 노드 B | --> | 노드 C | --> NULL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---------     ---------     ---------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>단일 연결 리스트는 순서를 유지해야 하면서 삽입과 삭제의 효율성이 중요한 경우에 유용하다. 다만 탐색 성능은 다소 떨어질 수 있다.\u003C/p>\n\u003Cp>단일 연결 리스트의 대표적인 연산으로는\u003C/p>\n\u003Cul>\n\u003Cli>삽입(\u003Ccode>insert\u003C/code>)\u003C/li>\n\u003Cli>특정 위치 삽입(\u003Ccode>insertAt\u003C/code>)\u003C/li>\n\u003Cli>앞쪽 또는 뒤쪽 노드 제거(\u003Ccode>pop_front\u003C/code>, \u003Ccode>pop_back\u003C/code>)\u003C/li>\n\u003Cli>특정 노드 제거(\u003Ccode>removeNode\u003C/code>)\u003C/li>\n\u003Cli>리스트 병합(\u003Ccode>concat\u003C/code>)\u003C/li>\n\u003Cli>전체 삭제(\u003Ccode>clear\u003C/code>)\u003C/li>\n\u003Cli>출력(\u003Ccode>print\u003C/code>)\u003C/li>\n\u003C/ul>\n\u003Cp>등이 있다. 일부 연산은 구현 언어나 리스트 구조에 따라 효율성이 달라질 수 있다.\u003C/p>",{"headings":348,"localImagePaths":349,"remoteImagePaths":350,"frontmatter":351,"imagePaths":352},[],[],[],{"title":338,"folge":339,"uid":335,"pubDate":340,"updatedDate":341},[],"241114123800",{"id":353,"data":355,"body":360,"filePath":361,"digest":362,"rendered":363},{"title":356,"folge":357,"uid":353,"pubDate":358,"updatedDate":359},"양방향 연결 리스트는 앞뒤로 이동이 가능하다","3b2","Feb 11 2025 12:15","April 29 2025 08:25","[단일 연결 리스트의 경우 단방향으로만 이동이 가능](/note/241113121417)한 반면, 양방향 연결 리스트는 각 노드가 이전(`prev`) 노드와 다음(`next`) 노드를 가리키는 포인터를 모두 가지고 있어, 리스트를 앞뒤로 자유롭게 순회할 수 있다. 이로 인해 삽입과 삭제 연산의 구현이 단일 연결 리스트보다 더 유연하고 효율적일 수 있다.\n\n```text\n           head                         tail\n         ---------     ---------     ---------\nNULL \u003C-- | 노드 A | \u003C-> | 노드 B | \u003C-> | 노드 C | --> NULL\n         ---------     ---------     ---------\n```\n\n단일 연결 리스트에서 제공하던 연산들(`insert`, `insertAt`, `pop_front`, `pop_back`, `removeNode`, `concat`, `clear`, `print`)은 양방향 리스트에서도 모두 구현할 수 있다. \n\n또한 역방향 순회를 활용하여 다음과 같은 새로운 메서드도 구현 가능하다:\n- `find_last(value)` – 주어진 값을 가진 마지막 노드를 탐색\n- `print_reverse()` – 리스트를 역순으로 출력","src/content/note/241114123800.md","4924e836505da345",{"html":364,"metadata":365},"\u003Cp>\u003Ca href=\"/note/241113121417\">단일 연결 리스트의 경우 단방향으로만 이동이 가능\u003C/a>한 반면, 양방향 연결 리스트는 각 노드가 이전(\u003Ccode>prev\u003C/code>) 노드와 다음(\u003Ccode>next\u003C/code>) 노드를 가리키는 포인터를 모두 가지고 있어, 리스트를 앞뒤로 자유롭게 순회할 수 있다. 이로 인해 삽입과 삭제 연산의 구현이 단일 연결 리스트보다 더 유연하고 효율적일 수 있다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>           head                         tail\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>         ---------     ---------     ---------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>NULL &#x3C;-- | 노드 A | &#x3C;-> | 노드 B | &#x3C;-> | 노드 C | --> NULL\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>         ---------     ---------     ---------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>단일 연결 리스트에서 제공하던 연산들(\u003Ccode>insert\u003C/code>, \u003Ccode>insertAt\u003C/code>, \u003Ccode>pop_front\u003C/code>, \u003Ccode>pop_back\u003C/code>, \u003Ccode>removeNode\u003C/code>, \u003Ccode>concat\u003C/code>, \u003Ccode>clear\u003C/code>, \u003Ccode>print\u003C/code>)은 양방향 리스트에서도 모두 구현할 수 있다.\u003C/p>\n\u003Cp>또한 역방향 순회를 활용하여 다음과 같은 새로운 메서드도 구현 가능하다:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>find_last(value)\u003C/code> – 주어진 값을 가진 마지막 노드를 탐색\u003C/li>\n\u003Cli>\u003Ccode>print_reverse()\u003C/code> – 리스트를 역순으로 출력\u003C/li>\n\u003C/ul>",{"headings":366,"localImagePaths":367,"remoteImagePaths":368,"frontmatter":369,"imagePaths":370},[],[],[],{"title":356,"folge":357,"uid":353,"pubDate":358,"updatedDate":359},[],"241202181900",{"id":371,"data":373,"body":378,"filePath":379,"digest":380,"rendered":381},{"title":374,"folge":375,"uid":371,"pubDate":376,"updatedDate":377},"원형 연결 리스트는 끝과 시작이 연결되어 있다","3b3","Feb 11 2025 12:27","April 30 2025 21:00","단일 연결 리스트와 양방향 연결 리스트 모두, 마지막 노드가 `NULL`을 가리킴으로써 리스트의 끝을 나타낸다.\n\n하지만 만약 마지막 노드가 `NULL`이 아닌 `head`를 가리킨다면, 리스트는 **끝과 시작이 연결된 순환 구조**를 가지게 되며, 이를 원형 연결 리스트(Circular Linked List)라고 한다.\n\n```text\n  head                         \n---------     ---------     ---------\n| 노드 A | --> | 노드 B | --> | 노드 C | --> head --> 노드 A -> ...\n---------     ---------     ---------\n```\n\n원형 연결 리스트는 단일 연결 리스트 구조로도, 양방향 연결 리스트 구조로도 구현할 수 있다. 만약 역방향 순회가 필요하다면 양방향 기반으로 구현하는 것이 적합하며, 단방향 순회만으로 충분하다면 단일 구조로도 충분하다.\n\n단, 원형 연결 리스트는 끝이 명확하지 않기 때문에 **순회 시 반드시 정지 조건을 명확히 지정해야 한다**. 예를 들어 `head` 노드에 다시 도달했는지를 기준으로 순회를 멈추는 방식이 일반적이다. 정지 조건이 없거나 잘못 설정되어 있는 경우, 순회 중 **무한 루프에 빠질 수 있다**.","src/content/note/241202181900.md","eafe271b36532723",{"html":382,"metadata":383},"\u003Cp>단일 연결 리스트와 양방향 연결 리스트 모두, 마지막 노드가 \u003Ccode>NULL\u003C/code>을 가리킴으로써 리스트의 끝을 나타낸다.\u003C/p>\n\u003Cp>하지만 만약 마지막 노드가 \u003Ccode>NULL\u003C/code>이 아닌 \u003Ccode>head\u003C/code>를 가리킨다면, 리스트는 \u003Cstrong>끝과 시작이 연결된 순환 구조\u003C/strong>를 가지게 되며, 이를 원형 연결 리스트(Circular Linked List)라고 한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>  head                         \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---------     ---------     ---------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>| 노드 A | --> | 노드 B | --> | 노드 C | --> head --> 노드 A -> ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>---------     ---------     ---------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>원형 연결 리스트는 단일 연결 리스트 구조로도, 양방향 연결 리스트 구조로도 구현할 수 있다. 만약 역방향 순회가 필요하다면 양방향 기반으로 구현하는 것이 적합하며, 단방향 순회만으로 충분하다면 단일 구조로도 충분하다.\u003C/p>\n\u003Cp>단, 원형 연결 리스트는 끝이 명확하지 않기 때문에 \u003Cstrong>순회 시 반드시 정지 조건을 명확히 지정해야 한다\u003C/strong>. 예를 들어 \u003Ccode>head\u003C/code> 노드에 다시 도달했는지를 기준으로 순회를 멈추는 방식이 일반적이다. 정지 조건이 없거나 잘못 설정되어 있는 경우, 순회 중 \u003Cstrong>무한 루프에 빠질 수 있다\u003C/strong>.\u003C/p>",{"headings":384,"localImagePaths":385,"remoteImagePaths":386,"frontmatter":387,"imagePaths":388},[],[],[],{"title":374,"folge":375,"uid":371,"pubDate":376,"updatedDate":377},[],"250101173519",{"id":389,"data":391,"body":396,"filePath":397,"digest":398,"rendered":399},{"title":392,"folge":393,"uid":389,"pubDate":394,"updatedDate":395},"가변 배열로 길이가 다른 데이터를 효율적으로 저장할 수 있다","1c","Jan 01 2025 17:35","April 26 2025 21:30","가변 배열은 다차원 배열(multidimensional array)의 한 종류이다. 차이점이라고 하면, 각 원소(배열)의 길이가 일정하지 않다는 것.\n```text\n*arr[4] \n            ---------------------\narr[0] ---> | 0 | 1 | 2 |\narr[1] ---> | 6 | 4 |\narr[2] ---> | 1 | 7 | 6 | 8 | 9 |\narr[3] ---> | 5 |\n            ----------------------\n```\n\n가변 배열이 아닌 2차원 배열을 사용했다면, 아래와 같은 구조를 가진다.\n\n```text\narr[4][5]\n            ---------------------\narr[0] ---> | 0 | 1 | 2 | _ | _ |\narr[1] ---> | 6 | 4 | _ | _ | _ |\narr[2] ---> | 1 | 7 | 6 | 8 | 9 |\narr[3] ---> | 5 | _ | _ | _ | _ |\n            ----------------------\n        \n_ => NULL 혹은 기본값을 가지고 있는 상태\n```\n\n가변 배열은 각 요소의 길이가 다른 데이터를 저장할 때 유용한데, 예를 들어 희소 행렬(sparse matrix)처럼 일부 데이터만 존재하는 구조에 적합하다. 모든 요소의 길이가 동일한 다차원 배열보다 필요한 공간만 사용하므로, 메모리를 더 효율적으로 사용할 수 있고 상대적으로 메모리 낭비가 적다.\n\n```c \n#include \u003Cstdio.h>\n#include \u003Cstdlib.h>\n\nint main(int argc, char **argv) {\n\tconst unsigned SIZE = 4;\n\tint *arr[SIZE];\n\n\tunsigned sz[] = {3, 2, 5, 1};\n\n\tfor(int i=0; i\u003CSIZE; ++i)\n\t\tarr[i] = (int *)malloc(sizeof(int) * sz[i]);\n\n\tarr[0][0] = 0;\n\tarr[0][1] = 1;\n\tarr[0][2] = 2;\n\n\tarr[1][0] = 6;\n\tarr[1][1] = 4;\n\n\tarr[2][0] = 1;\n\tarr[2][1] = 7;\n\tarr[2][2] = 6;\n\tarr[2][3] = 8;\n\tarr[2][4] = 9;\n\n\tarr[3][0] = 5;\n\n\tfor(int i=0; i\u003CSIZE; ++i) {\n\t\tprintf(\"Array row #%d: \", i+1);\n\t\tfor(int j=0; j\u003Csz[i]; ++j) {\n\t\t\tprintf(\"%d \", arr[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\n\tfor(int i=0; i\u003CSIZE; ++i)\n\t\tfree(arr[i]);\n\n\treturn 0;\n}\n```\n\n위 코드를 실행한 결과는 아래와 같다.\n```text\nArray row #1: 0 1 2 \nArray row #2: 6 4 \nArray row #3: 1 7 6 8 9 \nArray row #4: 5 \n```","src/content/note/250101173519.md","4461b10937b8543e",{"html":400,"metadata":401},"\u003Cp>가변 배열은 다차원 배열(multidimensional array)의 한 종류이다. 차이점이라고 하면, 각 원소(배열)의 길이가 일정하지 않다는 것.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>*arr[4] \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>            ---------------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[0] ---> | 0 | 1 | 2 |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[1] ---> | 6 | 4 |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[2] ---> | 1 | 7 | 6 | 8 | 9 |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[3] ---> | 5 |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>            ----------------------\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>가변 배열이 아닌 2차원 배열을 사용했다면, 아래와 같은 구조를 가진다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>arr[4][5]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>            ---------------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[0] ---> | 0 | 1 | 2 | _ | _ |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[1] ---> | 6 | 4 | _ | _ | _ |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[2] ---> | 1 | 7 | 6 | 8 | 9 |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>arr[3] ---> | 5 | _ | _ | _ | _ |\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>            ----------------------\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>_ => NULL 혹은 기본값을 가지고 있는 상태\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>가변 배열은 각 요소의 길이가 다른 데이터를 저장할 때 유용한데, 예를 들어 희소 행렬(sparse matrix)처럼 일부 데이터만 존재하는 구조에 적합하다. 모든 요소의 길이가 동일한 다차원 배열보다 필요한 공간만 사용하므로, 메모리를 더 효율적으로 사용할 수 있고 상대적으로 메모리 낭비가 적다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdio.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdlib.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> argc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#FFAB70\">argv\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#F97583\"> unsigned\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SIZE \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[SIZE];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tunsigned\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sz\u003C/span>\u003Cspan style=\"color:#F97583\">[]\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tfor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">SIZE; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\t\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#B392F0\">malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#FFAB70\"> sz\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 8\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">][\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tfor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">SIZE; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\tprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Array row #\u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\u003C/span>\u003Cspan style=\"color:#9ECBFF\">: \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, i\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\t\tfor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> j\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; j\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#FFAB70\">sz\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i]; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">j) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\t\tprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i][j]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\tprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tfor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">SIZE; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\tfree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>위 코드를 실행한 결과는 아래와 같다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Array row #1: 0 1 2 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Array row #2: 6 4 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Array row #3: 1 7 6 8 9 \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Array row #4: 5 \u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":402,"localImagePaths":403,"remoteImagePaths":404,"frontmatter":405,"imagePaths":406},[],[],[],{"title":392,"folge":393,"uid":389,"pubDate":394,"updatedDate":395},[],"250130073757",{"id":407,"data":409,"body":414,"filePath":415,"digest":416,"rendered":417},{"title":410,"folge":411,"uid":407,"pubDate":412,"updatedDate":413},"정적 배열과 동적 배열의 차이","1b1","January 30 2025 20:07","April 28 2025 6:55","> \"배열의 크기에 대한 정보를 가지고 있는가 없는가\"\n\n## 정적 배열\n\n정적 배열은 배열의 크기를 컴파일 시점에 미리 알고 있는 경우 사용한다.  크기를 변경할 수는 없지만, 필요한 메모리 양이 명확하므로 관리가 단순하다.\n\n단점은 배열이 항상 고정된 크기를 가지므로, 사용률이 낮을 경우 **메모리 낭비**가 발생할 수 있다는 점이다. 예를 들어, 크기 100짜리 배열을 선언해놓고 실제로는 10개만 쓴다면, 나머지 90개의 공간은 낭비된다.\n\n## 동적 배열\n\n배열의 크기를 사전에 알 수 없거나, 프로그램 실행 중 크기가 결정되는 경우 동적 배열이 필요하다. 동적 메모리 할당을 통해 배열 크기를 유연하게 늘리거나 줄일 수 있는 것이 장점이다.\n\n단점은 다음과 같다:\n1. **메모리 관리 필요** – 사용한 메모리는 직접 해제해야 하며, 그렇지 않으면 메모리 누수가 발생한다 ([250130081822](/note/250130081822)).\n2. **구현 복잡성 증가** – 특히 다차원 배열에서는 포인터를 사용한 인덱싱이나 반복 처리가 복잡해질 수 있다.\n\n```c\n#include \u003Cstdio.h>\n#include \u003Cstdlib.h>\n\nint main(int argc, char **argv) {\n\t// 정적 배열\n\tint sarr[3] = {1};\n\tprintf(\"sarr[0]: %d\\n\", sarr[0]);\n\n\n\t// 동적 배열\n\tint *darr;\n\tdarr = (int *)malloc(sizeof(int) * 3);\n\tdarr[0] = 1;\n\tprintf(\"darr[0]: %d\\n\", darr[0]);\n\tfree(darr);\n\t\n\treturn 0;\n}\n```","src/content/note/250130073757.md","86c4b937902d3067",{"html":418,"metadata":419},"\u003Cblockquote>\n\u003Cp>“배열의 크기에 대한 정보를 가지고 있는가 없는가”\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"정적-배열\">정적 배열\u003C/h2>\n\u003Cp>정적 배열은 배열의 크기를 컴파일 시점에 미리 알고 있는 경우 사용한다.  크기를 변경할 수는 없지만, 필요한 메모리 양이 명확하므로 관리가 단순하다.\u003C/p>\n\u003Cp>단점은 배열이 항상 고정된 크기를 가지므로, 사용률이 낮을 경우 \u003Cstrong>메모리 낭비\u003C/strong>가 발생할 수 있다는 점이다. 예를 들어, 크기 100짜리 배열을 선언해놓고 실제로는 10개만 쓴다면, 나머지 90개의 공간은 낭비된다.\u003C/p>\n\u003Ch2 id=\"동적-배열\">동적 배열\u003C/h2>\n\u003Cp>배열의 크기를 사전에 알 수 없거나, 프로그램 실행 중 크기가 결정되는 경우 동적 배열이 필요하다. 동적 메모리 할당을 통해 배열 크기를 유연하게 늘리거나 줄일 수 있는 것이 장점이다.\u003C/p>\n\u003Cp>단점은 다음과 같다:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>메모리 관리 필요\u003C/strong> – 사용한 메모리는 직접 해제해야 하며, 그렇지 않으면 메모리 누수가 발생한다 (\u003Ca href=\"/note/250130081822\">250130081822\u003C/a>).\u003C/li>\n\u003Cli>\u003Cstrong>구현 복잡성 증가\u003C/strong> – 특히 다차원 배열에서는 포인터를 사용한 인덱싱이나 반복 처리가 복잡해질 수 있다.\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdio.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdlib.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> argc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#FFAB70\">argv\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// 정적 배열\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#FFAB70\"> sarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"sarr[0]: \u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">sarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// 동적 배열\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">darr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tdarr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#B392F0\">malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tdarr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tprintf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"darr[0]: \u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">darr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tfree\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(darr);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":420,"localImagePaths":427,"remoteImagePaths":428,"frontmatter":429,"imagePaths":430},[421,424],{"depth":105,"slug":422,"text":423},"정적-배열","정적 배열",{"depth":105,"slug":425,"text":426},"동적-배열","동적 배열",[],[],{"title":410,"folge":411,"uid":407,"pubDate":412,"updatedDate":413},[],"250130081822",{"id":431,"data":433,"body":438,"filePath":439,"digest":440,"rendered":441},{"title":434,"folge":435,"uid":431,"pubDate":436,"updatedDate":437},"동적 메모리는 명시적으로 해제해줘야 한다","1b2","January 30 2025 20:34","April 27 2025 7:35","C/C++의 경우 `malloc`이나 `new`와 같은 함수를 사용하여 동적 메모리 할당을 한다. 동적 메모리의 경우 직접 해제하지 않으면 프로그램이 종료될 때까지 계속 남아있게 된다. 메모리가 해제되지 않고 계속해서 축척된다면, 메모리 누수가 발생하고 이는 프로그램 성능의 악영향을 끼칠 수 있다. \n\nC언어의 경우는 `free` 함수를 사용해서 메모리 해제를 할 수 있다.\n```c\nint *arr = (int *)malloc(sizeof(int) * 10);\nfree(arr); // 명시적 메모리 해제\n```\n\nC++의 경우는 `delete[]`를 사용한다.\n```cpp\nint *arr = new int[10];\ndelete[] arr; // 명시적 메모리 해제\n```\n\n가비지 컬렉터가 있는 언어의 경우, 메모리 할당 및 해제를 자동으로 해주는데 ([250131121405](/note/250131121405)), 예를들면 Java, C#, Python, Ruby, ... 등 이 있다.","src/content/note/250130081822.md","033868093e2a7bb1",{"html":442,"metadata":443},"\u003Cp>C/C++의 경우 \u003Ccode>malloc\u003C/code>이나 \u003Ccode>new\u003C/code>와 같은 함수를 사용하여 동적 메모리 할당을 한다. 동적 메모리의 경우 직접 해제하지 않으면 프로그램이 종료될 때까지 계속 남아있게 된다. 메모리가 해제되지 않고 계속해서 축척된다면, 메모리 누수가 발생하고 이는 프로그램 성능의 악영향을 끼칠 수 있다.\u003C/p>\n\u003Cp>C언어의 경우는 \u003Ccode>free\u003C/code> 함수를 사용해서 메모리 해제를 할 수 있다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#B392F0\">malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">free\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(arr);\u003C/span>\u003Cspan style=\"color:#6A737D\"> // 명시적 메모리 해제\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>C++의 경우는 \u003Ccode>delete[]\u003C/code>를 사용한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">delete[]\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr;\u003C/span>\u003Cspan style=\"color:#6A737D\"> // 명시적 메모리 해제\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>가비지 컬렉터가 있는 언어의 경우, 메모리 할당 및 해제를 자동으로 해주는데 (\u003Ca href=\"/note/250131121405\">250131121405\u003C/a>), 예를들면 Java, C#, Python, Ruby, … 등 이 있다.\u003C/p>",{"headings":444,"localImagePaths":445,"remoteImagePaths":446,"frontmatter":447,"imagePaths":448},[],[],[],{"title":434,"folge":435,"uid":431,"pubDate":436,"updatedDate":437},[],"250101052312",{"id":449,"data":451,"body":456,"filePath":457,"digest":458,"rendered":459},{"title":452,"folge":453,"uid":449,"pubDate":454,"updatedDate":455},"동적 배열은 런타임에 메모리가 할당된다","1b","Jan 01 2025 05:23","April 26 2025 14:15","배열을 선언할 때, 배열의 크기에 대한 정보가 없거나 프로그램 시작 전 까지 알 수 없다면, 동적 배열을 사용하는 것이 좋다.\n\n동적 배열의 경우 런타임 때 크기를 설정하여 메모리를 동적으로 할당 할 수 있는데, 예를들면 배열의 크기를 사용자로부터 입력을 받아, 임의의 크기를 가진 배열을 만들 수 있다. 이는 프로그램이 실행되는 도중 배열의 크기를 줄이거나 늘리는 것이 가능하게 해준다. 하지만 할당한 [동적 메모리는 명시적으로 해제를 해주어야 한다](/note/250130081822).\n\n아래 예제는 사용자로부터 배열의 크기를 입력받고, 해당 크기의 배열을 생성한다.\n그리고 `i`번 째 원소에 `i+1`의 값을 넣고 출력을 한다.\n\n```cpp\n#include \u003Ciostream>\n\nint main() {\n\tint *arr;\n\tint size;\n\t\n\tstd::cout \u003C\u003C \"array size: \";\n\tstd::cin >> size;\n\n\t// 메모리 할당\n\tarr = new int[size];\n\n\tfor(int i=0; i\u003Csize; ++i) {\n\t\tarr[i] = i+1;\n\n\t\tstd::cout \u003C\u003C \"arr[\" \u003C\u003C i \u003C\u003C \"] = \" \u003C\u003C arr[i] \u003C\u003C std::endl;\n\t}\n\n\t// 메모리 해제\n\tdelete[] arr;\n\n\treturn 0;\n}\n```\n\n실행 결과\n```sh\narray size: 5\narr[0] = 1\narr[1] = 2\narr[2] = 3\narr[3] = 4\narr[4] = 5\n```","src/content/note/250101052312.md","e3cfbbea9177d3f5",{"html":460,"metadata":461},"\u003Cp>배열을 선언할 때, 배열의 크기에 대한 정보가 없거나 프로그램 시작 전 까지 알 수 없다면, 동적 배열을 사용하는 것이 좋다.\u003C/p>\n\u003Cp>동적 배열의 경우 런타임 때 크기를 설정하여 메모리를 동적으로 할당 할 수 있는데, 예를들면 배열의 크기를 사용자로부터 입력을 받아, 임의의 크기를 가진 배열을 만들 수 있다. 이는 프로그램이 실행되는 도중 배열의 크기를 줄이거나 늘리는 것이 가능하게 해준다. 하지만 할당한 \u003Ca href=\"/note/250130081822\">동적 메모리는 명시적으로 해제를 해주어야 한다\u003C/a>.\u003C/p>\n\u003Cp>아래 예제는 사용자로부터 배열의 크기를 입력받고, 해당 크기의 배열을 생성한다.\n그리고 \u003Ccode>i\u003C/code>번 째 원소에 \u003Ccode>i+1\u003C/code>의 값을 넣고 출력을 한다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"cpp\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;iostream>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tint\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tstd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::cout \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"array size: \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tstd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::cin \u003C/span>\u003Cspan style=\"color:#F97583\">>>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> size;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// 메모리 할당\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tarr \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#F97583\"> int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[size];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tfor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">size; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\tarr[i] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\tstd\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::cout \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"arr[\"\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"] = \"\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr[i] \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\"> std\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::endl;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// 메모리 해제\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tdelete[]\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> arr;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>실행 결과\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">array\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> size:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">arr[0]\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">arr[1]\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">arr[2]\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">arr[3]\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">arr[4]\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":462,"localImagePaths":463,"remoteImagePaths":464,"frontmatter":465,"imagePaths":466},[],[],[],{"title":452,"folge":453,"uid":449,"pubDate":454,"updatedDate":455},[],"250201115105",{"id":467,"data":469,"body":474,"filePath":475,"digest":476,"rendered":477},{"title":470,"folge":471,"uid":467,"pubDate":472,"updatedDate":473},"void* 타입의 배열을 사용하면 어떤 타입이든 담을 수 있다","1d1a","February 1 2025 12:11","April 27 2025 19:00","기본적으로 [배열은 동일 타입의 원소만 요소로 담을 수 있지만](/note/240610152201), 동적 언어인 파이썬이나 루비 같은 경우 여러 타입들을 배열에 저장할 수 있다. 하지만 이런 동적 언어들의 배열도 사실 내부적으로는 모두 동일한 타입을 공유하고 있는데 바로 포인터 혹은 오브젝트의 참조이다 ([250201111442](/note/250201111442)) (언어마다 내부적으로 구현은 다를 수 있겠지만 개념은 비슷할 것이다).\n\nC언어를 기반으로 둔 언어의 경우 void 포인터 (`void*`)를 사용하여 동적 언어의 배열을 구현해 볼 수 있다.\n\n포인터의 경우 어떤 타입이든지 항상 동일한 크기를 가지기 때문에 void* 타입을 가진 배열을 만들고, 각 요소에 원하는 데이터 타입의 **포인터를 담으면**, 어떤 타입이든 저장할 수 있게 된다.\n```c\n#include \u003Cstdio.h>\n#include \u003Cstdlib.h>\n#include \u003Cstring.h>\n\nint main(int argc, char **argv) {\n\tconst unsigned SIZE = 4;\n    void* arr[SIZE];\n\n    // Store an integer\n    arr[0] = malloc(sizeof(int));\n    *(int *)arr[0] = 17;\n\n    // Store a float\n    arr[1] = malloc(sizeof(float));\n    *(float *)arr[1] = 3.14;\n\n    // Store boolean\n    arr[2] = malloc(sizeof(int));\n    *(int *)arr[2] = 1;\n\n    // Store a string\n    arr[3] = malloc(strlen(\"seventeen\") + 1);\n    strcpy((char*)arr[3], \"seventeen\");\n\n    // Print values\n    printf(\"%d\\n\", *(int *)(arr[0]));\n    printf(\"%.2f\\n\", *(float *)(arr[1]));\n    printf(\"%s\\n\", *(int *)(arr[2]) == 1 ? \"true\" : \"false\");\n    printf(\"%s\\n\", (char *)arr[3]);\n\n    // Free allocated memory\n    for(int i = 0; i \u003C SIZE; ++i)\n        free(arr[i]);\n\n    return 0;\n}\n```\n\n출력 결과는 아래와 같다.\n```text\n17\n3.14\ntrue\nseventeen\n```","src/content/note/250201115105.md","1e8b89ded0cfda43",{"html":478,"metadata":479},"\u003Cp>기본적으로 \u003Ca href=\"/note/240610152201\">배열은 동일 타입의 원소만 요소로 담을 수 있지만\u003C/a>, 동적 언어인 파이썬이나 루비 같은 경우 여러 타입들을 배열에 저장할 수 있다. 하지만 이런 동적 언어들의 배열도 사실 내부적으로는 모두 동일한 타입을 공유하고 있는데 바로 포인터 혹은 오브젝트의 참조이다 (\u003Ca href=\"/note/250201111442\">250201111442\u003C/a>) (언어마다 내부적으로 구현은 다를 수 있겠지만 개념은 비슷할 것이다).\u003C/p>\n\u003Cp>C언어를 기반으로 둔 언어의 경우 void 포인터 (\u003Ccode>void*\u003C/code>)를 사용하여 동적 언어의 배열을 구현해 볼 수 있다.\u003C/p>\n\u003Cp>포인터의 경우 어떤 타입이든지 항상 동일한 크기를 가지기 때문에 void* 타입을 가진 배열을 만들고, 각 요소에 원하는 데이터 타입의 \u003Cstrong>포인터를 담으면\u003C/strong>, 어떤 타입이든 저장할 수 있게 된다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdio.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;stdlib.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">#include\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> &#x3C;string.h>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#B392F0\"> main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> argc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#FFAB70\">argv\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#F97583\"> unsigned\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SIZE \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    void*\u003C/span>\u003Cspan style=\"color:#FFAB70\"> arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[SIZE];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Store an integer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Store a float\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">float\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3.14\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Store boolean\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">sizeof\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Store a string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">    arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> malloc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">strlen\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"seventeen\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    strcpy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((\u003C/span>\u003Cspan style=\"color:#F97583\">char*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"seventeen\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Print values\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)(\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%.2f\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)(\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%s\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)(\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">==\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> ?\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"true\"\u003C/span>\u003Cspan style=\"color:#F97583\"> :\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"false\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%s\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#F97583\">char\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Free allocated memory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    for\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; i \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> SIZE; \u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">i)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        free\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[i]);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>출력 결과는 아래와 같다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"text\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>17\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>3.14\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>seventeen\u003C/span>\u003C/span>\u003C/code>\u003C/pre>",{"headings":480,"localImagePaths":481,"remoteImagePaths":482,"frontmatter":483,"imagePaths":484},[],[],[],{"title":470,"folge":471,"uid":467,"pubDate":472,"updatedDate":473},[],"250131121405",{"id":485,"data":487,"body":492,"filePath":493,"digest":494,"rendered":495},{"title":488,"folge":489,"uid":485,"pubDate":490,"updatedDate":491},"루비는 사용되지 않는 메모리를 알아서 회수한다","1b2a","January 31 2025 12:25","April 26 2025 20:55","C/C++와 같이 직접 메모리 관리를 해야하는 언어의 경우, [메모리의 할당 및 해제를 명시적으로 해주어야 한다](/note/250130081822). 하지만 Ruby와 같이 가비지 컬렉터가 있는 언어의 경우, 메모리 관리를 알아서 해주기 때문에 메모리를 직접 할당하거나 해제할 필요가 없다.\n\n아래 `name`과 `age`를 인자로 받는 `Person` 클래스가 있다.\n\n```rb\nclass Person\n\tdef initialize(name, age)\n\t\t@name = name\n\t\t@age = age\n\tend\n\n\tdef to_s\n\t\t\"Name: #{@name}  Age: #{@age}\"\n\tend\nend\n\n10.times do |i|\n\tperson = Person.new(\"person#{i}\", 17 + i.to_i)\n\tputs person.to_s\nend\n```\n\n`Person.new`를 사용해서 `Person` 오브젝트를 10번 반복해서 생성해주고 있지만 따로 해제를 하고 있지는 않다. C++이었다면 `person` 이라는 변수에 메모리를 할당했고, [해제하지 않은 채 새로운 메모리를 다시 할당 한 시점에 이미 메모리 누수가 발생한다](/note/250130081822). 왜냐면 메모리 해제를 하고 싶어도, 해당 메모리를 가리키고 있는 변수가 더 이상 없기 때문. \n\n하지만 루비의 경우 가비지 컬렉터가 해당 작업을 알아서 해준다. 반복문을 보면 각 반복에서 `person` 변수에 새 객체가 할당되고, 이전 객체는 도달할 수 없는 상태가 된다. 해당 객체에 접근할 수 없고 참조하고 있는 변수조차 없다면, 루비의 가비지 컬렉터는 해당 객체를 삭제하고 할당된 메모리를 해제한다.","src/content/note/250131121405.md","a9de663c9b0db718",{"html":496,"metadata":497},"\u003Cp>C/C++와 같이 직접 메모리 관리를 해야하는 언어의 경우, \u003Ca href=\"/note/250130081822\">메모리의 할당 및 해제를 명시적으로 해주어야 한다\u003C/a>. 하지만 Ruby와 같이 가비지 컬렉터가 있는 언어의 경우, 메모리 관리를 알아서 해주기 때문에 메모리를 직접 할당하거나 해제할 필요가 없다.\u003C/p>\n\u003Cp>아래 \u003Ccode>name\u003C/code>과 \u003Ccode>age\u003C/code>를 인자로 받는 \u003Ccode>Person\u003C/code> 클래스가 있다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Person\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tdef\u003C/span>\u003Cspan style=\"color:#B392F0\"> initialize\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(name, age)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t@name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> name\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t@age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> age\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tend\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tdef\u003C/span>\u003Cspan style=\"color:#B392F0\"> to_s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t\t\"Name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">@name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">  Age: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">@age\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tend\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">times\u003C/span>\u003Cspan style=\"color:#F97583\"> do\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> |i|\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">\tperson\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Person\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"person\u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{i}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> i.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_i\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">\tputs\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> person.\u003C/span>\u003Cspan style=\"color:#B392F0\">to_s\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>Person.new\u003C/code>를 사용해서 \u003Ccode>Person\u003C/code> 오브젝트를 10번 반복해서 생성해주고 있지만 따로 해제를 하고 있지는 않다. C++이었다면 \u003Ccode>person\u003C/code> 이라는 변수에 메모리를 할당했고, \u003Ca href=\"/note/250130081822\">해제하지 않은 채 새로운 메모리를 다시 할당 한 시점에 이미 메모리 누수가 발생한다\u003C/a>. 왜냐면 메모리 해제를 하고 싶어도, 해당 메모리를 가리키고 있는 변수가 더 이상 없기 때문.\u003C/p>\n\u003Cp>하지만 루비의 경우 가비지 컬렉터가 해당 작업을 알아서 해준다. 반복문을 보면 각 반복에서 \u003Ccode>person\u003C/code> 변수에 새 객체가 할당되고, 이전 객체는 도달할 수 없는 상태가 된다. 해당 객체에 접근할 수 없고 참조하고 있는 변수조차 없다면, 루비의 가비지 컬렉터는 해당 객체를 삭제하고 할당된 메모리를 해제한다.\u003C/p>",{"headings":498,"localImagePaths":499,"remoteImagePaths":500,"frontmatter":501,"imagePaths":502},[],[],[],{"title":488,"folge":489,"uid":485,"pubDate":490,"updatedDate":491},[],"250201111442",{"id":503,"data":505,"body":510,"filePath":511,"digest":512,"rendered":513},{"title":506,"folge":507,"uid":503,"pubDate":508,"updatedDate":509},"동적 언어인 루비의 배열에도 타입은 존재한다","1d1","February 1 2025 11:35","April 27 2025 10:40","루비는 동적 타입 언어이기 때문에 배열에 어떤 타입이든 저장할 수 있다.  \n아래 예시에서는 숫자, 문자열, 실수, 불리언, `nil`, 그리고 함수까지 배열에 저장하고 있다.\n```rb\ndef foo()\n\t'function'\nend\n\nlist = [17, \"seventeen\", 1.7, true, false, method(:foo), nil]\nputs list\n```\n\n출력 결과는 다음과 같다.\n```rb\n17\nseventeen\n1.7\ntrue\nfalse\n#\u003CMethod: Object#foo>\n\n```\n\n마지막 줄은 `nil`이 출력된 것으로, `nil.to_s`가 빈 문자열을 반환하여 빈 줄로 보이는 것이다.\n\n이처럼 루비 배열은 타입이 없는 것처럼 보일 수 있지만, 사실 모든 요소는 `Object`를 상속한 객체다.\n\n```rb\nfor v in list\n\tputs \"'#{v}' is Object? #{v.kind_of? Object}\"\nend\n\n# '17' is Object? true\n# 'seventeen' is Object? true\n# '1.7' is Object? true\n# 'true' is Object? true\n# 'false' is Object? true\n# '#\u003CMethod: Object#foo>' is Object? true\n# '' is Object? true\n\n```\n\n각 요소의 클래스도 확인해보자:\n\n```rb\nlist.each { |elem| puts elem.class }\n\n# Integer  \n# String  \n# Float  \n# TrueClass  \n# FalseClass  \n# Method  \n# NilClass  \n```\n\n이처럼 정적 타입 언어와는 다르게, 루비는 모든 값을 `Object`로 취급함으로써 배열의 '공통 타입'을 확보한다 ([240610152201](/note/240610152201)). 이는 고정된 타입 제약은 없지만, 내부적으로는 타입 계층이 명확하게 존재함을 보여준다.","src/content/note/250201111442.md","922b7555b13e89a6",{"html":514,"metadata":515},"\u003Cp>루비는 동적 타입 언어이기 때문에 배열에 어떤 타입이든 저장할 수 있다.\u003Cbr>\n아래 예시에서는 숫자, 문자열, 실수, 불리언, \u003Ccode>nil\u003C/code>, 그리고 함수까지 배열에 저장하고 있다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\t'function'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">list\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"seventeen\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#B392F0\">method\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">:foo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">), \u003C/span>\u003Cspan style=\"color:#79B8FF\">nil\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> list\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>출력 결과는 다음과 같다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">17\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">seventeen\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">1.7\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">#&#x3C;Method: Object#foo>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>마지막 줄은 \u003Ccode>nil\u003C/code>이 출력된 것으로, \u003Ccode>nil.to_s\u003C/code>가 빈 문자열을 반환하여 빈 줄로 보이는 것이다.\u003C/p>\n\u003Cp>이처럼 루비 배열은 타입이 없는 것처럼 보일 수 있지만, 사실 모든 요소는 \u003Ccode>Object\u003C/code>를 상속한 객체다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">for\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> v \u003C/span>\u003Cspan style=\"color:#F97583\">in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> list\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">\tputs\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"'\u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{v}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">' is Object? \u003C/span>\u003Cspan style=\"color:#9ECBFF\">#{v.\u003C/span>\u003Cspan style=\"color:#B392F0\">kind_of?\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Object\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">end\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># '17' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 'seventeen' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># '1.7' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 'true' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 'false' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># '#&#x3C;Method: Object#foo>' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># '' is Object? true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>각 요소의 클래스도 확인해보자:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"rb\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">list.\u003C/span>\u003Cspan style=\"color:#B392F0\">each\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { |elem| \u003C/span>\u003Cspan style=\"color:#79B8FF\">puts\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> elem.\u003C/span>\u003Cspan style=\"color:#B392F0\">class\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Integer  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># String  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Float  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># TrueClass  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># FalseClass  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Method  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># NilClass  \u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이처럼 정적 타입 언어와는 다르게, 루비는 모든 값을 \u003Ccode>Object\u003C/code>로 취급함으로써 배열의 ‘공통 타입’을 확보한다 (\u003Ca href=\"/note/240610152201\">240610152201\u003C/a>). 이는 고정된 타입 제약은 없지만, 내부적으로는 타입 계층이 명확하게 존재함을 보여준다.\u003C/p>",{"headings":516,"localImagePaths":517,"remoteImagePaths":518,"frontmatter":519,"imagePaths":520},[],[],[],{"title":506,"folge":507,"uid":503,"pubDate":508,"updatedDate":509},[],"250203120334",{"id":521,"data":523,"body":528,"filePath":529,"digest":530,"rendered":531},{"title":524,"folge":525,"uid":521,"pubDate":526,"updatedDate":527},"조회 연산이 잦은 경우 배열이 적합한 자료구조이다","1e","February 3 2025 12:22","April 28 2025 06:35","프로그램에서 데이터의 **삽입 및 삭제 연산보다 조회 연산이 월등히 많을 경우**, 배열(Array)을 사용하는 것이 적합하다. 배열은 인덱스를 통해 원하는 위치의 원소에 `O(1)` 시간으로 접근할 수 있는 자료구조이다.\n\n```c\nint arr[10] = {0};\n\n// 3번째 원소 접근 = O(1)\narr[2] = 7;\n\n// 3번째 원소 조회 = O(1)\nprintf(\"%d\\n\", arr[2]);\n```\n\n하지만 배열은 삽입 및 삭제 연산에서는 비효율적이다. 원소를 중간에 삽입하거나 삭제할 경우, 이후의 원소들을 한 칸씩 이동해야 하기 때문에 일반적으로 `O(N)`의 시간이 걸린다.\n\n따라서 조회 연산이 아닌, **삽입·삭제가 빈번한 상황에서는** 배열보다 연결 리스트(Linked List)나 해시 테이블(Hash Table)과 같은 다른 자료구조가 더 적합할 수 있다.","src/content/note/250203120334.md","bba81151975a6691",{"html":532,"metadata":533},"\u003Cp>프로그램에서 데이터의 \u003Cstrong>삽입 및 삭제 연산보다 조회 연산이 월등히 많을 경우\u003C/strong>, 배열(Array)을 사용하는 것이 적합하다. 배열은 인덱스를 통해 원하는 위치의 원소에 \u003Ccode>O(1)\u003C/code> 시간으로 접근할 수 있는 자료구조이다.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">int\u003C/span>\u003Cspan style=\"color:#FFAB70\"> arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 3번째 원소 접근 = O(1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 3번째 원소 조회 = O(1)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">printf\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">%d\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">arr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">[\u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>하지만 배열은 삽입 및 삭제 연산에서는 비효율적이다. 원소를 중간에 삽입하거나 삭제할 경우, 이후의 원소들을 한 칸씩 이동해야 하기 때문에 일반적으로 \u003Ccode>O(N)\u003C/code>의 시간이 걸린다.\u003C/p>\n\u003Cp>따라서 조회 연산이 아닌, \u003Cstrong>삽입·삭제가 빈번한 상황에서는\u003C/strong> 배열보다 연결 리스트(Linked List)나 해시 테이블(Hash Table)과 같은 다른 자료구조가 더 적합할 수 있다.\u003C/p>",{"headings":534,"localImagePaths":535,"remoteImagePaths":536,"frontmatter":537,"imagePaths":538},[],[],[],{"title":524,"folge":525,"uid":521,"pubDate":526,"updatedDate":527},[],"250204123024",{"id":539,"data":541,"body":546,"filePath":547,"digest":548,"rendered":549},{"title":542,"folge":543,"uid":539,"pubDate":544,"updatedDate":545},"head 포인터를 잃으면 메모리 누수가 발생할 수 있다","3a","February 4 2025 12:51","April 28 2025 21:00","연결 리스트는 노드들이 연결되어 구성되며, 그 중 첫 번째 노드를 **머리(head)** 라고 한다.\n\n단일 연결 리스트에서 새로운 노드를 삽입하려면, 보통 **머리부터 시작하여 마지막 노드까지 순회한 뒤**, 마지막 노드의 `next` 포인터를 새 노드에 연결하는 방식으로 삽입이 이루어진다. (단, tail 포인터를 유지하면 이 과정을 생략할 수 있다.)\n\n예를 들어, 아래는 `head` 노드를 포함해 다섯 개의 노드를 순차적으로 연결한 코드이다:\n```c\nNode *head = createNode(1);\ninsertNode(head, 2);\ninsertNode(head, 3);\ninsertNode(head, 4);\ninsertNode(head, 5);\n```\n\n`head`부터 시작해 노드들을 순회하면 다음과 같은 출력이 된다:\n\n```c\nprintAll(head); // 1 -> 2 -> 3 -> 4 -> 5\n```\n\n하지만, 만약 실수로 `head` 포인터를 덮어써버린다면 어떻게 될까?\n\n```c\nhead = other_head;\n```\n\n이 경우, 기존 `head`가 가리키고 있던 노드들과 그 이후에 연결된 모든 노드들의 주소를 잃게 되어, **해당 메모리들을 해제할 수 없게 된다.** 이는 명백한 **메모리 누수(leak)** 로 이어진다.\n\n이중 연결 리스트나 원형 연결 리스트, 혹은 `tail` 포인터를 유지하는 방식은 이런 문제를 부분적으로 완화할 수 있다. 하지만 무엇보다 중요한 것은, **`head` 포인터를 안전하게 관리하는 습관을 기르는 것**이다. 실수로 이를 덮어쓰지 않도록 주의해야 하며, 필요할 경우 백업 포인터를 두는 것이 좋다.","src/content/note/250204123024.md","cd13889254b8fd8e",{"html":550,"metadata":551},"\u003Cp>연결 리스트는 노드들이 연결되어 구성되며, 그 중 첫 번째 노드를 \u003Cstrong>머리(head)\u003C/strong> 라고 한다.\u003C/p>\n\u003Cp>단일 연결 리스트에서 새로운 노드를 삽입하려면, 보통 \u003Cstrong>머리부터 시작하여 마지막 노드까지 순회한 뒤\u003C/strong>, 마지막 노드의 \u003Ccode>next\u003C/code> 포인터를 새 노드에 연결하는 방식으로 삽입이 이루어진다. (단, tail 포인터를 유지하면 이 과정을 생략할 수 있다.)\u003C/p>\n\u003Cp>예를 들어, 아래는 \u003Ccode>head\u003C/code> 노드를 포함해 다섯 개의 노드를 순차적으로 연결한 코드이다:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">Node \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> createNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(head, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(head, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(head, \u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">insertNode\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(head, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>head\u003C/code>부터 시작해 노드들을 순회하면 다음과 같은 출력이 된다:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">printAll\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(head);\u003C/span>\u003Cspan style=\"color:#6A737D\"> // 1 -> 2 -> 3 -> 4 -> 5\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>하지만, 만약 실수로 \u003Ccode>head\u003C/code> 포인터를 덮어써버린다면 어떻게 될까?\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"c\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">head \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> other_head;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이 경우, 기존 \u003Ccode>head\u003C/code>가 가리키고 있던 노드들과 그 이후에 연결된 모든 노드들의 주소를 잃게 되어, \u003Cstrong>해당 메모리들을 해제할 수 없게 된다.\u003C/strong> 이는 명백한 \u003Cstrong>메모리 누수(leak)\u003C/strong> 로 이어진다.\u003C/p>\n\u003Cp>이중 연결 리스트나 원형 연결 리스트, 혹은 \u003Ccode>tail\u003C/code> 포인터를 유지하는 방식은 이런 문제를 부분적으로 완화할 수 있다. 하지만 무엇보다 중요한 것은, \u003Cstrong>\u003Ccode>head\u003C/code> 포인터를 안전하게 관리하는 습관을 기르는 것\u003C/strong>이다. 실수로 이를 덮어쓰지 않도록 주의해야 하며, 필요할 경우 백업 포인터를 두는 것이 좋다.\u003C/p>",{"headings":552,"localImagePaths":553,"remoteImagePaths":554,"frontmatter":555,"imagePaths":556},[],[],[],{"title":542,"folge":543,"uid":539,"pubDate":544,"updatedDate":545},[],"250205072700",{"id":557,"data":559,"body":564,"filePath":565,"digest":566,"rendered":567},{"title":560,"folge":561,"uid":557,"pubDate":562,"updatedDate":563},"연결 리스트의 종류는 크게 세 가지로 나뉜다","3b","February 5 2025 7:35","April 29 2025 07:35","연결 리스트의 요소인 노드의 구조에 따라서 연결 리스트의 타입이 결정된다.\n\n- [단일 연결 리스트 (Singly Linked List) - 단방향 순회](/note/241113121417)\n- [양방향 연결 리스트 (Doubly Linked List) - 양방향 순회](/note/241114123800)\n- 원형 연결 리스트 (Circular Linked List) - 끝이없는 구조\n\n세 종류의 연결 리스트 모두 각각의 장단점이 있다. 단일 리스트의 경우 구현이 간단하고, 양방향 연결 리스트는 노드 간 앞뒤 모두 접근이 가능하므로, 중간 노드의 삽입과 삭제가 단일 리스트보다 효율적이다.\n\n원형 연결 리스트는 단일 연결 리스트나 양방향 연결 리스트 구조에서 파생될 수 있으며, 마지막 노드가 첫 번째 노드를 가리키는 순환 구조를 가지기에 반복 순회에 유리하다.","src/content/note/250205072700.md","f36a0c371f9649ed",{"html":568,"metadata":569},"\u003Cp>연결 리스트의 요소인 노드의 구조에 따라서 연결 리스트의 타입이 결정된다.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/note/241113121417\">단일 연결 리스트 (Singly Linked List) - 단방향 순회\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/note/241114123800\">양방향 연결 리스트 (Doubly Linked List) - 양방향 순회\u003C/a>\u003C/li>\n\u003Cli>원형 연결 리스트 (Circular Linked List) - 끝이없는 구조\u003C/li>\n\u003C/ul>\n\u003Cp>세 종류의 연결 리스트 모두 각각의 장단점이 있다. 단일 리스트의 경우 구현이 간단하고, 양방향 연결 리스트는 노드 간 앞뒤 모두 접근이 가능하므로, 중간 노드의 삽입과 삭제가 단일 리스트보다 효율적이다.\u003C/p>\n\u003Cp>원형 연결 리스트는 단일 연결 리스트나 양방향 연결 리스트 구조에서 파생될 수 있으며, 마지막 노드가 첫 번째 노드를 가리키는 순환 구조를 가지기에 반복 순회에 유리하다.\u003C/p>",{"headings":570,"localImagePaths":571,"remoteImagePaths":572,"frontmatter":573,"imagePaths":574},[],[],[],{"title":560,"folge":561,"uid":557,"pubDate":562,"updatedDate":563},[],"250208110343",{"id":575,"data":577,"body":581,"filePath":582,"digest":583,"rendered":584},{"title":578,"folge":180,"uid":575,"pubDate":579,"updatedDate":580},"나만의 MacBook 세팅 가이드","February 8 2025 11:03","April 26 2025 13:00","## 패키지 매니저 설치\n\nmacOS 용 패키지 매니저인 Homebrew 설치.\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew update\nbrew upgrade\n```\n\n## GUI Applications 설치\n\n```bash\nbrew install --cask \\\n\tbitwarden \\\n\tobsidian \\\n\trectangle \\\n\tspotify \\\n\titerm2\n```\n\n- bitwarden - 비밀번호 관리\n- obsidian - 노트 정리\n- rectangle - 키보드 숏컷으로 윈도우 창 관리 가능\n- spotify - 음악 없이는 못 살아\n- iterm2 - 맥북 기본 터미널 대체 용\n\n그리고 시간 관리를 위해 심플한 타이머인 [Onigiri - Minimal Timer](https://apps.apple.com/us/app/onigiri-minimal-timer/id1639917298?mt=12)와, 키보드 설정을 위한 [Karabiner-elements](https://karabiner-elements.pqrs.org/)도 설치.\n\n가상환경 공간 세팅을 위한 [Immersed](https://immersed.com/download)도 설치 ([모니터에서 가상현실로](/writing/5)).\n\n## CLI Applications 설치\n\n```bash\nbrew install \\\n\tcurl \\\n\tgit \\\n\tgh \\\n\tgpg \\\n\tpinentry-mac \\\n\tmise\n```\n\n- cURL - URL로 데이터를 전송해 서버에서 데이터를 보내거나 받아올 때 사용하는 도구\n- git - 버전 관리 시스템\n- gh - 깃허브 CLI\n- gpg - OpenPGP encryption and sigining tool\n- pinentry-mac - allow GPG to read pass-phrases and PIN numbers\n- mise - 런타임 버전 매니저\n\n## oh-my-zsh\n\n`zsh`과 `oh-my-zsh` 설치.\n\n```sh\nbrew install zsh\nzsh\n\n# oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n*powerlevel10k* 테마 설치.\n```sh\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\n```\n\n `~/.zshrc` 파일을 열고 아래와 같이 수정하여 *powerlevel10k* 테마 활성화.\n```sh\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n```\n\n`source ~/.zshrc` 명령어 실행해 준 다음 테마 설정에 들어가면 된다. 나중에 `p10k configure` 명령어로 언제든지 다시 설정할 수 있다. \n\n---\n\n기타 플러그인:\n```sh\nbrew install zsh-syntax-highlighting\n\n# ~/.zshrc 마지막 줄에 추가\nsource /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n```\n\n\n## 기타\n\n터미널에 표시되는 PC 이름과 호스트 이름 변경.\n\n```sh\nsudo scutil --set ComputerName \"newname\"\nsudo scutil --set LocalHostName \"newname\"\nsudo scutil --set HostName \"newname\"\n```\n\n또는 아래의 메뉴에서도 변경 가능.\n\n`System Settings -> Sharing -> Local Hostname -> edit`","src/content/note/250208110343.md","92f8f7ff783e86d9",{"html":585,"metadata":586},"\u003Ch2 id=\"패키지-매니저-설치\">패키지 매니저 설치\u003C/h2>\n\u003Cp>macOS 용 패키지 매니저인 Homebrew 설치.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">/bin/bash\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"$(\u003C/span>\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -fsSL\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> update\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> upgrade\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"gui-applications-설치\">GUI Applications 설치\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --cask\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tbitwarden\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tobsidian\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\trectangle\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tspotify\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\titerm2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>bitwarden - 비밀번호 관리\u003C/li>\n\u003Cli>obsidian - 노트 정리\u003C/li>\n\u003Cli>rectangle - 키보드 숏컷으로 윈도우 창 관리 가능\u003C/li>\n\u003Cli>spotify - 음악 없이는 못 살아\u003C/li>\n\u003Cli>iterm2 - 맥북 기본 터미널 대체 용\u003C/li>\n\u003C/ul>\n\u003Cp>그리고 시간 관리를 위해 심플한 타이머인 \u003Ca href=\"https://apps.apple.com/us/app/onigiri-minimal-timer/id1639917298?mt=12\" rel=\"nofollow\">Onigiri - Minimal Timer\u003Cspan> ↗\u003C/span>\u003C/a>와, 키보드 설정을 위한 \u003Ca href=\"https://karabiner-elements.pqrs.org/\" rel=\"nofollow\">Karabiner-elements\u003Cspan> ↗\u003C/span>\u003C/a>도 설치.\u003C/p>\n\u003Cp>가상환경 공간 세팅을 위한 \u003Ca href=\"https://immersed.com/download\" rel=\"nofollow\">Immersed\u003Cspan> ↗\u003C/span>\u003C/a>도 설치 (\u003Ca href=\"/writing/5\">모니터에서 가상현실로\u003C/a>).\u003C/p>\n\u003Ch2 id=\"cli-applications-설치\">CLI Applications 설치\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tcurl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tgit\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tgh\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tgpg\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tpinentry-mac\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">\tmise\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>cURL - URL로 데이터를 전송해 서버에서 데이터를 보내거나 받아올 때 사용하는 도구\u003C/li>\n\u003Cli>git - 버전 관리 시스템\u003C/li>\n\u003Cli>gh - 깃허브 CLI\u003C/li>\n\u003Cli>gpg - OpenPGP encryption and sigining tool\u003C/li>\n\u003Cli>pinentry-mac - allow GPG to read pass-phrases and PIN numbers\u003C/li>\n\u003Cli>mise - 런타임 버전 매니저\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"oh-my-zsh\">oh-my-zsh\u003C/h2>\n\u003Cp>\u003Ccode>zsh\u003C/code>과 \u003Ccode>oh-my-zsh\u003C/code> 설치.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> zsh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">zsh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># oh-my-zsh\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sh\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"$(\u003C/span>\u003Cspan style=\"color:#B392F0\">curl\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -fsSL\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>powerlevel10k\u003C/em> 테마 설치.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/romkatv/powerlevel10k.git\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $ZSH_CUSTOM\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/themes/powerlevel10k\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>~/.zshrc\u003C/code> 파일을 열고 아래와 같이 수정하여 \u003Cem>powerlevel10k\u003C/em> 테마 활성화.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">ZSH_THEME\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"powerlevel10k/powerlevel10k\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>source ~/.zshrc\u003C/code> 명령어 실행해 준 다음 테마 설정에 들어가면 된다. 나중에 \u003Ccode>p10k configure\u003C/code> 명령어로 언제든지 다시 설정할 수 있다.\u003C/p>\n\u003Chr>\n\u003Cp>기타 플러그인:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">brew\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> zsh-syntax-highlighting\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># ~/.zshrc 마지막 줄에 추가\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">source\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"기타\">기타\u003C/h2>\n\u003Cp>터미널에 표시되는 PC 이름과 호스트 이름 변경.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"sh\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> scutil\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --set\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ComputerName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"newname\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> scutil\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --set\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> LocalHostName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"newname\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sudo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> scutil\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --set\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> HostName\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"newname\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>또는 아래의 메뉴에서도 변경 가능.\u003C/p>\n\u003Cp>\u003Ccode>System Settings -> Sharing -> Local Hostname -> edit\u003C/code>\u003C/p>",{"headings":587,"localImagePaths":601,"remoteImagePaths":602,"frontmatter":603,"imagePaths":604},[588,591,594,597,599],{"depth":105,"slug":589,"text":590},"패키지-매니저-설치","패키지 매니저 설치",{"depth":105,"slug":592,"text":593},"gui-applications-설치","GUI Applications 설치",{"depth":105,"slug":595,"text":596},"cli-applications-설치","CLI Applications 설치",{"depth":105,"slug":598,"text":598},"oh-my-zsh",{"depth":105,"slug":600,"text":600},"기타",[],[],{"title":578,"folge":180,"uid":575,"pubDate":579,"updatedDate":580},[]]